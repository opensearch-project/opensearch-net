/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
* 	http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
// 		*NIX 		:	./build.sh codegen
// 		Windows 	:	build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using OpenSearch.Net;
using static OpenSearch.Net.HttpMethod;

// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable once CheckNamespace
// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable RedundantExtendsListEntry
namespace OpenSearch.Net.Specification.IndicesApi
{
    ///<summary>
    /// Indices APIs.
    /// <para>Not intended to be instantiated directly. Use the <see cref = "IOpenSearchLowLevelClient.Indices"/> property
    /// on <see cref = "IOpenSearchLowLevelClient"/>.
    ///</para>
    ///</summary>
    public partial class LowLevelIndicesNamespace : NamespacedClientProxy
    {
        ///<summary>HEAD on /{index}/_mapping/{type} <para>https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/</para></summary>
        ///<param name = "index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
        ///<param name = "type">A comma-separated list of document types to check</param>
        ///<param name = "requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        ///<remarks>Deprecated as of OpenSearch 2.0</remarks>
        public TResponse TypeExists<TResponse>(
            string index,
            string type,
            TypeExistsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                HEAD,
                Url($"{index:index}/_mapping/{type:type}"),
                null,
                RequestParams(requestParameters)
            );

        ///<summary>HEAD on /{index}/_mapping/{type} <para>https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/</para></summary>
        ///<param name = "index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
        ///<param name = "type">A comma-separated list of document types to check</param>
        ///<param name = "requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        ///<remarks>Deprecated as of OpenSearch 2.0</remarks>
        [MapsApi("indices.exists_type", "index, type")]
        public Task<TResponse> TypeExistsAsync<TResponse>(
            string index,
            string type,
            TypeExistsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                HEAD,
                Url($"{index:index}/_mapping/{type:type}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );
    }
}
