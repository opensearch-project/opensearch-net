/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using OpenSearch.Net;
using OpenSearch.Net.Specification.AsynchronousSearchApi;
using OpenSearch.Net.Specification.CatApi;
using OpenSearch.Net.Specification.ClusterApi;
using OpenSearch.Net.Specification.DanglingIndicesApi;
using OpenSearch.Net.Specification.FlowFrameworkApi;
using OpenSearch.Net.Specification.GeospatialApi;
using OpenSearch.Net.Specification.HttpApi;
using OpenSearch.Net.Specification.IndicesApi;
using OpenSearch.Net.Specification.IngestApi;
using OpenSearch.Net.Specification.InsightsApi;
using OpenSearch.Net.Specification.IsmApi;
using OpenSearch.Net.Specification.KnnApi;
using OpenSearch.Net.Specification.ListApi;
using OpenSearch.Net.Specification.LtrApi;
using OpenSearch.Net.Specification.MlApi;
using OpenSearch.Net.Specification.NeuralApi;
using OpenSearch.Net.Specification.NodesApi;
using OpenSearch.Net.Specification.NotificationsApi;
using OpenSearch.Net.Specification.ObservabilityApi;
using OpenSearch.Net.Specification.PplApi;
using OpenSearch.Net.Specification.QueryApi;
using OpenSearch.Net.Specification.RemoteStoreApi;
using OpenSearch.Net.Specification.ReplicationApi;
using OpenSearch.Net.Specification.RollupsApi;
using OpenSearch.Net.Specification.SearchPipelineApi;
using OpenSearch.Net.Specification.SearchRelevanceApi;
using OpenSearch.Net.Specification.SecurityAnalyticsApi;
using OpenSearch.Net.Specification.SecurityApi;
using OpenSearch.Net.Specification.SmApi;
using OpenSearch.Net.Specification.SnapshotApi;
using OpenSearch.Net.Specification.SqlApi;
using OpenSearch.Net.Specification.TasksApi;
using OpenSearch.Net.Specification.TransformsApi;
using OpenSearch.Net.Specification.WlmApi;
using static OpenSearch.Net.HttpMethod;

// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable RedundantExtendsListEntry
namespace OpenSearch.Net
{
    /// <summary>
    /// OpenSearch low level client
    /// </summary>
    public partial class OpenSearchLowLevelClient : IOpenSearchLowLevelClient
    {
        public LowLevelAsynchronousSearchNamespace AsynchronousSearch { get; private set; }
        public LowLevelCatNamespace Cat { get; private set; }
        public LowLevelClusterNamespace Cluster { get; private set; }
        public LowLevelDanglingIndicesNamespace DanglingIndices { get; private set; }
        public LowLevelFlowFrameworkNamespace FlowFramework { get; private set; }
        public LowLevelGeospatialNamespace Geospatial { get; private set; }
        public LowLevelIndicesNamespace Indices { get; private set; }
        public LowLevelIngestNamespace Ingest { get; private set; }
        public LowLevelInsightsNamespace Insights { get; private set; }
        public LowLevelIsmNamespace Ism { get; private set; }
        public LowLevelKnnNamespace Knn { get; private set; }
        public LowLevelListNamespace List { get; private set; }
        public LowLevelLtrNamespace Ltr { get; private set; }
        public LowLevelMlNamespace Ml { get; private set; }
        public LowLevelNeuralNamespace Neural { get; private set; }
        public LowLevelNodesNamespace Nodes { get; private set; }
        public LowLevelHttpNamespace Http { get; private set; }
        public LowLevelNotificationsNamespace Notifications { get; private set; }
        public LowLevelObservabilityNamespace Observability { get; private set; }
        public LowLevelPplNamespace Ppl { get; private set; }
        public LowLevelQueryNamespace Query { get; private set; }
        public LowLevelRemoteStoreNamespace RemoteStore { get; private set; }
        public LowLevelReplicationNamespace Replication { get; private set; }
        public LowLevelRollupsNamespace Rollups { get; private set; }
        public LowLevelSearchPipelineNamespace SearchPipeline { get; private set; }
        public LowLevelSearchRelevanceNamespace SearchRelevance { get; private set; }
        public LowLevelSecurityNamespace Security { get; private set; }
        public LowLevelSecurityAnalyticsNamespace SecurityAnalytics { get; private set; }
        public LowLevelSmNamespace Sm { get; private set; }
        public LowLevelSnapshotNamespace Snapshot { get; private set; }
        public LowLevelSqlNamespace Sql { get; private set; }
        public LowLevelTasksNamespace Tasks { get; private set; }
        public LowLevelTransformsNamespace Transforms { get; private set; }
        public LowLevelWlmNamespace Wlm { get; private set; }

        partial void SetupGeneratedNamespaces()
        {
            AsynchronousSearch = new LowLevelAsynchronousSearchNamespace(this);
            Cat = new LowLevelCatNamespace(this);
            Cluster = new LowLevelClusterNamespace(this);
            DanglingIndices = new LowLevelDanglingIndicesNamespace(this);
            FlowFramework = new LowLevelFlowFrameworkNamespace(this);
            Geospatial = new LowLevelGeospatialNamespace(this);
            Indices = new LowLevelIndicesNamespace(this);
            Ingest = new LowLevelIngestNamespace(this);
            Insights = new LowLevelInsightsNamespace(this);
            Ism = new LowLevelIsmNamespace(this);
            Knn = new LowLevelKnnNamespace(this);
            List = new LowLevelListNamespace(this);
            Ltr = new LowLevelLtrNamespace(this);
            Ml = new LowLevelMlNamespace(this);
            Neural = new LowLevelNeuralNamespace(this);
            Nodes = new LowLevelNodesNamespace(this);
            Http = new LowLevelHttpNamespace(this);
            Notifications = new LowLevelNotificationsNamespace(this);
            Observability = new LowLevelObservabilityNamespace(this);
            Ppl = new LowLevelPplNamespace(this);
            Query = new LowLevelQueryNamespace(this);
            RemoteStore = new LowLevelRemoteStoreNamespace(this);
            Replication = new LowLevelReplicationNamespace(this);
            Rollups = new LowLevelRollupsNamespace(this);
            SearchPipeline = new LowLevelSearchPipelineNamespace(this);
            SearchRelevance = new LowLevelSearchRelevanceNamespace(this);
            Security = new LowLevelSecurityNamespace(this);
            SecurityAnalytics = new LowLevelSecurityAnalyticsNamespace(this);
            Sm = new LowLevelSmNamespace(this);
            Snapshot = new LowLevelSnapshotNamespace(this);
            Sql = new LowLevelSqlNamespace(this);
            Tasks = new LowLevelTasksNamespace(this);
            Transforms = new LowLevelTransformsNamespace(this);
            Wlm = new LowLevelWlmNamespace(this);
        }

        /// <summary>POST on /_bulk <para>https://opensearch.org/docs/latest/api-reference/document-apis/bulk/</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Bulk<TResponse>(
            PostData body,
            BulkRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_bulk", body, RequestParams(requestParameters));

        /// <summary>POST on /_bulk <para>https://opensearch.org/docs/latest/api-reference/document-apis/bulk/</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("bulk", "body")]
        public Task<TResponse> BulkAsync<TResponse>(
            PostData body,
            BulkRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(POST, "_bulk", ctx, body, RequestParams(requestParameters));

        /// <summary>POST on /{index}/_bulk <para>https://opensearch.org/docs/latest/api-reference/document-apis/bulk/</para></summary>
        /// <param name="index">Name of the data stream, index, or index alias to perform bulk actions on.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Bulk<TResponse>(
            string index,
            PostData body,
            BulkRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_bulk"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_bulk <para>https://opensearch.org/docs/latest/api-reference/document-apis/bulk/</para></summary>
        /// <param name="index">Name of the data stream, index, or index alias to perform bulk actions on.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("bulk", "index, body")]
        public Task<TResponse> BulkAsync<TResponse>(
            string index,
            PostData body,
            BulkRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_bulk"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_bulk/stream <para>https://opensearch.org/docs/latest/api-reference/document-apis/bulk-streaming/</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.17.0 or greater.</remarks>
        public TResponse BulkStream<TResponse>(
            PostData body,
            BulkStreamRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(PUT, "_bulk/stream", body, RequestParams(requestParameters));

        /// <summary>PUT on /_bulk/stream <para>https://opensearch.org/docs/latest/api-reference/document-apis/bulk-streaming/</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.17.0 or greater.</remarks>
        [MapsApi("bulk_stream", "body")]
        public Task<TResponse> BulkStreamAsync<TResponse>(
            PostData body,
            BulkStreamRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                "_bulk/stream",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /{index}/_bulk/stream <para>https://opensearch.org/docs/latest/api-reference/document-apis/bulk-streaming/</para></summary>
        /// <param name="index">Name of the data stream, index, or index alias to perform bulk actions on.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.17.0 or greater.</remarks>
        public TResponse BulkStream<TResponse>(
            string index,
            PostData body,
            BulkStreamRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"{index:index}/_bulk/stream"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /{index}/_bulk/stream <para>https://opensearch.org/docs/latest/api-reference/document-apis/bulk-streaming/</para></summary>
        /// <param name="index">Name of the data stream, index, or index alias to perform bulk actions on.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.17.0 or greater.</remarks>
        [MapsApi("bulk_stream", "index, body")]
        public Task<TResponse> BulkStreamAsync<TResponse>(
            string index,
            PostData body,
            BulkStreamRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"{index:index}/_bulk/stream"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_search/scroll <para>https://opensearch.org/docs/latest/api-reference/scroll/</para></summary>
        /// <param name="body">A comma-separated list of scroll IDs to clear if none was specified using the &lt;c&gt;scroll_id&lt;/c&gt; parameter.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse ClearScroll<TResponse>(
            PostData body,
            ClearScrollRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(DELETE, "_search/scroll", body, RequestParams(requestParameters));

        /// <summary>DELETE on /_search/scroll <para>https://opensearch.org/docs/latest/api-reference/scroll/</para></summary>
        /// <param name="body">A comma-separated list of scroll IDs to clear if none was specified using the &lt;c&gt;scroll_id&lt;/c&gt; parameter.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("clear_scroll", "body")]
        public Task<TResponse> ClearScrollAsync<TResponse>(
            PostData body,
            ClearScrollRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                "_search/scroll",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_search/scroll/{scroll_id} <para>https://opensearch.org/docs/latest/api-reference/scroll/</para></summary>
        /// <param name="scrollId">A comma-separated list of scroll IDs to clear. To clear all scroll IDs, use &lt;c&gt;_all&lt;/c&gt;.</param>
        /// <param name="body">A comma-separated list of scroll IDs to clear if none was specified using the &lt;c&gt;scroll_id&lt;/c&gt; parameter.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [Obsolete(
            "Deprecated in version 1.0.0: A scroll id can be quite large and should be specified as part of the body."
        )]
        public TResponse ClearScroll<TResponse>(
            string scrollId,
            PostData body,
            ClearScrollRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_search/scroll/{scrollId:scrollId}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_search/scroll/{scroll_id} <para>https://opensearch.org/docs/latest/api-reference/scroll/</para></summary>
        /// <param name="scrollId">A comma-separated list of scroll IDs to clear. To clear all scroll IDs, use &lt;c&gt;_all&lt;/c&gt;.</param>
        /// <param name="body">A comma-separated list of scroll IDs to clear if none was specified using the &lt;c&gt;scroll_id&lt;/c&gt; parameter.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [Obsolete(
            "Deprecated in version 1.0.0: A scroll id can be quite large and should be specified as part of the body."
        )]
        [MapsApi("clear_scroll", "scroll_id, body")]
        public Task<TResponse> ClearScrollAsync<TResponse>(
            string scrollId,
            PostData body,
            ClearScrollRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_search/scroll/{scrollId:scrollId}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_count <para>https://opensearch.org/docs/latest/api-reference/count/</para></summary>
        /// <param name="body">Query to restrict the results specified with the Query DSL (optional).</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Count<TResponse>(
            PostData body,
            CountRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_count", body, RequestParams(requestParameters));

        /// <summary>POST on /_count <para>https://opensearch.org/docs/latest/api-reference/count/</para></summary>
        /// <param name="body">Query to restrict the results specified with the Query DSL (optional).</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("count", "body")]
        public Task<TResponse> CountAsync<TResponse>(
            PostData body,
            CountRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(POST, "_count", ctx, body, RequestParams(requestParameters));

        /// <summary>POST on /{index}/_count <para>https://opensearch.org/docs/latest/api-reference/count/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases to search. Supports wildcards (&lt;c&gt;*&lt;/c&gt;). To search all data streams and indexes, omit this parameter or use &lt;c&gt;*&lt;/c&gt; or &lt;c&gt;_all&lt;/c&gt;.</param>
        /// <param name="body">Query to restrict the results specified with the Query DSL (optional).</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Count<TResponse>(
            string index,
            PostData body,
            CountRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_count"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_count <para>https://opensearch.org/docs/latest/api-reference/count/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases to search. Supports wildcards (&lt;c&gt;*&lt;/c&gt;). To search all data streams and indexes, omit this parameter or use &lt;c&gt;*&lt;/c&gt; or &lt;c&gt;_all&lt;/c&gt;.</param>
        /// <param name="body">Query to restrict the results specified with the Query DSL (optional).</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("count", "index, body")]
        public Task<TResponse> CountAsync<TResponse>(
            string index,
            PostData body,
            CountRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_count"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /{index}/_create/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/index-document/</para></summary>
        /// <param name="index">Name of the data stream or index to target. If the target doesn&#x27;t exist and matches the name or wildcard (&lt;c&gt;*&lt;/c&gt;) pattern of an index template with a &lt;c&gt;data_stream&lt;/c&gt; definition, this request creates the data stream. If the target doesn&#x27;t exist and doesn&#x27;t match a data stream template, this request creates the index.</param>
        /// <param name="id">The unique identifier for the document.</param>
        /// <param name="body">The document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Create<TResponse>(
            string index,
            string id,
            PostData body,
            CreateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"{index:index}/_create/{id:id}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /{index}/_create/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/index-document/</para></summary>
        /// <param name="index">Name of the data stream or index to target. If the target doesn&#x27;t exist and matches the name or wildcard (&lt;c&gt;*&lt;/c&gt;) pattern of an index template with a &lt;c&gt;data_stream&lt;/c&gt; definition, this request creates the data stream. If the target doesn&#x27;t exist and doesn&#x27;t match a data stream template, this request creates the index.</param>
        /// <param name="id">The unique identifier for the document.</param>
        /// <param name="body">The document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("create", "index, id, body")]
        public Task<TResponse> CreateAsync<TResponse>(
            string index,
            string id,
            PostData body,
            CreateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"{index:index}/_create/{id:id}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_search/point_in_time <para>https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#create-a-pit</para></summary>
        /// <param name="index">A comma-separated list of indexes; use &lt;c&gt;_all&lt;/c&gt; or empty string to perform the operation on all indexes.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.4.0 or greater.</remarks>
        public TResponse CreatePit<TResponse>(
            string index,
            CreatePitRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_search/point_in_time"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_search/point_in_time <para>https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#create-a-pit</para></summary>
        /// <param name="index">A comma-separated list of indexes; use &lt;c&gt;_all&lt;/c&gt; or empty string to perform the operation on all indexes.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.4.0 or greater.</remarks>
        [MapsApi("create_pit", "index")]
        public Task<TResponse> CreatePitAsync<TResponse>(
            string index,
            CreatePitRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_search/point_in_time"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /{index}/_doc/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/delete-document/</para></summary>
        /// <param name="index">Name of the target index.</param>
        /// <param name="id">The unique identifier for the document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Delete<TResponse>(
            string index,
            string id,
            DeleteRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"{index:index}/_doc/{id:id}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /{index}/_doc/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/delete-document/</para></summary>
        /// <param name="index">Name of the target index.</param>
        /// <param name="id">The unique identifier for the document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("delete", "index, id")]
        public Task<TResponse> DeleteAsync<TResponse>(
            string index,
            string id,
            DeleteRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"{index:index}/_doc/{id:id}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_search/point_in_time/_all <para>https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#delete-pits</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.4.0 or greater.</remarks>
        public TResponse DeleteAllPits<TResponse>(
            DeleteAllPitsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                "_search/point_in_time/_all",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_search/point_in_time/_all <para>https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#delete-pits</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.4.0 or greater.</remarks>
        [MapsApi("delete_all_pits", "")]
        public Task<TResponse> DeleteAllPitsAsync<TResponse>(
            DeleteAllPitsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                "_search/point_in_time/_all",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_delete_by_query <para>https://opensearch.org/docs/latest/api-reference/document-apis/delete-by-query/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases to search. Supports wildcards (&lt;c&gt;*&lt;/c&gt;). To search all data streams or indexes, omit this parameter or use &lt;c&gt;*&lt;/c&gt; or &lt;c&gt;_all&lt;/c&gt;.</param>
        /// <param name="body">The search definition using the Query DSL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DeleteByQuery<TResponse>(
            string index,
            PostData body,
            DeleteByQueryRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_delete_by_query"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_delete_by_query <para>https://opensearch.org/docs/latest/api-reference/document-apis/delete-by-query/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases to search. Supports wildcards (&lt;c&gt;*&lt;/c&gt;). To search all data streams or indexes, omit this parameter or use &lt;c&gt;*&lt;/c&gt; or &lt;c&gt;_all&lt;/c&gt;.</param>
        /// <param name="body">The search definition using the Query DSL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("delete_by_query", "index, body")]
        public Task<TResponse> DeleteByQueryAsync<TResponse>(
            string index,
            PostData body,
            DeleteByQueryRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_delete_by_query"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_delete_by_query/{task_id}/_rethrottle <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="taskId">The ID for the task.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DeleteByQueryRethrottle<TResponse>(
            string taskId,
            DeleteByQueryRethrottleRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"_delete_by_query/{taskId:taskId}/_rethrottle"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_delete_by_query/{task_id}/_rethrottle <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="taskId">The ID for the task.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("delete_by_query_rethrottle", "task_id")]
        public Task<TResponse> DeleteByQueryRethrottleAsync<TResponse>(
            string taskId,
            DeleteByQueryRethrottleRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"_delete_by_query/{taskId:taskId}/_rethrottle"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_search/point_in_time <para>https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#delete-pits</para></summary>
        /// <param name="body">The point-in-time ids to be deleted.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.4.0 or greater.</remarks>
        public TResponse DeletePit<TResponse>(
            PostData body,
            DeletePitRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                "_search/point_in_time",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_search/point_in_time <para>https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#delete-pits</para></summary>
        /// <param name="body">The point-in-time ids to be deleted.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.4.0 or greater.</remarks>
        [MapsApi("delete_pit", "body")]
        public Task<TResponse> DeletePitAsync<TResponse>(
            PostData body,
            DeletePitRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                "_search/point_in_time",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_scripts/{id} <para>https://opensearch.org/docs/latest/api-reference/script-apis/delete-script/</para></summary>
        /// <param name="id">Identifier for the stored script or search template.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DeleteScript<TResponse>(
            string id,
            DeleteScriptRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_scripts/{id:id}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_scripts/{id} <para>https://opensearch.org/docs/latest/api-reference/script-apis/delete-script/</para></summary>
        /// <param name="id">Identifier for the stored script or search template.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("delete_script", "id")]
        public Task<TResponse> DeleteScriptAsync<TResponse>(
            string id,
            DeleteScriptRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_scripts/{id:id}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>HEAD on /{index}/_doc/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases. Supports wildcards (&lt;c&gt;*&lt;/c&gt;).</param>
        /// <param name="id">Identifier of the document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DocumentExists<TResponse>(
            string index,
            string id,
            DocumentExistsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                HEAD,
                Url($"{index:index}/_doc/{id:id}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>HEAD on /{index}/_doc/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases. Supports wildcards (&lt;c&gt;*&lt;/c&gt;).</param>
        /// <param name="id">Identifier of the document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("exists", "index, id")]
        public Task<TResponse> DocumentExistsAsync<TResponse>(
            string index,
            string id,
            DocumentExistsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                HEAD,
                Url($"{index:index}/_doc/{id:id}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>HEAD on /{index}/_source/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases. Supports wildcards (&lt;c&gt;*&lt;/c&gt;).</param>
        /// <param name="id">Identifier of the document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse SourceExists<TResponse>(
            string index,
            string id,
            SourceExistsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                HEAD,
                Url($"{index:index}/_source/{id:id}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>HEAD on /{index}/_source/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases. Supports wildcards (&lt;c&gt;*&lt;/c&gt;).</param>
        /// <param name="id">Identifier of the document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("exists_source", "index, id")]
        public Task<TResponse> SourceExistsAsync<TResponse>(
            string index,
            string id,
            SourceExistsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                HEAD,
                Url($"{index:index}/_source/{id:id}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_explain/{id} <para>https://opensearch.org/docs/latest/api-reference/explain/</para></summary>
        /// <param name="index">Index names used to limit the request. Only a single index name can be provided to this parameter.</param>
        /// <param name="id">Defines the document ID.</param>
        /// <param name="body">The query definition using the Query DSL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Explain<TResponse>(
            string index,
            string id,
            PostData body,
            ExplainRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_explain/{id:id}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_explain/{id} <para>https://opensearch.org/docs/latest/api-reference/explain/</para></summary>
        /// <param name="index">Index names used to limit the request. Only a single index name can be provided to this parameter.</param>
        /// <param name="id">Defines the document ID.</param>
        /// <param name="body">The query definition using the Query DSL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("explain", "index, id, body")]
        public Task<TResponse> ExplainAsync<TResponse>(
            string index,
            string id,
            PostData body,
            ExplainRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_explain/{id:id}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_field_caps <para>https://opensearch.org/docs/latest/field-types/supported-field-types/alias/#using-aliases-in-field-capabilities-api-operations</para></summary>
        /// <param name="body">An index filter specified with the Query DSL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse FieldCapabilities<TResponse>(
            PostData body,
            FieldCapabilitiesRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_field_caps", body, RequestParams(requestParameters));

        /// <summary>POST on /_field_caps <para>https://opensearch.org/docs/latest/field-types/supported-field-types/alias/#using-aliases-in-field-capabilities-api-operations</para></summary>
        /// <param name="body">An index filter specified with the Query DSL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("field_caps", "body")]
        public Task<TResponse> FieldCapabilitiesAsync<TResponse>(
            PostData body,
            FieldCapabilitiesRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_field_caps",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_field_caps <para>https://opensearch.org/docs/latest/field-types/supported-field-types/alias/#using-aliases-in-field-capabilities-api-operations</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases used to limit the request. Supports wildcards (*). To target all data streams and indexes, omit this parameter or use * or &lt;c&gt;_all&lt;/c&gt;.</param>
        /// <param name="body">An index filter specified with the Query DSL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse FieldCapabilities<TResponse>(
            string index,
            PostData body,
            FieldCapabilitiesRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_field_caps"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_field_caps <para>https://opensearch.org/docs/latest/field-types/supported-field-types/alias/#using-aliases-in-field-capabilities-api-operations</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases used to limit the request. Supports wildcards (*). To target all data streams and indexes, omit this parameter or use * or &lt;c&gt;_all&lt;/c&gt;.</param>
        /// <param name="body">An index filter specified with the Query DSL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("field_caps", "index, body")]
        public Task<TResponse> FieldCapabilitiesAsync<TResponse>(
            string index,
            PostData body,
            FieldCapabilitiesRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_field_caps"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /{index}/_doc/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/</para></summary>
        /// <param name="index">The name of the index that contains the document.</param>
        /// <param name="id">The unique identifier of the document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Get<TResponse>(
            string index,
            string id,
            GetRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"{index:index}/_doc/{id:id}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /{index}/_doc/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/</para></summary>
        /// <param name="index">The name of the index that contains the document.</param>
        /// <param name="id">The unique identifier of the document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("get", "index, id")]
        public Task<TResponse> GetAsync<TResponse>(
            string index,
            string id,
            GetRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"{index:index}/_doc/{id:id}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_search/point_in_time/_all <para>https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#list-all-pits</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.4.0 or greater.</remarks>
        public TResponse GetAllPits<TResponse>(GetAllPitsRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_search/point_in_time/_all",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_search/point_in_time/_all <para>https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#list-all-pits</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.4.0 or greater.</remarks>
        [MapsApi("get_all_pits", "")]
        public Task<TResponse> GetAllPitsAsync<TResponse>(
            GetAllPitsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_search/point_in_time/_all",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_scripts/{id} <para>https://opensearch.org/docs/latest/api-reference/script-apis/get-stored-script/</para></summary>
        /// <param name="id">Identifier for the stored script or search template.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetScript<TResponse>(
            string id,
            GetScriptRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_scripts/{id:id}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_scripts/{id} <para>https://opensearch.org/docs/latest/api-reference/script-apis/get-stored-script/</para></summary>
        /// <param name="id">Identifier for the stored script or search template.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("get_script", "id")]
        public Task<TResponse> GetScriptAsync<TResponse>(
            string id,
            GetScriptRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_scripts/{id:id}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_script_context <para>https://opensearch.org/docs/latest/api-reference/script-apis/get-script-contexts/</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetScriptContext<TResponse>(
            GetScriptContextRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(GET, "_script_context", null, RequestParams(requestParameters));

        /// <summary>GET on /_script_context <para>https://opensearch.org/docs/latest/api-reference/script-apis/get-script-contexts/</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("get_script_context", "")]
        public Task<TResponse> GetScriptContextAsync<TResponse>(
            GetScriptContextRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_script_context",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_script_language <para>https://opensearch.org/docs/latest/api-reference/script-apis/get-script-language/</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetScriptLanguages<TResponse>(
            GetScriptLanguagesRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(GET, "_script_language", null, RequestParams(requestParameters));

        /// <summary>GET on /_script_language <para>https://opensearch.org/docs/latest/api-reference/script-apis/get-script-language/</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("get_script_languages", "")]
        public Task<TResponse> GetScriptLanguagesAsync<TResponse>(
            GetScriptLanguagesRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_script_language",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /{index}/_source/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/</para></summary>
        /// <param name="index">The name of the index that contains the document.</param>
        /// <param name="id">The unique identifier of the document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Source<TResponse>(
            string index,
            string id,
            SourceRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"{index:index}/_source/{id:id}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /{index}/_source/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/</para></summary>
        /// <param name="index">The name of the index that contains the document.</param>
        /// <param name="id">The unique identifier of the document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("get_source", "index, id")]
        public Task<TResponse> SourceAsync<TResponse>(
            string index,
            string id,
            SourceRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"{index:index}/_source/{id:id}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_doc <para>https://opensearch.org/docs/latest/api-reference/document-apis/index-document/</para></summary>
        /// <param name="index">Name of the data stream or index to target.</param>
        /// <param name="body">The document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Index<TResponse>(
            string index,
            PostData body,
            IndexRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_doc"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_doc <para>https://opensearch.org/docs/latest/api-reference/document-apis/index-document/</para></summary>
        /// <param name="index">Name of the data stream or index to target.</param>
        /// <param name="body">The document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("index", "index, body")]
        public Task<TResponse> IndexAsync<TResponse>(
            string index,
            PostData body,
            IndexRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_doc"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /{index}/_doc/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/index-document/</para></summary>
        /// <param name="index">Name of the data stream or index to target.</param>
        /// <param name="id">The unique identifier for the document.</param>
        /// <param name="body">The document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Index<TResponse>(
            string index,
            string id,
            PostData body,
            IndexRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"{index:index}/_doc/{id:id}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /{index}/_doc/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/index-document/</para></summary>
        /// <param name="index">Name of the data stream or index to target.</param>
        /// <param name="id">The unique identifier for the document.</param>
        /// <param name="body">The document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("index", "index, id, body")]
        public Task<TResponse> IndexAsync<TResponse>(
            string index,
            string id,
            PostData body,
            IndexRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"{index:index}/_doc/{id:id}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>GET on / <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse RootNodeInfo<TResponse>(
            RootNodeInfoRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(GET, "", null, RequestParams(requestParameters));

        /// <summary>GET on / <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("info", "")]
        public Task<TResponse> RootNodeInfoAsync<TResponse>(
            RootNodeInfoRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(GET, "", ctx, null, RequestParams(requestParameters));

        /// <summary>POST on /_mget <para>https://opensearch.org/docs/latest/api-reference/document-apis/multi-get/</para></summary>
        /// <param name="body">Document identifiers; can be either &lt;c&gt;docs&lt;/c&gt; (containing full document information) or &lt;c&gt;ids&lt;/c&gt; (when index is provided in the URL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse MultiGet<TResponse>(
            PostData body,
            MultiGetRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_mget", body, RequestParams(requestParameters));

        /// <summary>POST on /_mget <para>https://opensearch.org/docs/latest/api-reference/document-apis/multi-get/</para></summary>
        /// <param name="body">Document identifiers; can be either &lt;c&gt;docs&lt;/c&gt; (containing full document information) or &lt;c&gt;ids&lt;/c&gt; (when index is provided in the URL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("mget", "body")]
        public Task<TResponse> MultiGetAsync<TResponse>(
            PostData body,
            MultiGetRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(POST, "_mget", ctx, body, RequestParams(requestParameters));

        /// <summary>POST on /{index}/_mget <para>https://opensearch.org/docs/latest/api-reference/document-apis/multi-get/</para></summary>
        /// <param name="index">The name of the index to retrieve documents from when &lt;c&gt;ids&lt;/c&gt; are specified, or when a document in the &lt;c&gt;docs&lt;/c&gt; array does not specify an index.</param>
        /// <param name="body">Document identifiers; can be either &lt;c&gt;docs&lt;/c&gt; (containing full document information) or &lt;c&gt;ids&lt;/c&gt; (when index is provided in the URL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse MultiGet<TResponse>(
            string index,
            PostData body,
            MultiGetRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_mget"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_mget <para>https://opensearch.org/docs/latest/api-reference/document-apis/multi-get/</para></summary>
        /// <param name="index">The name of the index to retrieve documents from when &lt;c&gt;ids&lt;/c&gt; are specified, or when a document in the &lt;c&gt;docs&lt;/c&gt; array does not specify an index.</param>
        /// <param name="body">Document identifiers; can be either &lt;c&gt;docs&lt;/c&gt; (containing full document information) or &lt;c&gt;ids&lt;/c&gt; (when index is provided in the URL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("mget", "index, body")]
        public Task<TResponse> MultiGetAsync<TResponse>(
            string index,
            PostData body,
            MultiGetRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_mget"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_msearch <para>https://opensearch.org/docs/latest/api-reference/multi-search/</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse MultiSearch<TResponse>(
            PostData body,
            MultiSearchRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_msearch", body, RequestParams(requestParameters));

        /// <summary>POST on /_msearch <para>https://opensearch.org/docs/latest/api-reference/multi-search/</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("msearch", "body")]
        public Task<TResponse> MultiSearchAsync<TResponse>(
            PostData body,
            MultiSearchRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_msearch",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_msearch <para>https://opensearch.org/docs/latest/api-reference/multi-search/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and index aliases to search.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse MultiSearch<TResponse>(
            string index,
            PostData body,
            MultiSearchRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_msearch"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_msearch <para>https://opensearch.org/docs/latest/api-reference/multi-search/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and index aliases to search.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("msearch", "index, body")]
        public Task<TResponse> MultiSearchAsync<TResponse>(
            string index,
            PostData body,
            MultiSearchRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_msearch"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_msearch/template <para>https://opensearch.org/docs/latest/search-plugins/search-template/</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse MultiSearchTemplate<TResponse>(
            PostData body,
            MultiSearchTemplateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_msearch/template", body, RequestParams(requestParameters));

        /// <summary>POST on /_msearch/template <para>https://opensearch.org/docs/latest/search-plugins/search-template/</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("msearch_template", "body")]
        public Task<TResponse> MultiSearchTemplateAsync<TResponse>(
            PostData body,
            MultiSearchTemplateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_msearch/template",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_msearch/template <para>https://opensearch.org/docs/latest/search-plugins/search-template/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases to search. Supports wildcards (&lt;c&gt;*&lt;/c&gt;). To search all data streams and indexes, omit this parameter or use &lt;c&gt;*&lt;/c&gt;.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse MultiSearchTemplate<TResponse>(
            string index,
            PostData body,
            MultiSearchTemplateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_msearch/template"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_msearch/template <para>https://opensearch.org/docs/latest/search-plugins/search-template/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases to search. Supports wildcards (&lt;c&gt;*&lt;/c&gt;). To search all data streams and indexes, omit this parameter or use &lt;c&gt;*&lt;/c&gt;.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("msearch_template", "index, body")]
        public Task<TResponse> MultiSearchTemplateAsync<TResponse>(
            string index,
            PostData body,
            MultiSearchTemplateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_msearch/template"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_mtermvectors <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="body">Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse MultiTermVectors<TResponse>(
            PostData body,
            MultiTermVectorsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_mtermvectors", body, RequestParams(requestParameters));

        /// <summary>POST on /_mtermvectors <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="body">Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("mtermvectors", "body")]
        public Task<TResponse> MultiTermVectorsAsync<TResponse>(
            PostData body,
            MultiTermVectorsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_mtermvectors",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_mtermvectors <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="index">The name of the index that contains the document.</param>
        /// <param name="body">Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse MultiTermVectors<TResponse>(
            string index,
            PostData body,
            MultiTermVectorsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_mtermvectors"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_mtermvectors <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="index">The name of the index that contains the document.</param>
        /// <param name="body">Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("mtermvectors", "index, body")]
        public Task<TResponse> MultiTermVectorsAsync<TResponse>(
            string index,
            PostData body,
            MultiTermVectorsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_mtermvectors"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>HEAD on / <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Ping<TResponse>(PingRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(HEAD, "", null, RequestParams(requestParameters));

        /// <summary>HEAD on / <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("ping", "")]
        public Task<TResponse> PingAsync<TResponse>(
            PingRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(HEAD, "", ctx, null, RequestParams(requestParameters));

        /// <summary>PUT on /_scripts/{id} <para>https://opensearch.org/docs/latest/api-reference/script-apis/create-stored-script/</para></summary>
        /// <param name="id">Identifier for the stored script or search template. Must be unique within the cluster.</param>
        /// <param name="body">The document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PutScript<TResponse>(
            string id,
            PostData body,
            PutScriptRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"_scripts/{id:id}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_scripts/{id} <para>https://opensearch.org/docs/latest/api-reference/script-apis/create-stored-script/</para></summary>
        /// <param name="id">Identifier for the stored script or search template. Must be unique within the cluster.</param>
        /// <param name="body">The document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("put_script", "id, body")]
        public Task<TResponse> PutScriptAsync<TResponse>(
            string id,
            PostData body,
            PutScriptRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"_scripts/{id:id}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_scripts/{id}/{context} <para>https://opensearch.org/docs/latest/api-reference/script-apis/create-stored-script/</para></summary>
        /// <param name="id">Identifier for the stored script or search template. Must be unique within the cluster.</param>
        /// <param name="context">Context in which the script or search template should run. To prevent errors, the API immediately compiles the script or template in this context.</param>
        /// <param name="body">The document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PutScript<TResponse>(
            string id,
            string context,
            PostData body,
            PutScriptRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"_scripts/{id:id}/{context:context}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_scripts/{id}/{context} <para>https://opensearch.org/docs/latest/api-reference/script-apis/create-stored-script/</para></summary>
        /// <param name="id">Identifier for the stored script or search template. Must be unique within the cluster.</param>
        /// <param name="context">Context in which the script or search template should run. To prevent errors, the API immediately compiles the script or template in this context.</param>
        /// <param name="body">The document.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("put_script", "id, context, body")]
        public Task<TResponse> PutScriptAsync<TResponse>(
            string id,
            string context,
            PostData body,
            PutScriptRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"_scripts/{id:id}/{context:context}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_rank_eval <para>https://opensearch.org/docs/latest/api-reference/rank-eval/</para></summary>
        /// <param name="body">The ranking evaluation search definition, including search requests, document ratings and ranking metric definition.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse RankEval<TResponse>(
            PostData body,
            RankEvalRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_rank_eval", body, RequestParams(requestParameters));

        /// <summary>POST on /_rank_eval <para>https://opensearch.org/docs/latest/api-reference/rank-eval/</para></summary>
        /// <param name="body">The ranking evaluation search definition, including search requests, document ratings and ranking metric definition.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("rank_eval", "body")]
        public Task<TResponse> RankEvalAsync<TResponse>(
            PostData body,
            RankEvalRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_rank_eval",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_rank_eval <para>https://opensearch.org/docs/latest/api-reference/rank-eval/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and index aliases used to limit the request. Wildcard (&lt;c&gt;*&lt;/c&gt;) expressions are supported. To target all data streams and indexes in a cluster, omit this parameter or use &lt;c&gt;_all&lt;/c&gt; or &lt;c&gt;*&lt;/c&gt;.</param>
        /// <param name="body">The ranking evaluation search definition, including search requests, document ratings and ranking metric definition.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse RankEval<TResponse>(
            string index,
            PostData body,
            RankEvalRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_rank_eval"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_rank_eval <para>https://opensearch.org/docs/latest/api-reference/rank-eval/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and index aliases used to limit the request. Wildcard (&lt;c&gt;*&lt;/c&gt;) expressions are supported. To target all data streams and indexes in a cluster, omit this parameter or use &lt;c&gt;_all&lt;/c&gt; or &lt;c&gt;*&lt;/c&gt;.</param>
        /// <param name="body">The ranking evaluation search definition, including search requests, document ratings and ranking metric definition.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("rank_eval", "index, body")]
        public Task<TResponse> RankEvalAsync<TResponse>(
            string index,
            PostData body,
            RankEvalRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_rank_eval"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_reindex <para>https://opensearch.org/docs/latest/im-plugin/reindex-data/</para></summary>
        /// <param name="body">The search definition using the Query DSL and the prototype for the index request.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse ReindexOnServer<TResponse>(
            PostData body,
            ReindexOnServerRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_reindex", body, RequestParams(requestParameters));

        /// <summary>POST on /_reindex <para>https://opensearch.org/docs/latest/im-plugin/reindex-data/</para></summary>
        /// <param name="body">The search definition using the Query DSL and the prototype for the index request.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("reindex", "body")]
        public Task<TResponse> ReindexOnServerAsync<TResponse>(
            PostData body,
            ReindexOnServerRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_reindex",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_reindex/{task_id}/_rethrottle <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="taskId">Identifier for the task.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse ReindexRethrottle<TResponse>(
            string taskId,
            ReindexRethrottleRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"_reindex/{taskId:taskId}/_rethrottle"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_reindex/{task_id}/_rethrottle <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="taskId">Identifier for the task.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("reindex_rethrottle", "task_id")]
        public Task<TResponse> ReindexRethrottleAsync<TResponse>(
            string taskId,
            ReindexRethrottleRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"_reindex/{taskId:taskId}/_rethrottle"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_render/template <para>https://opensearch.org/docs/latest/search-plugins/search-template/</para></summary>
        /// <param name="body">The search definition template and its parameters.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse RenderSearchTemplate<TResponse>(
            PostData body,
            RenderSearchTemplateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_render/template", body, RequestParams(requestParameters));

        /// <summary>POST on /_render/template <para>https://opensearch.org/docs/latest/search-plugins/search-template/</para></summary>
        /// <param name="body">The search definition template and its parameters.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("render_search_template", "body")]
        public Task<TResponse> RenderSearchTemplateAsync<TResponse>(
            PostData body,
            RenderSearchTemplateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_render/template",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_render/template/{id} <para>https://opensearch.org/docs/latest/search-plugins/search-template/</para></summary>
        /// <param name="id">ID of the search template to render. If no &lt;c&gt;source&lt;/c&gt; is specified, this or the &lt;c&gt;id&lt;/c&gt; request body parameter is required.</param>
        /// <param name="body">The search definition template and its parameters.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse RenderSearchTemplate<TResponse>(
            string id,
            PostData body,
            RenderSearchTemplateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"_render/template/{id:id}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_render/template/{id} <para>https://opensearch.org/docs/latest/search-plugins/search-template/</para></summary>
        /// <param name="id">ID of the search template to render. If no &lt;c&gt;source&lt;/c&gt; is specified, this or the &lt;c&gt;id&lt;/c&gt; request body parameter is required.</param>
        /// <param name="body">The search definition template and its parameters.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("render_search_template", "id, body")]
        public Task<TResponse> RenderSearchTemplateAsync<TResponse>(
            string id,
            PostData body,
            RenderSearchTemplateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"_render/template/{id:id}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_scripts/painless/_execute <para>https://opensearch.org/docs/latest/api-reference/script-apis/exec-script/</para></summary>
        /// <param name="body">The script to execute.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse ExecutePainlessScript<TResponse>(
            PostData body,
            ExecutePainlessScriptRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_scripts/painless/_execute",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_scripts/painless/_execute <para>https://opensearch.org/docs/latest/api-reference/script-apis/exec-script/</para></summary>
        /// <param name="body">The script to execute.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("scripts_painless_execute", "body")]
        public Task<TResponse> ExecutePainlessScriptAsync<TResponse>(
            PostData body,
            ExecutePainlessScriptRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_scripts/painless/_execute",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_search/scroll <para>https://opensearch.org/docs/latest/api-reference/scroll/#path-and-http-methods</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Scroll<TResponse>(
            PostData body,
            ScrollRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_search/scroll", body, RequestParams(requestParameters));

        /// <summary>POST on /_search/scroll <para>https://opensearch.org/docs/latest/api-reference/scroll/#path-and-http-methods</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("scroll", "body")]
        public Task<TResponse> ScrollAsync<TResponse>(
            PostData body,
            ScrollRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_search/scroll",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_search/scroll/{scroll_id} <para>https://opensearch.org/docs/latest/api-reference/scroll/#path-and-http-methods</para></summary>
        /// <param name="scrollId">The scroll ID.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [Obsolete(
            "Deprecated in version 1.0.0: A scroll id can be quite large and should be specified as part of the body."
        )]
        public TResponse Scroll<TResponse>(
            string scrollId,
            PostData body,
            ScrollRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"_search/scroll/{scrollId:scrollId}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_search/scroll/{scroll_id} <para>https://opensearch.org/docs/latest/api-reference/scroll/#path-and-http-methods</para></summary>
        /// <param name="scrollId">The scroll ID.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [Obsolete(
            "Deprecated in version 1.0.0: A scroll id can be quite large and should be specified as part of the body."
        )]
        [MapsApi("scroll", "scroll_id, body")]
        public Task<TResponse> ScrollAsync<TResponse>(
            string scrollId,
            PostData body,
            ScrollRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"_search/scroll/{scrollId:scrollId}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_search <para>https://opensearch.org/docs/latest/api-reference/search/</para></summary>
        /// <param name="body">The search definition using the Query DSL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Search<TResponse>(
            PostData body,
            SearchRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_search", body, RequestParams(requestParameters));

        /// <summary>POST on /_search <para>https://opensearch.org/docs/latest/api-reference/search/</para></summary>
        /// <param name="body">The search definition using the Query DSL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("search", "body")]
        public Task<TResponse> SearchAsync<TResponse>(
            PostData body,
            SearchRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(POST, "_search", ctx, body, RequestParams(requestParameters));

        /// <summary>POST on /{index}/_search <para>https://opensearch.org/docs/latest/api-reference/search/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases to search. Supports wildcards (&lt;c&gt;*&lt;/c&gt;). To search all data streams and indexes, omit this parameter or use &lt;c&gt;*&lt;/c&gt; or &lt;c&gt;_all&lt;/c&gt;.</param>
        /// <param name="body">The search definition using the Query DSL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Search<TResponse>(
            string index,
            PostData body,
            SearchRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_search"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_search <para>https://opensearch.org/docs/latest/api-reference/search/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases to search. Supports wildcards (&lt;c&gt;*&lt;/c&gt;). To search all data streams and indexes, omit this parameter or use &lt;c&gt;*&lt;/c&gt; or &lt;c&gt;_all&lt;/c&gt;.</param>
        /// <param name="body">The search definition using the Query DSL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("search", "index, body")]
        public Task<TResponse> SearchAsync<TResponse>(
            string index,
            PostData body,
            SearchRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_search"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_search_shards <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse SearchShards<TResponse>(
            PostData body,
            SearchShardsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_search_shards", body, RequestParams(requestParameters));

        /// <summary>POST on /_search_shards <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("search_shards", "body")]
        public Task<TResponse> SearchShardsAsync<TResponse>(
            PostData body,
            SearchShardsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_search_shards",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_search_shards <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="index">Returns the indexes and shards that a search request would be executed against.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse SearchShards<TResponse>(
            string index,
            PostData body,
            SearchShardsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_search_shards"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_search_shards <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="index">Returns the indexes and shards that a search request would be executed against.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("search_shards", "index, body")]
        public Task<TResponse> SearchShardsAsync<TResponse>(
            string index,
            PostData body,
            SearchShardsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_search_shards"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_search/template <para>https://opensearch.org/docs/latest/search-plugins/search-template/</para></summary>
        /// <param name="body">The search definition template and its parameters.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse SearchTemplate<TResponse>(
            PostData body,
            SearchTemplateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_search/template", body, RequestParams(requestParameters));

        /// <summary>POST on /_search/template <para>https://opensearch.org/docs/latest/search-plugins/search-template/</para></summary>
        /// <param name="body">The search definition template and its parameters.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("search_template", "body")]
        public Task<TResponse> SearchTemplateAsync<TResponse>(
            PostData body,
            SearchTemplateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_search/template",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_search/template <para>https://opensearch.org/docs/latest/search-plugins/search-template/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases to search. Supports wildcards (*).</param>
        /// <param name="body">The search definition template and its parameters.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse SearchTemplate<TResponse>(
            string index,
            PostData body,
            SearchTemplateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_search/template"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_search/template <para>https://opensearch.org/docs/latest/search-plugins/search-template/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases to search. Supports wildcards (*).</param>
        /// <param name="body">The search definition template and its parameters.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("search_template", "index, body")]
        public Task<TResponse> SearchTemplateAsync<TResponse>(
            string index,
            PostData body,
            SearchTemplateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_search/template"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_termvectors <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="index">The name of the index that contains the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse TermVectors<TResponse>(
            string index,
            PostData body,
            TermVectorsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_termvectors"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_termvectors <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="index">The name of the index that contains the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("termvectors", "index, body")]
        public Task<TResponse> TermVectorsAsync<TResponse>(
            string index,
            PostData body,
            TermVectorsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_termvectors"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_termvectors/{id} <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="index">The name of the index that contains the document.</param>
        /// <param name="id">The unique identifier of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse TermVectors<TResponse>(
            string index,
            string id,
            PostData body,
            TermVectorsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_termvectors/{id:id}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_termvectors/{id} <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="index">The name of the index that contains the document.</param>
        /// <param name="id">The unique identifier of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("termvectors", "index, id, body")]
        public Task<TResponse> TermVectorsAsync<TResponse>(
            string index,
            string id,
            PostData body,
            TermVectorsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_termvectors/{id:id}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_update/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/update-document/</para></summary>
        /// <param name="index">The name of the index.</param>
        /// <param name="id">Document ID.</param>
        /// <param name="body">The request definition requires either &lt;c&gt;script&lt;/c&gt; or partial &lt;c&gt;doc&lt;/c&gt;.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Update<TResponse>(
            string index,
            string id,
            PostData body,
            UpdateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_update/{id:id}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_update/{id} <para>https://opensearch.org/docs/latest/api-reference/document-apis/update-document/</para></summary>
        /// <param name="index">The name of the index.</param>
        /// <param name="id">Document ID.</param>
        /// <param name="body">The request definition requires either &lt;c&gt;script&lt;/c&gt; or partial &lt;c&gt;doc&lt;/c&gt;.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("update", "index, id, body")]
        public Task<TResponse> UpdateAsync<TResponse>(
            string index,
            string id,
            PostData body,
            UpdateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_update/{id:id}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_update_by_query <para>https://opensearch.org/docs/latest/api-reference/document-apis/update-by-query/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases to search. Supports wildcards (&lt;c&gt;*&lt;/c&gt;). To search all data streams or indexes, omit this parameter or use &lt;c&gt;*&lt;/c&gt; or &lt;c&gt;_all&lt;/c&gt;.</param>
        /// <param name="body">The search definition using the Query DSL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse UpdateByQuery<TResponse>(
            string index,
            PostData body,
            UpdateByQueryRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_update_by_query"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_update_by_query <para>https://opensearch.org/docs/latest/api-reference/document-apis/update-by-query/</para></summary>
        /// <param name="index">A comma-separated list of data streams, indexes, and aliases to search. Supports wildcards (&lt;c&gt;*&lt;/c&gt;). To search all data streams or indexes, omit this parameter or use &lt;c&gt;*&lt;/c&gt; or &lt;c&gt;_all&lt;/c&gt;.</param>
        /// <param name="body">The search definition using the Query DSL.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("update_by_query", "index, body")]
        public Task<TResponse> UpdateByQueryAsync<TResponse>(
            string index,
            PostData body,
            UpdateByQueryRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_update_by_query"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_update_by_query/{task_id}/_rethrottle <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="taskId">The ID for the task.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse UpdateByQueryRethrottle<TResponse>(
            string taskId,
            UpdateByQueryRethrottleRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"_update_by_query/{taskId:taskId}/_rethrottle"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_update_by_query/{task_id}/_rethrottle <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="taskId">The ID for the task.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("update_by_query_rethrottle", "task_id")]
        public Task<TResponse> UpdateByQueryRethrottleAsync<TResponse>(
            string taskId,
            UpdateByQueryRethrottleRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"_update_by_query/{taskId:taskId}/_rethrottle"),
                ctx,
                null,
                RequestParams(requestParameters)
            );
    }
}
