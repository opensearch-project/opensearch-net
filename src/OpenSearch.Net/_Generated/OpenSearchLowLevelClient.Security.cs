/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using OpenSearch.Net;
using static OpenSearch.Net.HttpMethod;

// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable once CheckNamespace
// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable RedundantExtendsListEntry
namespace OpenSearch.Net.Specification.SecurityApi
{
    /// <summary>
    /// Security APIs.
    /// <para>Not intended to be instantiated directly. Use the <see cref="IOpenSearchLowLevelClient.Security"/> property
    /// on <see cref="IOpenSearchLowLevelClient"/>.
    /// </para>
    /// </summary>
    public partial class LowLevelSecurityNamespace : NamespacedClientProxy
    {
        internal LowLevelSecurityNamespace(OpenSearchLowLevelClient client)
            : base(client) { }

        /// <summary>POST on /_plugins/_security/authinfo</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Authinfo<TResponse>(AuthinfoRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_plugins/_security/authinfo",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/authinfo</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.authinfo", "")]
        public Task<TResponse> AuthinfoAsync<TResponse>(
            AuthinfoRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_plugins/_security/authinfo",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/api/authtoken</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Authtoken<TResponse>(AuthtokenRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_plugins/_security/api/authtoken",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/api/authtoken</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.authtoken", "")]
        public Task<TResponse> AuthtokenAsync<TResponse>(
            AuthtokenRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_plugins/_security/api/authtoken",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/cache</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Cache<TResponse>(CacheRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                "_plugins/_security/api/cache",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/cache</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.cache", "")]
        public Task<TResponse> CacheAsync<TResponse>(
            CacheRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                "_plugins/_security/api/cache",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/account <para>https://opensearch.org/docs/latest/security/access-control/api/#change-password</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse ChangePassword<TResponse>(
            PostData body,
            ChangePasswordRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                "_plugins/_security/api/account",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/account <para>https://opensearch.org/docs/latest/security/access-control/api/#change-password</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.change_password", "body")]
        public Task<TResponse> ChangePasswordAsync<TResponse>(
            PostData body,
            ChangePasswordRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                "_plugins/_security/api/account",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/_upgrade_check <para>https://opensearch.org/docs/latest/security/access-control/api/#configuration-upgrade-check</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.14.0 or greater.</remarks>
        public TResponse ConfigUpgradeCheck<TResponse>(
            ConfigUpgradeCheckRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/_upgrade_check",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/_upgrade_check <para>https://opensearch.org/docs/latest/security/access-control/api/#configuration-upgrade-check</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.14.0 or greater.</remarks>
        [MapsApi("security.config_upgrade_check", "")]
        public Task<TResponse> ConfigUpgradeCheckAsync<TResponse>(
            ConfigUpgradeCheckRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/_upgrade_check",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/api/_upgrade_perform <para>https://opensearch.org/docs/latest/security/access-control/api/#configuration-upgrade</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.14.0 or greater.</remarks>
        public TResponse ConfigUpgradePerform<TResponse>(
            PostData body,
            ConfigUpgradePerformRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_plugins/_security/api/_upgrade_perform",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/api/_upgrade_perform <para>https://opensearch.org/docs/latest/security/access-control/api/#configuration-upgrade</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.14.0 or greater.</remarks>
        [MapsApi("security.config_upgrade_perform", "body")]
        public Task<TResponse> ConfigUpgradePerformAsync<TResponse>(
            PostData body,
            ConfigUpgradePerformRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_plugins/_security/api/_upgrade_perform",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/actiongroups/{action_group} <para>https://opensearch.org/docs/latest/security/access-control/api/#create-action-group</para></summary>
        /// <param name="actionGroup">The name of the action group to create or replace.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse CreateActionGroup<TResponse>(
            string actionGroup,
            PostData body,
            CreateActionGroupRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"_plugins/_security/api/actiongroups/{actionGroup:actionGroup}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/actiongroups/{action_group} <para>https://opensearch.org/docs/latest/security/access-control/api/#create-action-group</para></summary>
        /// <param name="actionGroup">The name of the action group to create or replace.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.create_action_group", "action_group, body")]
        public Task<TResponse> CreateActionGroupAsync<TResponse>(
            string actionGroup,
            PostData body,
            CreateActionGroupRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"_plugins/_security/api/actiongroups/{actionGroup:actionGroup}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/allowlist <para>https://opensearch.org/docs/latest/security/access-control/api/#access-control-for-the-api</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.1.0 or greater.</remarks>
        public TResponse CreateAllowlist<TResponse>(
            PostData body,
            CreateAllowlistRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                "_plugins/_security/api/allowlist",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/allowlist <para>https://opensearch.org/docs/latest/security/access-control/api/#access-control-for-the-api</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.1.0 or greater.</remarks>
        [MapsApi("security.create_allowlist", "body")]
        public Task<TResponse> CreateAllowlistAsync<TResponse>(
            PostData body,
            CreateAllowlistRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                "_plugins/_security/api/allowlist",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/roles/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#create-role</para></summary>
        /// <param name="role">The name of the role to be created.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse CreateRole<TResponse>(
            string role,
            PostData body,
            CreateRoleRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"_plugins/_security/api/roles/{role:role}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/roles/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#create-role</para></summary>
        /// <param name="role">The name of the role to be created.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.create_role", "role, body")]
        public Task<TResponse> CreateRoleAsync<TResponse>(
            string role,
            PostData body,
            CreateRoleRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"_plugins/_security/api/roles/{role:role}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/rolesmapping/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#create-role-mapping</para></summary>
        /// <param name="role">The name of the role to create a role mapping for.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse CreateRoleMapping<TResponse>(
            string role,
            PostData body,
            CreateRoleMappingRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"_plugins/_security/api/rolesmapping/{role:role}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/rolesmapping/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#create-role-mapping</para></summary>
        /// <param name="role">The name of the role to create a role mapping for.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.create_role_mapping", "role, body")]
        public Task<TResponse> CreateRoleMappingAsync<TResponse>(
            string role,
            PostData body,
            CreateRoleMappingRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"_plugins/_security/api/rolesmapping/{role:role}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/tenants/{tenant} <para>https://opensearch.org/docs/latest/security/access-control/api/#create-tenant</para></summary>
        /// <param name="tenant">The name of the tenant to be created.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse CreateTenant<TResponse>(
            string tenant,
            PostData body,
            CreateTenantRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"_plugins/_security/api/tenants/{tenant:tenant}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/tenants/{tenant} <para>https://opensearch.org/docs/latest/security/access-control/api/#create-tenant</para></summary>
        /// <param name="tenant">The name of the tenant to be created.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.create_tenant", "tenant, body")]
        public Task<TResponse> CreateTenantAsync<TResponse>(
            string tenant,
            PostData body,
            CreateTenantRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"_plugins/_security/api/tenants/{tenant:tenant}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/tenancy/config <para>https://opensearch.org/docs/latest/security/multi-tenancy/dynamic-config/#configuring-multi-tenancy-with-the-rest-api</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        public TResponse CreateUpdateTenancyConfig<TResponse>(
            PostData body,
            CreateUpdateTenancyConfigRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                "_plugins/_security/api/tenancy/config",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/tenancy/config <para>https://opensearch.org/docs/latest/security/multi-tenancy/dynamic-config/#configuring-multi-tenancy-with-the-rest-api</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        [MapsApi("security.create_update_tenancy_config", "body")]
        public Task<TResponse> CreateUpdateTenancyConfigAsync<TResponse>(
            PostData body,
            CreateUpdateTenancyConfigRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                "_plugins/_security/api/tenancy/config",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/internalusers/{username} <para>https://opensearch.org/docs/latest/security/access-control/api/#create-user</para></summary>
        /// <param name="username">The name of the user to be created.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse CreateUser<TResponse>(
            string username,
            PostData body,
            CreateUserRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"_plugins/_security/api/internalusers/{username:username}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/internalusers/{username} <para>https://opensearch.org/docs/latest/security/access-control/api/#create-user</para></summary>
        /// <param name="username">The name of the user to be created.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.create_user", "username, body")]
        public Task<TResponse> CreateUserAsync<TResponse>(
            string username,
            PostData body,
            CreateUserRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"_plugins/_security/api/internalusers/{username:username}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/user/{username}</summary>
        /// <param name="username">The name of the user to be created.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse CreateUserLegacy<TResponse>(
            string username,
            PostData body,
            CreateUserLegacyRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"_plugins/_security/api/user/{username:username}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/user/{username}</summary>
        /// <param name="username">The name of the user to be created.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.create_user_legacy", "username, body")]
        public Task<TResponse> CreateUserLegacyAsync<TResponse>(
            string username,
            PostData body,
            CreateUserLegacyRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"_plugins/_security/api/user/{username:username}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/actiongroups/{action_group} <para>https://opensearch.org/docs/latest/security/access-control/api/#delete-action-group</para></summary>
        /// <param name="actionGroup">The name of the action group to delete.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DeleteActionGroup<TResponse>(
            string actionGroup,
            DeleteActionGroupRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_plugins/_security/api/actiongroups/{actionGroup:actionGroup}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/actiongroups/{action_group} <para>https://opensearch.org/docs/latest/security/access-control/api/#delete-action-group</para></summary>
        /// <param name="actionGroup">The name of the action group to delete.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.delete_action_group", "action_group")]
        public Task<TResponse> DeleteActionGroupAsync<TResponse>(
            string actionGroup,
            DeleteActionGroupRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_plugins/_security/api/actiongroups/{actionGroup:actionGroup}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/nodesdn/{cluster_name} <para>https://opensearch.org/docs/latest/security/access-control/api/#delete-distinguished-names</para></summary>
        /// <param name="clusterName">The cluster-name to delete from list of distinguished names.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DeleteDistinguishedName<TResponse>(
            string clusterName,
            DeleteDistinguishedNameRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_plugins/_security/api/nodesdn/{clusterName:clusterName}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/nodesdn/{cluster_name} <para>https://opensearch.org/docs/latest/security/access-control/api/#delete-distinguished-names</para></summary>
        /// <param name="clusterName">The cluster-name to delete from list of distinguished names.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.delete_distinguished_name", "cluster_name")]
        public Task<TResponse> DeleteDistinguishedNameAsync<TResponse>(
            string clusterName,
            DeleteDistinguishedNameRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_plugins/_security/api/nodesdn/{clusterName:clusterName}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/roles/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#delete-role</para></summary>
        /// <param name="role">The name of the role to delete.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DeleteRole<TResponse>(
            string role,
            DeleteRoleRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_plugins/_security/api/roles/{role:role}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/roles/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#delete-role</para></summary>
        /// <param name="role">The name of the role to delete.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.delete_role", "role")]
        public Task<TResponse> DeleteRoleAsync<TResponse>(
            string role,
            DeleteRoleRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_plugins/_security/api/roles/{role:role}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/rolesmapping/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#delete-role-mapping</para></summary>
        /// <param name="role">The name of the role whose mapping needs to delete.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DeleteRoleMapping<TResponse>(
            string role,
            DeleteRoleMappingRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_plugins/_security/api/rolesmapping/{role:role}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/rolesmapping/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#delete-role-mapping</para></summary>
        /// <param name="role">The name of the role whose mapping needs to delete.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.delete_role_mapping", "role")]
        public Task<TResponse> DeleteRoleMappingAsync<TResponse>(
            string role,
            DeleteRoleMappingRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_plugins/_security/api/rolesmapping/{role:role}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/tenants/{tenant} <para>https://opensearch.org/docs/latest/security/access-control/api/#delete-action-group</para></summary>
        /// <param name="tenant">The name of the tenant to delete.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DeleteTenant<TResponse>(
            string tenant,
            DeleteTenantRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_plugins/_security/api/tenants/{tenant:tenant}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/tenants/{tenant} <para>https://opensearch.org/docs/latest/security/access-control/api/#delete-action-group</para></summary>
        /// <param name="tenant">The name of the tenant to delete.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.delete_tenant", "tenant")]
        public Task<TResponse> DeleteTenantAsync<TResponse>(
            string tenant,
            DeleteTenantRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_plugins/_security/api/tenants/{tenant:tenant}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/internalusers/{username} <para>https://opensearch.org/docs/latest/security/access-control/api/#delete-user</para></summary>
        /// <param name="username">The name of the user to delete.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DeleteUser<TResponse>(
            string username,
            DeleteUserRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_plugins/_security/api/internalusers/{username:username}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/internalusers/{username} <para>https://opensearch.org/docs/latest/security/access-control/api/#delete-user</para></summary>
        /// <param name="username">The name of the user to delete.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.delete_user", "username")]
        public Task<TResponse> DeleteUserAsync<TResponse>(
            string username,
            DeleteUserRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_plugins/_security/api/internalusers/{username:username}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/user/{username}</summary>
        /// <param name="username">The name of the user to delete.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DeleteUserLegacy<TResponse>(
            string username,
            DeleteUserLegacyRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_plugins/_security/api/user/{username:username}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/user/{username}</summary>
        /// <param name="username">The name of the user to delete.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.delete_user_legacy", "username")]
        public Task<TResponse> DeleteUserLegacyAsync<TResponse>(
            string username,
            DeleteUserLegacyRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_plugins/_security/api/user/{username:username}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/cache <para>https://opensearch.org/docs/latest/security/access-control/api/#flush-cache</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse FlushCache<TResponse>(FlushCacheRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                "_plugins/_security/api/cache",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_security/api/cache <para>https://opensearch.org/docs/latest/security/access-control/api/#flush-cache</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.flush_cache", "")]
        public Task<TResponse> FlushCacheAsync<TResponse>(
            FlushCacheRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                "_plugins/_security/api/cache",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/api/generateonbehalfoftoken <para>https://opensearch.org/docs/latest/security/access-control/authentication-tokens/#api-endpoint</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.12.0 or greater.</remarks>
        public TResponse GenerateOboToken<TResponse>(
            PostData body,
            GenerateOboTokenRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_plugins/_security/api/generateonbehalfoftoken",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/api/generateonbehalfoftoken <para>https://opensearch.org/docs/latest/security/access-control/authentication-tokens/#api-endpoint</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.12.0 or greater.</remarks>
        [MapsApi("security.generate_obo_token", "body")]
        public Task<TResponse> GenerateOboTokenAsync<TResponse>(
            PostData body,
            GenerateOboTokenRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_plugins/_security/api/generateonbehalfoftoken",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/api/internalusers/{username}/authtoken</summary>
        /// <param name="username">The name of the user for whom an auth token is to be vended.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        public TResponse GenerateUserToken<TResponse>(
            string username,
            GenerateUserTokenRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"_plugins/_security/api/internalusers/{username:username}/authtoken"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/api/internalusers/{username}/authtoken</summary>
        /// <param name="username">The name of the user for whom an auth token is to be vended.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        [MapsApi("security.generate_user_token", "username")]
        public Task<TResponse> GenerateUserTokenAsync<TResponse>(
            string username,
            GenerateUserTokenRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"_plugins/_security/api/internalusers/{username:username}/authtoken"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/api/user/{username}/authtoken</summary>
        /// <param name="username">The name of the user for whom an auth token is to be vended.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        public TResponse GenerateUserTokenLegacy<TResponse>(
            string username,
            GenerateUserTokenLegacyRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"_plugins/_security/api/user/{username:username}/authtoken"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/api/user/{username}/authtoken</summary>
        /// <param name="username">The name of the user for whom an auth token is to be vended.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        [MapsApi("security.generate_user_token_legacy", "username")]
        public Task<TResponse> GenerateUserTokenLegacyAsync<TResponse>(
            string username,
            GenerateUserTokenLegacyRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"_plugins/_security/api/user/{username:username}/authtoken"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/account <para>https://opensearch.org/docs/latest/security/access-control/api/#get-account-details</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetAccountDetails<TResponse>(
            GetAccountDetailsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/account",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/account <para>https://opensearch.org/docs/latest/security/access-control/api/#get-account-details</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_account_details", "")]
        public Task<TResponse> GetAccountDetailsAsync<TResponse>(
            GetAccountDetailsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/account",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/actiongroups/{action_group} <para>https://opensearch.org/docs/latest/security/access-control/api/#get-action-group</para></summary>
        /// <param name="actionGroup">The name of the action group to retrieve.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetActionGroup<TResponse>(
            string actionGroup,
            GetActionGroupRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/_security/api/actiongroups/{actionGroup:actionGroup}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/actiongroups/{action_group} <para>https://opensearch.org/docs/latest/security/access-control/api/#get-action-group</para></summary>
        /// <param name="actionGroup">The name of the action group to retrieve.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_action_group", "action_group")]
        public Task<TResponse> GetActionGroupAsync<TResponse>(
            string actionGroup,
            GetActionGroupRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/_security/api/actiongroups/{actionGroup:actionGroup}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/actiongroups <para>https://opensearch.org/docs/latest/security/access-control/api/#get-action-groups</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetActionGroups<TResponse>(
            GetActionGroupsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/actiongroups",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/actiongroups <para>https://opensearch.org/docs/latest/security/access-control/api/#get-action-groups</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_action_groups", "")]
        public Task<TResponse> GetActionGroupsAsync<TResponse>(
            GetActionGroupsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/actiongroups",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/certificates</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.15.0 or greater.</remarks>
        public TResponse GetAllCertificates<TResponse>(
            GetAllCertificatesRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/certificates",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/certificates</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.15.0 or greater.</remarks>
        [MapsApi("security.get_all_certificates", "")]
        public Task<TResponse> GetAllCertificatesAsync<TResponse>(
            GetAllCertificatesRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/certificates",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/allowlist <para>https://opensearch.org/docs/latest/security/access-control/api/#access-control-for-the-api</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.1.0 or greater.</remarks>
        public TResponse GetAllowlist<TResponse>(
            GetAllowlistRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/allowlist",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/allowlist <para>https://opensearch.org/docs/latest/security/access-control/api/#access-control-for-the-api</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.1.0 or greater.</remarks>
        [MapsApi("security.get_allowlist", "")]
        public Task<TResponse> GetAllowlistAsync<TResponse>(
            GetAllowlistRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/allowlist",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/audit <para>https://opensearch.org/docs/latest/security/access-control/api/#audit-logs</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetAuditConfiguration<TResponse>(
            GetAuditConfigurationRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/audit",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/audit <para>https://opensearch.org/docs/latest/security/access-control/api/#audit-logs</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_audit_configuration", "")]
        public Task<TResponse> GetAuditConfigurationAsync<TResponse>(
            GetAuditConfigurationRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/audit",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/ssl/certs <para>https://opensearch.org/docs/latest/security/access-control/api/#get-certificates</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public TResponse GetCertificates<TResponse>(
            GetCertificatesRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/ssl/certs",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/ssl/certs <para>https://opensearch.org/docs/latest/security/access-control/api/#get-certificates</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        [MapsApi("security.get_certificates", "")]
        public Task<TResponse> GetCertificatesAsync<TResponse>(
            GetCertificatesRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/ssl/certs",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/securityconfig <para>https://opensearch.org/docs/latest/security/access-control/api/#get-configuration</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.10.0 or greater.</remarks>
        public TResponse GetConfiguration<TResponse>(
            GetConfigurationRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/securityconfig",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/securityconfig <para>https://opensearch.org/docs/latest/security/access-control/api/#get-configuration</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.10.0 or greater.</remarks>
        [MapsApi("security.get_configuration", "")]
        public Task<TResponse> GetConfigurationAsync<TResponse>(
            GetConfigurationRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/securityconfig",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/dashboardsinfo</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetDashboardsInfo<TResponse>(
            GetDashboardsInfoRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/dashboardsinfo",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/dashboardsinfo</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_dashboards_info", "")]
        public Task<TResponse> GetDashboardsInfoAsync<TResponse>(
            GetDashboardsInfoRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/dashboardsinfo",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/nodesdn/{cluster_name} <para>https://opensearch.org/docs/latest/security/access-control/api/#get-distinguished-names</para></summary>
        /// <param name="clusterName">The cluster-name to retrieve nodes DN setting for.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetDistinguishedName<TResponse>(
            string clusterName,
            GetDistinguishedNameRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/_security/api/nodesdn/{clusterName:clusterName}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/nodesdn/{cluster_name} <para>https://opensearch.org/docs/latest/security/access-control/api/#get-distinguished-names</para></summary>
        /// <param name="clusterName">The cluster-name to retrieve nodes DN setting for.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_distinguished_name", "cluster_name")]
        public Task<TResponse> GetDistinguishedNameAsync<TResponse>(
            string clusterName,
            GetDistinguishedNameRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/_security/api/nodesdn/{clusterName:clusterName}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/nodesdn <para>https://opensearch.org/docs/latest/security/access-control/api/#get-distinguished-names</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetDistinguishedNames<TResponse>(
            GetDistinguishedNamesRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/nodesdn",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/nodesdn <para>https://opensearch.org/docs/latest/security/access-control/api/#get-distinguished-names</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_distinguished_names", "")]
        public Task<TResponse> GetDistinguishedNamesAsync<TResponse>(
            GetDistinguishedNamesRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/nodesdn",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/certificates/{node_id}</summary>
        /// <param name="nodeId">The full-id of the node to retrieve certificates.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.15.0 or greater.</remarks>
        public TResponse GetNodeCertificates<TResponse>(
            string nodeId,
            GetNodeCertificatesRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/_security/api/certificates/{nodeId:nodeId}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/certificates/{node_id}</summary>
        /// <param name="nodeId">The full-id of the node to retrieve certificates.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.15.0 or greater.</remarks>
        [MapsApi("security.get_node_certificates", "node_id")]
        public Task<TResponse> GetNodeCertificatesAsync<TResponse>(
            string nodeId,
            GetNodeCertificatesRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/_security/api/certificates/{nodeId:nodeId}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/permissionsinfo</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetPermissionsInfo<TResponse>(
            GetPermissionsInfoRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/permissionsinfo",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/permissionsinfo</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_permissions_info", "")]
        public Task<TResponse> GetPermissionsInfoAsync<TResponse>(
            GetPermissionsInfoRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/permissionsinfo",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/roles/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#get-role</para></summary>
        /// <param name="role"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetRole<TResponse>(
            string role,
            GetRoleRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/_security/api/roles/{role:role}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/roles/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#get-role</para></summary>
        /// <param name="role"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_role", "role")]
        public Task<TResponse> GetRoleAsync<TResponse>(
            string role,
            GetRoleRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/_security/api/roles/{role:role}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/rolesmapping/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#get-role-mapping</para></summary>
        /// <param name="role"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetRoleMapping<TResponse>(
            string role,
            GetRoleMappingRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/_security/api/rolesmapping/{role:role}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/rolesmapping/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#get-role-mapping</para></summary>
        /// <param name="role"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_role_mapping", "role")]
        public Task<TResponse> GetRoleMappingAsync<TResponse>(
            string role,
            GetRoleMappingRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/_security/api/rolesmapping/{role:role}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/rolesmapping <para>https://opensearch.org/docs/latest/security/access-control/api/#get-role-mappings</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetRoleMappings<TResponse>(
            GetRoleMappingsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/rolesmapping",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/rolesmapping <para>https://opensearch.org/docs/latest/security/access-control/api/#get-role-mappings</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_role_mappings", "")]
        public Task<TResponse> GetRoleMappingsAsync<TResponse>(
            GetRoleMappingsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/rolesmapping",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/roles <para>https://opensearch.org/docs/latest/security/access-control/api/#get-roles</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetRoles<TResponse>(GetRolesRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/roles",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/roles <para>https://opensearch.org/docs/latest/security/access-control/api/#get-roles</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_roles", "")]
        public Task<TResponse> GetRolesAsync<TResponse>(
            GetRolesRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/roles",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_opendistro/_security/sslinfo</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetSslinfo<TResponse>(GetSslinfoRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_opendistro/_security/sslinfo",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_opendistro/_security/sslinfo</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_sslinfo", "")]
        public Task<TResponse> GetSslinfoAsync<TResponse>(
            GetSslinfoRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_opendistro/_security/sslinfo",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/tenancy/config <para>https://opensearch.org/docs/latest/security/multi-tenancy/dynamic-config/#configuring-multi-tenancy-with-the-rest-api</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        public TResponse GetTenancyConfig<TResponse>(
            GetTenancyConfigRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/tenancy/config",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/tenancy/config <para>https://opensearch.org/docs/latest/security/multi-tenancy/dynamic-config/#configuring-multi-tenancy-with-the-rest-api</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        [MapsApi("security.get_tenancy_config", "")]
        public Task<TResponse> GetTenancyConfigAsync<TResponse>(
            GetTenancyConfigRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/tenancy/config",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/tenants/{tenant} <para>https://opensearch.org/docs/latest/security/access-control/api/#get-tenant</para></summary>
        /// <param name="tenant">The name of the tenant to retrieve.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetTenant<TResponse>(
            string tenant,
            GetTenantRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/_security/api/tenants/{tenant:tenant}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/tenants/{tenant} <para>https://opensearch.org/docs/latest/security/access-control/api/#get-tenant</para></summary>
        /// <param name="tenant">The name of the tenant to retrieve.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_tenant", "tenant")]
        public Task<TResponse> GetTenantAsync<TResponse>(
            string tenant,
            GetTenantRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/_security/api/tenants/{tenant:tenant}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/tenants <para>https://opensearch.org/docs/latest/security/access-control/api/#get-tenants</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetTenants<TResponse>(GetTenantsRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/tenants",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/tenants <para>https://opensearch.org/docs/latest/security/access-control/api/#get-tenants</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_tenants", "")]
        public Task<TResponse> GetTenantsAsync<TResponse>(
            GetTenantsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/tenants",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/internalusers/{username} <para>https://opensearch.org/docs/latest/security/access-control/api/#get-user</para></summary>
        /// <param name="username">The name of the user to retrieve.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetUser<TResponse>(
            string username,
            GetUserRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/_security/api/internalusers/{username:username}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/internalusers/{username} <para>https://opensearch.org/docs/latest/security/access-control/api/#get-user</para></summary>
        /// <param name="username">The name of the user to retrieve.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_user", "username")]
        public Task<TResponse> GetUserAsync<TResponse>(
            string username,
            GetUserRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/_security/api/internalusers/{username:username}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/user/{username}</summary>
        /// <param name="username">The name of the user to retrieve.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetUserLegacy<TResponse>(
            string username,
            GetUserLegacyRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/_security/api/user/{username:username}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/user/{username}</summary>
        /// <param name="username">The name of the user to retrieve.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_user_legacy", "username")]
        public Task<TResponse> GetUserLegacyAsync<TResponse>(
            string username,
            GetUserLegacyRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/_security/api/user/{username:username}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/internalusers <para>https://opensearch.org/docs/latest/security/access-control/api/#get-users</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetUsers<TResponse>(GetUsersRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/internalusers",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/internalusers <para>https://opensearch.org/docs/latest/security/access-control/api/#get-users</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_users", "")]
        public Task<TResponse> GetUsersAsync<TResponse>(
            GetUsersRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/internalusers",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/user</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetUsersLegacy<TResponse>(
            GetUsersLegacyRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/user",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/user</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.get_users_legacy", "")]
        public Task<TResponse> GetUsersLegacyAsync<TResponse>(
            GetUsersLegacyRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/user",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/health <para>https://opensearch.org/docs/latest/security/access-control/api/#health-check</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Health<TResponse>(HealthRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_plugins/_security/health",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/health <para>https://opensearch.org/docs/latest/security/access-control/api/#health-check</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.health", "")]
        public Task<TResponse> HealthAsync<TResponse>(
            HealthRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_plugins/_security/health",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/api/migrate</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Migrate<TResponse>(MigrateRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_plugins/_security/api/migrate",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/api/migrate</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.migrate", "")]
        public Task<TResponse> MigrateAsync<TResponse>(
            MigrateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_plugins/_security/api/migrate",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/actiongroups/{action_group} <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-action-group</para></summary>
        /// <param name="actionGroup">The name of the action group to update.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PatchActionGroup<TResponse>(
            string actionGroup,
            PostData body,
            PatchActionGroupRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                Url($"_plugins/_security/api/actiongroups/{actionGroup:actionGroup}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/actiongroups/{action_group} <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-action-group</para></summary>
        /// <param name="actionGroup">The name of the action group to update.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.patch_action_group", "action_group, body")]
        public Task<TResponse> PatchActionGroupAsync<TResponse>(
            string actionGroup,
            PostData body,
            PatchActionGroupRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                Url($"_plugins/_security/api/actiongroups/{actionGroup:actionGroup}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/actiongroups <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-action-groups</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PatchActionGroups<TResponse>(
            PostData body,
            PatchActionGroupsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                "_plugins/_security/api/actiongroups",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/actiongroups <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-action-groups</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.patch_action_groups", "body")]
        public Task<TResponse> PatchActionGroupsAsync<TResponse>(
            PostData body,
            PatchActionGroupsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                "_plugins/_security/api/actiongroups",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/allowlist <para>https://opensearch.org/docs/latest/security/access-control/api/#access-control-for-the-api</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.1.0 or greater.</remarks>
        public TResponse PatchAllowlist<TResponse>(
            PostData body,
            PatchAllowlistRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                "_plugins/_security/api/allowlist",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/allowlist <para>https://opensearch.org/docs/latest/security/access-control/api/#access-control-for-the-api</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.1.0 or greater.</remarks>
        [MapsApi("security.patch_allowlist", "body")]
        public Task<TResponse> PatchAllowlistAsync<TResponse>(
            PostData body,
            PatchAllowlistRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                "_plugins/_security/api/allowlist",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/audit <para>https://opensearch.org/docs/latest/security/access-control/api/#audit-logs</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PatchAuditConfiguration<TResponse>(
            PostData body,
            PatchAuditConfigurationRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                "_plugins/_security/api/audit",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/audit <para>https://opensearch.org/docs/latest/security/access-control/api/#audit-logs</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.patch_audit_configuration", "body")]
        public Task<TResponse> PatchAuditConfigurationAsync<TResponse>(
            PostData body,
            PatchAuditConfigurationRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                "_plugins/_security/api/audit",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/securityconfig <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-configuration</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.10.0 or greater.</remarks>
        public TResponse PatchConfiguration<TResponse>(
            PostData body,
            PatchConfigurationRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                "_plugins/_security/api/securityconfig",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/securityconfig <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-configuration</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.10.0 or greater.</remarks>
        [MapsApi("security.patch_configuration", "body")]
        public Task<TResponse> PatchConfigurationAsync<TResponse>(
            PostData body,
            PatchConfigurationRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                "_plugins/_security/api/securityconfig",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/nodesdn/{cluster_name}</summary>
        /// <param name="clusterName">The cluster name to update `nodesDn` value.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PatchDistinguishedName<TResponse>(
            string clusterName,
            PostData body,
            PatchDistinguishedNameRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                Url($"_plugins/_security/api/nodesdn/{clusterName:clusterName}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/nodesdn/{cluster_name}</summary>
        /// <param name="clusterName">The cluster name to update `nodesDn` value.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.patch_distinguished_name", "cluster_name, body")]
        public Task<TResponse> PatchDistinguishedNameAsync<TResponse>(
            string clusterName,
            PostData body,
            PatchDistinguishedNameRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                Url($"_plugins/_security/api/nodesdn/{clusterName:clusterName}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/nodesdn <para>https://opensearch.org/docs/latest/security/access-control/api/#update-all-distinguished-names</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PatchDistinguishedNames<TResponse>(
            PostData body,
            PatchDistinguishedNamesRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                "_plugins/_security/api/nodesdn",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/nodesdn <para>https://opensearch.org/docs/latest/security/access-control/api/#update-all-distinguished-names</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.patch_distinguished_names", "body")]
        public Task<TResponse> PatchDistinguishedNamesAsync<TResponse>(
            PostData body,
            PatchDistinguishedNamesRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                "_plugins/_security/api/nodesdn",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/roles/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-role</para></summary>
        /// <param name="role">The name of the role to update.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PatchRole<TResponse>(
            string role,
            PostData body,
            PatchRoleRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                Url($"_plugins/_security/api/roles/{role:role}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/roles/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-role</para></summary>
        /// <param name="role">The name of the role to update.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.patch_role", "role, body")]
        public Task<TResponse> PatchRoleAsync<TResponse>(
            string role,
            PostData body,
            PatchRoleRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                Url($"_plugins/_security/api/roles/{role:role}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/rolesmapping/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-role-mapping</para></summary>
        /// <param name="role">The name of the role to update role-mapping for.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PatchRoleMapping<TResponse>(
            string role,
            PostData body,
            PatchRoleMappingRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                Url($"_plugins/_security/api/rolesmapping/{role:role}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/rolesmapping/{role} <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-role-mapping</para></summary>
        /// <param name="role">The name of the role to update role-mapping for.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.patch_role_mapping", "role, body")]
        public Task<TResponse> PatchRoleMappingAsync<TResponse>(
            string role,
            PostData body,
            PatchRoleMappingRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                Url($"_plugins/_security/api/rolesmapping/{role:role}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/rolesmapping <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-role-mappings</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PatchRoleMappings<TResponse>(
            PostData body,
            PatchRoleMappingsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                "_plugins/_security/api/rolesmapping",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/rolesmapping <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-role-mappings</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.patch_role_mappings", "body")]
        public Task<TResponse> PatchRoleMappingsAsync<TResponse>(
            PostData body,
            PatchRoleMappingsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                "_plugins/_security/api/rolesmapping",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/roles <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-roles</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PatchRoles<TResponse>(
            PostData body,
            PatchRolesRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                "_plugins/_security/api/roles",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/roles <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-roles</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.patch_roles", "body")]
        public Task<TResponse> PatchRolesAsync<TResponse>(
            PostData body,
            PatchRolesRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                "_plugins/_security/api/roles",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/tenants/{tenant} <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-tenant</para></summary>
        /// <param name="tenant">The name of the tenant to update.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PatchTenant<TResponse>(
            string tenant,
            PostData body,
            PatchTenantRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                Url($"_plugins/_security/api/tenants/{tenant:tenant}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/tenants/{tenant} <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-tenant</para></summary>
        /// <param name="tenant">The name of the tenant to update.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.patch_tenant", "tenant, body")]
        public Task<TResponse> PatchTenantAsync<TResponse>(
            string tenant,
            PostData body,
            PatchTenantRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                Url($"_plugins/_security/api/tenants/{tenant:tenant}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/tenants <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-tenants</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PatchTenants<TResponse>(
            PostData body,
            PatchTenantsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                "_plugins/_security/api/tenants",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/tenants <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-tenants</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.patch_tenants", "body")]
        public Task<TResponse> PatchTenantsAsync<TResponse>(
            PostData body,
            PatchTenantsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                "_plugins/_security/api/tenants",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/internalusers/{username} <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-user</para></summary>
        /// <param name="username">The name of the user to update.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PatchUser<TResponse>(
            string username,
            PostData body,
            PatchUserRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                Url($"_plugins/_security/api/internalusers/{username:username}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/internalusers/{username} <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-user</para></summary>
        /// <param name="username">The name of the user to update.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.patch_user", "username, body")]
        public Task<TResponse> PatchUserAsync<TResponse>(
            string username,
            PostData body,
            PatchUserRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                Url($"_plugins/_security/api/internalusers/{username:username}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/internalusers <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-users</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PatchUsers<TResponse>(
            PostData body,
            PatchUsersRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PATCH,
                "_plugins/_security/api/internalusers",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PATCH on /_plugins/_security/api/internalusers <para>https://opensearch.org/docs/latest/security/access-control/api/#patch-users</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.patch_users", "body")]
        public Task<TResponse> PatchUsersAsync<TResponse>(
            PostData body,
            PatchUsersRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PATCH,
                "_plugins/_security/api/internalusers",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/dashboardsinfo</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PostDashboardsInfo<TResponse>(
            PostDashboardsInfoRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_plugins/_security/dashboardsinfo",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/dashboardsinfo</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.post_dashboards_info", "")]
        public Task<TResponse> PostDashboardsInfoAsync<TResponse>(
            PostDashboardsInfoRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_plugins/_security/dashboardsinfo",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/ssl/http/reloadcerts <para>https://opensearch.org/docs/latest/security/access-control/api/#reload-http-certificates</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.8.0 or greater.</remarks>
        public TResponse ReloadHttpCertificates<TResponse>(
            ReloadHttpCertificatesRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                "_plugins/_security/api/ssl/http/reloadcerts",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/ssl/http/reloadcerts <para>https://opensearch.org/docs/latest/security/access-control/api/#reload-http-certificates</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.8.0 or greater.</remarks>
        [MapsApi("security.reload_http_certificates", "")]
        public Task<TResponse> ReloadHttpCertificatesAsync<TResponse>(
            ReloadHttpCertificatesRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                "_plugins/_security/api/ssl/http/reloadcerts",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/ssl/transport/reloadcerts <para>https://opensearch.org/docs/latest/security/access-control/api/#reload-transport-certificates</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.8.0 or greater.</remarks>
        public TResponse ReloadTransportCertificates<TResponse>(
            ReloadTransportCertificatesRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                "_plugins/_security/api/ssl/transport/reloadcerts",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/ssl/transport/reloadcerts <para>https://opensearch.org/docs/latest/security/access-control/api/#reload-transport-certificates</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.8.0 or greater.</remarks>
        [MapsApi("security.reload_transport_certificates", "")]
        public Task<TResponse> ReloadTransportCertificatesAsync<TResponse>(
            ReloadTransportCertificatesRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                "_plugins/_security/api/ssl/transport/reloadcerts",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/tenantinfo</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse TenantInfo<TResponse>(TenantInfoRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_plugins/_security/tenantinfo",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/tenantinfo</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.tenant_info", "")]
        public Task<TResponse> TenantInfoAsync<TResponse>(
            TenantInfoRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_plugins/_security/tenantinfo",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/audit/config <para>https://opensearch.org/docs/latest/security/access-control/api/#audit-logs</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse UpdateAuditConfiguration<TResponse>(
            PostData body,
            UpdateAuditConfigurationRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                "_plugins/_security/api/audit/config",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/audit/config <para>https://opensearch.org/docs/latest/security/access-control/api/#audit-logs</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.update_audit_configuration", "body")]
        public Task<TResponse> UpdateAuditConfigurationAsync<TResponse>(
            PostData body,
            UpdateAuditConfigurationRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                "_plugins/_security/api/audit/config",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/securityconfig/config <para>https://opensearch.org/docs/latest/security/access-control/api/#update-configuration</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.10.0 or greater.</remarks>
        public TResponse UpdateConfiguration<TResponse>(
            PostData body,
            UpdateConfigurationRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                "_plugins/_security/api/securityconfig/config",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/securityconfig/config <para>https://opensearch.org/docs/latest/security/access-control/api/#update-configuration</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.10.0 or greater.</remarks>
        [MapsApi("security.update_configuration", "body")]
        public Task<TResponse> UpdateConfigurationAsync<TResponse>(
            PostData body,
            UpdateConfigurationRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                "_plugins/_security/api/securityconfig/config",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/nodesdn/{cluster_name} <para>https://opensearch.org/docs/latest/security/access-control/api/#update-distinguished-names</para></summary>
        /// <param name="clusterName">The cluster-name to create/update `nodesDn` value for.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse UpdateDistinguishedName<TResponse>(
            string clusterName,
            PostData body,
            UpdateDistinguishedNameRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"_plugins/_security/api/nodesdn/{clusterName:clusterName}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_security/api/nodesdn/{cluster_name} <para>https://opensearch.org/docs/latest/security/access-control/api/#update-distinguished-names</para></summary>
        /// <param name="clusterName">The cluster-name to create/update `nodesDn` value for.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.update_distinguished_name", "cluster_name, body")]
        public Task<TResponse> UpdateDistinguishedNameAsync<TResponse>(
            string clusterName,
            PostData body,
            UpdateDistinguishedNameRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"_plugins/_security/api/nodesdn/{clusterName:clusterName}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/validate</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Validate<TResponse>(ValidateRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/api/validate",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/api/validate</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("security.validate", "")]
        public Task<TResponse> ValidateAsync<TResponse>(
            ValidateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/api/validate",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/whoami</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public TResponse WhoAmI<TResponse>(WhoAmIRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_plugins/_security/whoami",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_security/whoami</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        [MapsApi("security.who_am_i", "")]
        public Task<TResponse> WhoAmIAsync<TResponse>(
            WhoAmIRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_plugins/_security/whoami",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/whoamiprotected</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.11.0 or greater.</remarks>
        public TResponse WhoAmIProtected<TResponse>(
            WhoAmIProtectedRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_security/whoamiprotected",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_security/whoamiprotected</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.11.0 or greater.</remarks>
        [MapsApi("security.who_am_i_protected", "")]
        public Task<TResponse> WhoAmIProtectedAsync<TResponse>(
            WhoAmIProtectedRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_security/whoamiprotected",
                ctx,
                null,
                RequestParams(requestParameters)
            );
    }
}
