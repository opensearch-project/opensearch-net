/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using OpenSearch.Net;
using static OpenSearch.Net.HttpMethod;

// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable once CheckNamespace
// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable RedundantExtendsListEntry
namespace OpenSearch.Net.Specification.ClusterApi
{
    ///<summary>
    /// Cluster APIs.
    /// <para>Not intended to be instantiated directly. Use the <see cref="IOpenSearchLowLevelClient.Cluster"/> property
    /// on <see cref="IOpenSearchLowLevelClient"/>.
    ///</para>
    ///</summary>
    public partial class LowLevelClusterNamespace : NamespacedClientProxy
    {
        internal LowLevelClusterNamespace(OpenSearchLowLevelClient client)
            : base(client) { }

        ///<summary>POST on /_cluster/allocation/explain <para>https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-allocation/</para></summary>
        ///<param name="body">The index, shard, and primary flag to explain. Empty means &#x27;explain the first unassigned shard&#x27;</param>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse AllocationExplain<TResponse>(
            PostData body,
            ClusterAllocationExplainRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_cluster/allocation/explain",
                body,
                RequestParams(requestParameters)
            );

        ///<summary>POST on /_cluster/allocation/explain <para>https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-allocation/</para></summary>
        ///<param name="body">The index, shard, and primary flag to explain. Empty means &#x27;explain the first unassigned shard&#x27;</param>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("cluster.allocation_explain", "body")]
        public Task<TResponse> AllocationExplainAsync<TResponse>(
            PostData body,
            ClusterAllocationExplainRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_cluster/allocation/explain",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        ///<summary>DELETE on /_component_template/{name} <para>https://opensearch.org/docs/latest</para></summary>
        ///<param name="name">The name of the template.</param>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DeleteComponentTemplate<TResponse>(
            string name,
            DeleteComponentTemplateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_component_template/{name:name}"),
                null,
                RequestParams(requestParameters)
            );

        ///<summary>DELETE on /_component_template/{name} <para>https://opensearch.org/docs/latest</para></summary>
        ///<param name="name">The name of the template.</param>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("cluster.delete_component_template", "name")]
        public Task<TResponse> DeleteComponentTemplateAsync<TResponse>(
            string name,
            DeleteComponentTemplateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_component_template/{name:name}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        ///<summary>DELETE on /_cluster/voting_config_exclusions <para>https://opensearch.org/docs/latest</para></summary>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DeleteVotingConfigExclusions<TResponse>(
            DeleteVotingConfigExclusionsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                "_cluster/voting_config_exclusions",
                null,
                RequestParams(requestParameters)
            );

        ///<summary>DELETE on /_cluster/voting_config_exclusions <para>https://opensearch.org/docs/latest</para></summary>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("cluster.delete_voting_config_exclusions", "")]
        public Task<TResponse> DeleteVotingConfigExclusionsAsync<TResponse>(
            DeleteVotingConfigExclusionsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                "_cluster/voting_config_exclusions",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        ///<summary>HEAD on /_component_template/{name} <para>https://opensearch.org/docs/latest</para></summary>
        ///<param name="name">The name of the template.</param>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse ExistsComponentTemplate<TResponse>(
            string name,
            ExistsComponentTemplateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                HEAD,
                Url($"_component_template/{name:name}"),
                null,
                RequestParams(requestParameters)
            );

        ///<summary>HEAD on /_component_template/{name} <para>https://opensearch.org/docs/latest</para></summary>
        ///<param name="name">The name of the template.</param>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("cluster.exists_component_template", "name")]
        public Task<TResponse> ExistsComponentTemplateAsync<TResponse>(
            string name,
            ExistsComponentTemplateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                HEAD,
                Url($"_component_template/{name:name}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        ///<summary>GET on /_component_template <para>https://opensearch.org/docs/latest</para></summary>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetComponentTemplate<TResponse>(
            GetComponentTemplateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_component_template",
                null,
                RequestParams(requestParameters)
            );

        ///<summary>GET on /_component_template <para>https://opensearch.org/docs/latest</para></summary>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("cluster.get_component_template", "")]
        public Task<TResponse> GetComponentTemplateAsync<TResponse>(
            GetComponentTemplateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_component_template",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        ///<summary>GET on /_component_template/{name} <para>https://opensearch.org/docs/latest</para></summary>
        ///<param name="name">The Comma-separated names of the component templates.</param>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetComponentTemplate<TResponse>(
            string name,
            GetComponentTemplateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_component_template/{name:name}"),
                null,
                RequestParams(requestParameters)
            );

        ///<summary>GET on /_component_template/{name} <para>https://opensearch.org/docs/latest</para></summary>
        ///<param name="name">The Comma-separated names of the component templates.</param>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("cluster.get_component_template", "name")]
        public Task<TResponse> GetComponentTemplateAsync<TResponse>(
            string name,
            GetComponentTemplateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_component_template/{name:name}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        ///<summary>GET on /_cluster/settings <para>https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-settings/</para></summary>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetSettings<TResponse>(
            ClusterGetSettingsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(GET, "_cluster/settings", null, RequestParams(requestParameters));

        ///<summary>GET on /_cluster/settings <para>https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-settings/</para></summary>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("cluster.get_settings", "")]
        public Task<TResponse> GetSettingsAsync<TResponse>(
            ClusterGetSettingsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_cluster/settings",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        ///<summary>GET on /_cluster/health <para>https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-health/</para></summary>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Health<TResponse>(ClusterHealthRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(GET, "_cluster/health", null, RequestParams(requestParameters));

        ///<summary>GET on /_cluster/health <para>https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-health/</para></summary>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("cluster.health", "")]
        public Task<TResponse> HealthAsync<TResponse>(
            ClusterHealthRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_cluster/health",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        ///<summary>GET on /_cluster/health/{index} <para>https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-health/</para></summary>
        ///<param name="index">Limit the information returned to specific indicies.</param>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Health<TResponse>(
            string index,
            ClusterHealthRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_cluster/health/{index:index}"),
                null,
                RequestParams(requestParameters)
            );

        ///<summary>GET on /_cluster/health/{index} <para>https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-health/</para></summary>
        ///<param name="index">Limit the information returned to specific indicies.</param>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("cluster.health", "index")]
        public Task<TResponse> HealthAsync<TResponse>(
            string index,
            ClusterHealthRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_cluster/health/{index:index}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        ///<summary>GET on /_cluster/pending_tasks <para>https://opensearch.org/docs/latest</para></summary>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PendingTasks<TResponse>(
            ClusterPendingTasksRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_cluster/pending_tasks",
                null,
                RequestParams(requestParameters)
            );

        ///<summary>GET on /_cluster/pending_tasks <para>https://opensearch.org/docs/latest</para></summary>
        ///<param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("cluster.pending_tasks", "")]
        public Task<TResponse> PendingTasksAsync<TResponse>(
            ClusterPendingTasksRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_cluster/pending_tasks",
                ctx,
                null,
                RequestParams(requestParameters)
            );
    }
}
