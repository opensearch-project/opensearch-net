/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using OpenSearch.Net;
using static OpenSearch.Net.HttpMethod;

// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable once CheckNamespace
// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable RedundantExtendsListEntry
namespace OpenSearch.Net.Specification.SearchRelevanceApi
{
    /// <summary>
    /// Search Relevance APIs.
    /// <para>Not intended to be instantiated directly. Use the <see cref="IOpenSearchLowLevelClient.SearchRelevance"/> property
    /// on <see cref="IOpenSearchLowLevelClient"/>.
    /// </para>
    /// </summary>
    public partial class LowLevelSearchRelevanceNamespace : NamespacedClientProxy
    {
        internal LowLevelSearchRelevanceNamespace(OpenSearchLowLevelClient client)
            : base(client) { }

        /// <summary>DELETE on /_plugins/search_relevance/experiments/{experiment_id}</summary>
        /// <param name="experimentId">The experiment id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse DeleteExperiments<TResponse>(
            string experimentId,
            DeleteExperimentsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_plugins/search_relevance/experiments/{experimentId:experimentId}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/search_relevance/experiments/{experiment_id}</summary>
        /// <param name="experimentId">The experiment id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.delete_experiments", "experiment_id")]
        public Task<TResponse> DeleteExperimentsAsync<TResponse>(
            string experimentId,
            DeleteExperimentsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_plugins/search_relevance/experiments/{experimentId:experimentId}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/search_relevance/judgments/{judgment_id}</summary>
        /// <param name="judgmentId">The judgment id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse DeleteJudgments<TResponse>(
            string judgmentId,
            DeleteJudgmentsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_plugins/search_relevance/judgments/{judgmentId:judgmentId}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/search_relevance/judgments/{judgment_id}</summary>
        /// <param name="judgmentId">The judgment id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.delete_judgments", "judgment_id")]
        public Task<TResponse> DeleteJudgmentsAsync<TResponse>(
            string judgmentId,
            DeleteJudgmentsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_plugins/search_relevance/judgments/{judgmentId:judgmentId}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/search_relevance/query_sets/{query_set_id}</summary>
        /// <param name="querySetId">The query set id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse DeleteQuerySets<TResponse>(
            string querySetId,
            DeleteQuerySetsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_plugins/search_relevance/query_sets/{querySetId:querySetId}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/search_relevance/query_sets/{query_set_id}</summary>
        /// <param name="querySetId">The query set id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.delete_query_sets", "query_set_id")]
        public Task<TResponse> DeleteQuerySetsAsync<TResponse>(
            string querySetId,
            DeleteQuerySetsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_plugins/search_relevance/query_sets/{querySetId:querySetId}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/search_relevance/search_configurations/{search_configuration_id}</summary>
        /// <param name="searchConfigurationId">The search configuration id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse DeleteSearchConfigurations<TResponse>(
            string searchConfigurationId,
            DeleteSearchConfigurationsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url(
                    $"_plugins/search_relevance/search_configurations/{searchConfigurationId:searchConfigurationId}"
                ),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/search_relevance/search_configurations/{search_configuration_id}</summary>
        /// <param name="searchConfigurationId">The search configuration id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.delete_search_configurations", "search_configuration_id")]
        public Task<TResponse> DeleteSearchConfigurationsAsync<TResponse>(
            string searchConfigurationId,
            DeleteSearchConfigurationsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url(
                    $"_plugins/search_relevance/search_configurations/{searchConfigurationId:searchConfigurationId}"
                ),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/experiments</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse GetExperiments<TResponse>(
            GetExperimentsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/search_relevance/experiments",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/experiments</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.get_experiments", "")]
        public Task<TResponse> GetExperimentsAsync<TResponse>(
            GetExperimentsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/search_relevance/experiments",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/experiments/{experiment_id}</summary>
        /// <param name="experimentId">The experiment id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse GetExperiments<TResponse>(
            string experimentId,
            GetExperimentsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/search_relevance/experiments/{experimentId:experimentId}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/experiments/{experiment_id}</summary>
        /// <param name="experimentId">The experiment id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.get_experiments", "experiment_id")]
        public Task<TResponse> GetExperimentsAsync<TResponse>(
            string experimentId,
            GetExperimentsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/search_relevance/experiments/{experimentId:experimentId}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/judgments</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse GetJudgments<TResponse>(
            GetJudgmentsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/search_relevance/judgments",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/judgments</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.get_judgments", "")]
        public Task<TResponse> GetJudgmentsAsync<TResponse>(
            GetJudgmentsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/search_relevance/judgments",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/judgments/{judgment_id}</summary>
        /// <param name="judgmentId">The judgment id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse GetJudgments<TResponse>(
            string judgmentId,
            GetJudgmentsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/search_relevance/judgments/{judgmentId:judgmentId}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/judgments/{judgment_id}</summary>
        /// <param name="judgmentId">The judgment id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.get_judgments", "judgment_id")]
        public Task<TResponse> GetJudgmentsAsync<TResponse>(
            string judgmentId,
            GetJudgmentsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/search_relevance/judgments/{judgmentId:judgmentId}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/query_sets</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse GetQuerySets<TResponse>(
            GetQuerySetsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/search_relevance/query_sets",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/query_sets</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.get_query_sets", "")]
        public Task<TResponse> GetQuerySetsAsync<TResponse>(
            GetQuerySetsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/search_relevance/query_sets",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/query_sets/{query_set_id}</summary>
        /// <param name="querySetId">The query set id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse GetQuerySets<TResponse>(
            string querySetId,
            GetQuerySetsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/search_relevance/query_sets/{querySetId:querySetId}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/query_sets/{query_set_id}</summary>
        /// <param name="querySetId">The query set id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.get_query_sets", "query_set_id")]
        public Task<TResponse> GetQuerySetsAsync<TResponse>(
            string querySetId,
            GetQuerySetsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/search_relevance/query_sets/{querySetId:querySetId}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/search_configurations</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse GetSearchConfigurations<TResponse>(
            GetSearchConfigurationsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/search_relevance/search_configurations",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/search_configurations</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.get_search_configurations", "")]
        public Task<TResponse> GetSearchConfigurationsAsync<TResponse>(
            GetSearchConfigurationsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/search_relevance/search_configurations",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/search_configurations/{search_configuration_id}</summary>
        /// <param name="searchConfigurationId">The search configuration id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse GetSearchConfigurations<TResponse>(
            string searchConfigurationId,
            GetSearchConfigurationsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url(
                    $"_plugins/search_relevance/search_configurations/{searchConfigurationId:searchConfigurationId}"
                ),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/search_relevance/search_configurations/{search_configuration_id}</summary>
        /// <param name="searchConfigurationId">The search configuration id.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.get_search_configurations", "search_configuration_id")]
        public Task<TResponse> GetSearchConfigurationsAsync<TResponse>(
            string searchConfigurationId,
            GetSearchConfigurationsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url(
                    $"_plugins/search_relevance/search_configurations/{searchConfigurationId:searchConfigurationId}"
                ),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/search_relevance/query_sets</summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse PostQuerySets<TResponse>(
            PostData body,
            PostQuerySetsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_plugins/search_relevance/query_sets",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/search_relevance/query_sets</summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.post_query_sets", "body")]
        public Task<TResponse> PostQuerySetsAsync<TResponse>(
            PostData body,
            PostQuerySetsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_plugins/search_relevance/query_sets",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/search_relevance/experiments</summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse PutExperiments<TResponse>(
            PostData body,
            PutExperimentsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                "_plugins/search_relevance/experiments",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/search_relevance/experiments</summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.put_experiments", "body")]
        public Task<TResponse> PutExperimentsAsync<TResponse>(
            PostData body,
            PutExperimentsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                "_plugins/search_relevance/experiments",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/search_relevance/judgments</summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse PutJudgments<TResponse>(
            PostData body,
            PutJudgmentsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                "_plugins/search_relevance/judgments",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/search_relevance/judgments</summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.put_judgments", "body")]
        public Task<TResponse> PutJudgmentsAsync<TResponse>(
            PostData body,
            PutJudgmentsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                "_plugins/search_relevance/judgments",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/search_relevance/query_sets</summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse PutQuerySets<TResponse>(
            PostData body,
            PutQuerySetsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                "_plugins/search_relevance/query_sets",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/search_relevance/query_sets</summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.put_query_sets", "body")]
        public Task<TResponse> PutQuerySetsAsync<TResponse>(
            PostData body,
            PutQuerySetsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                "_plugins/search_relevance/query_sets",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/search_relevance/search_configurations</summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse PutSearchConfigurations<TResponse>(
            PostData body,
            PutSearchConfigurationsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                "_plugins/search_relevance/search_configurations",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/search_relevance/search_configurations</summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("search_relevance.put_search_configurations", "body")]
        public Task<TResponse> PutSearchConfigurationsAsync<TResponse>(
            PostData body,
            PutSearchConfigurationsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                "_plugins/search_relevance/search_configurations",
                ctx,
                body,
                RequestParams(requestParameters)
            );
    }
}
