/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------

// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

// ReSharper disable once CheckNamespace
namespace OpenSearch.Net.Specification.SecurityAnalyticsApi
{
    /// <summary>Request options for GetAlerts <para>https://docs.opensearch.org/docs/latest/security-analytics/api-tools/alert-finding-api/#get-alerts</para></summary>
    public partial class GetAlertsRequestParameters : RequestParameters<GetAlertsRequestParameters>
    {
        public override HttpMethod DefaultHttpMethod => HttpMethod.GET;
        public override bool SupportsBody => false;

        /// <summary>Used to filter by alert state. Optional.</summary>
        public SecurityAnalyticsAlertsAlertState? AlertState
        {
            get => Q<SecurityAnalyticsAlertsAlertState?>("alertState");
            set => Q("alertState", value);
        }

        /// <summary>The ID of the detector used to fetch alerts. Optional when <c>detectorType</c> is specified. Otherwise required.</summary>
        public string DetectorId
        {
            get => Q<string>("detector_id");
            set => Q("detector_id", value);
        }

        /// <summary>The type of detector used to fetch alerts. Optional when <c>detector_id</c> is specified. Otherwise required.</summary>
        public string DetectorType
        {
            get => Q<string>("detectorType");
            set => Q("detectorType", value);
        }

        /// <summary>The end timestamp (in ms) of the time window in which you want to retrieve alerts. Optional.</summary>
        public long? EndTime
        {
            get => Q<long?>("endTime");
            set => Q("endTime", value);
        }

        /// <summary>Used to sort by whether the field <c>missing</c> exists or not in the documents associated with the alert. Optional.</summary>
        public string Missing
        {
            get => Q<string>("missing");
            set => Q("missing", value);
        }

        /// <summary>The alert attribute you want returned in the search. Optional.</summary>
        public string SearchString
        {
            get => Q<string>("searchString");
            set => Q("searchString", value);
        }

        /// <summary>Used to filter by alert severity level. Optional.</summary>
        public SecurityAnalyticsAlertsAlertSeverityLevel? SeverityLevel
        {
            get => Q<SecurityAnalyticsAlertsAlertSeverityLevel?>("severityLevel");
            set => Q("severityLevel", value);
        }

        /// <summary>The maximum number of results returned in the response. Optional.</summary>
        public long? Size
        {
            get => Q<long?>("size");
            set => Q("size", value);
        }

        /// <summary>The order used to sort the list of findings. Possible values are <c>asc</c> or <c>desc</c>. Optional.</summary>
        public SortOrder? SortOrder
        {
            get => Q<SortOrder?>("sortOrder");
            set => Q("sortOrder", value);
        }

        /// <summary>The string used by Security Analytics to sort the alerts. Optional.</summary>
        public string SortString
        {
            get => Q<string>("sortString");
            set => Q("sortString", value);
        }

        /// <summary>The pagination index. Optional.</summary>
        public long? StartIndex
        {
            get => Q<long?>("startIndex");
            set => Q("startIndex", value);
        }

        /// <summary>The beginning timestamp (in ms) of the time window in which you want to retrieve alerts. Optional.</summary>
        public long? StartTime
        {
            get => Q<long?>("startTime");
            set => Q("startTime", value);
        }
    }

    /// <summary>Request options for GetFindings <para>https://docs.opensearch.org/docs/latest/security-analytics/api-tools/alert-finding-api/#get-findings</para></summary>
    public partial class GetFindingsRequestParameters
        : RequestParameters<GetFindingsRequestParameters>
    {
        public override HttpMethod DefaultHttpMethod => HttpMethod.GET;
        public override bool SupportsBody => false;

        /// <summary>
        /// The detection type that dictates the retrieval type for the findings. When the detection type is <c>threat</c>, it fetches threat
        /// intelligence feeds. When the detection type is <c>rule</c>, findings are fetched based on the detector’s rule. Optional.
        /// </summary>
        public SecurityAnalyticsFindingsDetectionType? DetectionType
        {
            get => Q<SecurityAnalyticsFindingsDetectionType?>("detectionType");
            set => Q("detectionType", value);
        }

        /// <summary>The ID of the detector used to fetch alerts. Optional when the <c>detectorType</c> is specified. Otherwise required.</summary>
        public string DetectorId
        {
            get => Q<string>("detector_id");
            set => Q("detector_id", value);
        }

        /// <summary>The type of detector used to fetch alerts. Optional when the <c>detector_id</c> is specified. Otherwise required.</summary>
        public string DetectorType
        {
            get => Q<string>("detectorType");
            set => Q("detectorType", value);
        }

        /// <summary>The end timestamp (in ms) of the time window in which you want to retrieve findings. Optional.</summary>
        public string EndTime
        {
            get => Q<string>("endTime");
            set => Q("endTime", value);
        }

        /// <summary>The comma-separated id list of findings for which you want retrieve details. Optional.</summary>
        public string FindingIds
        {
            get => Q<string>("findingIds");
            set => Q("findingIds", value);
        }

        /// <summary>Used to sort by whether the field <c>missing</c> exists or not in the documents associated with the finding. Optional.</summary>
        public string Missing
        {
            get => Q<string>("missing");
            set => Q("missing", value);
        }

        /// <summary>
        /// The finding attribute you want returned in the search. To search in a specific index, specify the index name in the request path. For
        /// example, to search findings in the indexABC index, use `searchString=indexABC’. Optional.
        /// </summary>
        public string SearchString
        {
            get => Q<string>("searchString");
            set => Q("searchString", value);
        }

        /// <summary>The rule severity for which retrieve findings. Severity can be <c>critical</c>, <c>high</c>, <c>medium</c>, or <c>low</c>. Optional.</summary>
        public SecurityAnalyticsFindingsRuleSeverity? Severity
        {
            get => Q<SecurityAnalyticsFindingsRuleSeverity?>("severity");
            set => Q("severity", value);
        }

        /// <summary>The maximum number of results returned in the response. Optional.</summary>
        public long? Size
        {
            get => Q<long?>("size");
            set => Q("size", value);
        }

        /// <summary>The order used to sort the list of findings. Possible values are <c>asc</c> or <c>desc</c>. Optional.</summary>
        public SortOrder? SortOrder
        {
            get => Q<SortOrder?>("sortOrder");
            set => Q("sortOrder", value);
        }

        /// <summary>The string used by the Alerting plugin to sort the findings. Optional.</summary>
        public string SortString
        {
            get => Q<string>("sortString");
            set => Q("sortString", value);
        }

        /// <summary>The pagination index. Optional.</summary>
        public long? StartIndex
        {
            get => Q<long?>("startIndex");
            set => Q("startIndex", value);
        }

        /// <summary>The beginning timestamp (in ms) of the time window in which you want to retrieve findings. Optional.</summary>
        public long? StartTime
        {
            get => Q<long?>("startTime");
            set => Q("startTime", value);
        }
    }

    /// <summary>Request options for SearchFindingCorrelations <para>https://docs.opensearch.org/docs/latest/security-analytics/api-tools/correlation-eng/#list-correlations-for-a-finding-belonging-to-a-log-type</para></summary>
    public partial class SearchFindingCorrelationsRequestParameters
        : RequestParameters<SearchFindingCorrelationsRequestParameters>
    {
        public override HttpMethod DefaultHttpMethod => HttpMethod.GET;
        public override bool SupportsBody => false;

        /// <summary>The log type of findings you want to correlate with the specified finding. Required.</summary>
        public string DetectorType
        {
            get => Q<string>("detector_type");
            set => Q("detector_type", value);
        }

        /// <summary>The finding ID for which you want to find other findings that are correlated. Required.</summary>
        public string Finding
        {
            get => Q<string>("finding");
            set => Q("finding", value);
        }

        /// <summary>The number of nearby findings you want to return. Optional.</summary>
        public long? NearbyFindings
        {
            get => Q<long?>("nearby_findings");
            set => Q("nearby_findings", value);
        }

        /// <summary>The time window (in ms) in which all of the correlations must have occurred together. Optional.</summary>
        public long? TimeWindow
        {
            get => Q<long?>("time_window");
            set => Q("time_window", value);
        }
    }
}
