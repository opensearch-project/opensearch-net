/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;

namespace OpenSearch.Net
{
    [StringEnum]
    public enum ExpandWildcards
    {
        [EnumMember(Value = "all")]
        All,

        [EnumMember(Value = "open")]
        Open,

        [EnumMember(Value = "closed")]
        Closed,

        [EnumMember(Value = "hidden")]
        Hidden,

        [EnumMember(Value = "none")]
        None
    }

    public static partial class KnownEnums
    {
        static partial void RegisterEnumStringResolvers()
        {
            EnumStringResolvers.TryAdd(
                typeof(ExpandWildcards),
                e => GetStringValue((ExpandWildcards)e)
            );
        }

        public static string GetStringValue(this ExpandWildcards enumValue)
        {
            switch (enumValue)
            {
                case ExpandWildcards.All:
                    return "all";
                case ExpandWildcards.Open:
                    return "open";
                case ExpandWildcards.Closed:
                    return "closed";
                case ExpandWildcards.Hidden:
                    return "hidden";
                case ExpandWildcards.None:
                    return "none";
            }
            throw new ArgumentException(
                $"'{enumValue.ToString()}' is not a valid value for enum 'ExpandWildcards'"
            );
        }
    }
}
