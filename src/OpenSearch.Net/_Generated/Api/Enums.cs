/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;

namespace OpenSearch.Net
{
    [StringEnum]
    public enum ByteUnit
    {
        [EnumMember(Value = "b")]
        B,

        [EnumMember(Value = "g")]
        G,

        [EnumMember(Value = "gb")]
        Gb,

        [EnumMember(Value = "k")]
        K,

        [EnumMember(Value = "kb")]
        Kb,

        [EnumMember(Value = "m")]
        M,

        [EnumMember(Value = "mb")]
        Mb,

        [EnumMember(Value = "p")]
        P,

        [EnumMember(Value = "pb")]
        Pb,

        [EnumMember(Value = "t")]
        T,

        [EnumMember(Value = "tb")]
        Tb,
    }

    [StringEnum]
    public enum ClusterHealthLevel
    {
        [EnumMember(Value = "awareness_attributes")]
        AwarenessAttributes,

        [EnumMember(Value = "cluster")]
        Cluster,

        [EnumMember(Value = "indices")]
        Indices,

        [EnumMember(Value = "shards")]
        Shards,
    }

    [Flags, StringEnum]
    public enum ClusterRerouteMetric
    {
        [EnumMember(Value = "blocks")]
        Blocks = 1 << 0,

        [EnumMember(Value = "cluster_manager_node")]
        ClusterManagerNode = 1 << 1,

        [EnumMember(Value = "master_node")]
        MasterNode = 1 << 2,

        [EnumMember(Value = "metadata")]
        Metadata = 1 << 3,

        [EnumMember(Value = "nodes")]
        Nodes = 1 << 4,

        [EnumMember(Value = "routing_nodes")]
        RoutingNodes = 1 << 5,

        [EnumMember(Value = "routing_table")]
        RoutingTable = 1 << 6,

        [EnumMember(Value = "version")]
        Version = 1 << 7,

        [EnumMember(Value = "_all")]
        All = 1 << 8,
    }

    [Flags, StringEnum]
    public enum ClusterStateMetric
    {
        [EnumMember(Value = "blocks")]
        Blocks = 1 << 0,

        [EnumMember(Value = "cluster_manager_node")]
        ClusterManagerNode = 1 << 1,

        [EnumMember(Value = "master_node")]
        MasterNode = 1 << 2,

        [EnumMember(Value = "metadata")]
        Metadata = 1 << 3,

        [EnumMember(Value = "nodes")]
        Nodes = 1 << 4,

        [EnumMember(Value = "routing_nodes")]
        RoutingNodes = 1 << 5,

        [EnumMember(Value = "routing_table")]
        RoutingTable = 1 << 6,

        [EnumMember(Value = "version")]
        Version = 1 << 7,

        [EnumMember(Value = "_all")]
        All = 1 << 8,
    }

    [Flags, StringEnum]
    public enum ClusterStatsIndexMetric
    {
        [EnumMember(Value = "analysis")]
        Analysis = 1 << 0,

        [EnumMember(Value = "completion")]
        Completion = 1 << 1,

        [EnumMember(Value = "docs")]
        Docs = 1 << 2,

        [EnumMember(Value = "fielddata")]
        Fielddata = 1 << 3,

        [EnumMember(Value = "mappings")]
        Mappings = 1 << 4,

        [EnumMember(Value = "query_cache")]
        QueryCache = 1 << 5,

        [EnumMember(Value = "segments")]
        Segments = 1 << 6,

        [EnumMember(Value = "shards")]
        Shards = 1 << 7,

        [EnumMember(Value = "store")]
        Store = 1 << 8,

        [EnumMember(Value = "_all")]
        All = 1 << 9,
    }

    [Flags, StringEnum]
    public enum ClusterStatsMetric
    {
        [EnumMember(Value = "discovery_type")]
        DiscoveryType = 1 << 0,

        [EnumMember(Value = "fs")]
        Fs = 1 << 1,

        [EnumMember(Value = "indices")]
        Indices = 1 << 2,

        [EnumMember(Value = "ingest")]
        Ingest = 1 << 3,

        [EnumMember(Value = "jvm")]
        Jvm = 1 << 4,

        [EnumMember(Value = "network_types")]
        NetworkTypes = 1 << 5,

        [EnumMember(Value = "os")]
        Os = 1 << 6,

        [EnumMember(Value = "packaging_types")]
        PackagingTypes = 1 << 7,

        [EnumMember(Value = "plugins")]
        Plugins = 1 << 8,

        [EnumMember(Value = "process")]
        Process = 1 << 9,

        [EnumMember(Value = "_all")]
        All = 1 << 10,
    }

    [StringEnum]
    public enum Conflicts
    {
        [EnumMember(Value = "abort")]
        Abort,

        [EnumMember(Value = "proceed")]
        Proceed,
    }

    [StringEnum]
    public enum DefaultOperator
    {
        [EnumMember(Value = "and")]
        And,

        [EnumMember(Value = "or")]
        Or,
    }

    [Flags, StringEnum]
    public enum ExpandWildcards
    {
        [EnumMember(Value = "all")]
        All = 1 << 0,

        [EnumMember(Value = "closed")]
        Closed = 1 << 1,

        [EnumMember(Value = "hidden")]
        Hidden = 1 << 2,

        [EnumMember(Value = "none")]
        None = 1 << 3,

        [EnumMember(Value = "open")]
        Open = 1 << 4,
    }

    [StringEnum]
    public enum HealthStatus
    {
        [EnumMember(Value = "green")]
        Green,

        [EnumMember(Value = "red")]
        Red,

        [EnumMember(Value = "yellow")]
        Yellow,
    }

    [StringEnum]
    public enum IndexApiBlock
    {
        [EnumMember(Value = "metadata")]
        Metadata,

        [EnumMember(Value = "read")]
        Read,

        [EnumMember(Value = "read_only")]
        ReadOnly,

        [EnumMember(Value = "write")]
        Write,
    }

    [Flags, StringEnum]
    public enum IndicesShardStoresShardStoreStatus
    {
        [EnumMember(Value = "all")]
        All = 1 << 0,

        [EnumMember(Value = "green")]
        Green = 1 << 1,

        [EnumMember(Value = "red")]
        Red = 1 << 2,

        [EnumMember(Value = "yellow")]
        Yellow = 1 << 3,
    }

    [Flags, StringEnum]
    public enum IndicesStatsMetric
    {
        [EnumMember(Value = "completion")]
        Completion = 1 << 0,

        [EnumMember(Value = "docs")]
        Docs = 1 << 1,

        [EnumMember(Value = "fielddata")]
        Fielddata = 1 << 2,

        [EnumMember(Value = "flush")]
        Flush = 1 << 3,

        [EnumMember(Value = "get")]
        Get = 1 << 4,

        [EnumMember(Value = "indexing")]
        Indexing = 1 << 5,

        [EnumMember(Value = "merge")]
        Merge = 1 << 6,

        [EnumMember(Value = "query_cache")]
        QueryCache = 1 << 7,

        [EnumMember(Value = "recovery")]
        Recovery = 1 << 8,

        [EnumMember(Value = "refresh")]
        Refresh = 1 << 9,

        [EnumMember(Value = "request_cache")]
        RequestCache = 1 << 10,

        [EnumMember(Value = "search")]
        Search = 1 << 11,

        [EnumMember(Value = "segments")]
        Segments = 1 << 12,

        [EnumMember(Value = "store")]
        Store = 1 << 13,

        [EnumMember(Value = "suggest")]
        Suggest = 1 << 14,

        [EnumMember(Value = "translog")]
        Translog = 1 << 15,

        [EnumMember(Value = "warmer")]
        Warmer = 1 << 16,

        [EnumMember(Value = "_all")]
        All = 1 << 17,
    }

    [StringEnum]
    public enum InsightsMetricType
    {
        [EnumMember(Value = "cpu")]
        Cpu,

        [EnumMember(Value = "latency")]
        Latency,

        [EnumMember(Value = "memory")]
        Memory,
    }

    [Flags, StringEnum]
    public enum KnnStatName
    {
        [EnumMember(Value = "cache_capacity_reached")]
        CacheCapacityReached = 1 << 0,

        [EnumMember(Value = "circuit_breaker_triggered")]
        CircuitBreakerTriggered = 1 << 1,

        [EnumMember(Value = "eviction_count")]
        EvictionCount = 1 << 2,

        [EnumMember(Value = "faiss_initialized")]
        FaissInitialized = 1 << 3,

        [EnumMember(Value = "graph_index_errors")]
        GraphIndexErrors = 1 << 4,

        [EnumMember(Value = "graph_index_requests")]
        GraphIndexRequests = 1 << 5,

        [EnumMember(Value = "graph_memory_usage")]
        GraphMemoryUsage = 1 << 6,

        [EnumMember(Value = "graph_memory_usage_percentage")]
        GraphMemoryUsagePercentage = 1 << 7,

        [EnumMember(Value = "graph_query_errors")]
        GraphQueryErrors = 1 << 8,

        [EnumMember(Value = "graph_query_requests")]
        GraphQueryRequests = 1 << 9,

        [EnumMember(Value = "graph_stats")]
        GraphStats = 1 << 10,

        [EnumMember(Value = "hit_count")]
        HitCount = 1 << 11,

        [EnumMember(Value = "indexing_from_model_degraded")]
        IndexingFromModelDegraded = 1 << 12,

        [EnumMember(Value = "indices_in_cache")]
        IndicesInCache = 1 << 13,

        [EnumMember(Value = "knn_query_requests")]
        KnnQueryRequests = 1 << 14,

        [EnumMember(Value = "knn_query_with_filter_requests")]
        KnnQueryWithFilterRequests = 1 << 15,

        [EnumMember(Value = "load_exception_count")]
        LoadExceptionCount = 1 << 16,

        [EnumMember(Value = "load_success_count")]
        LoadSuccessCount = 1 << 17,

        [EnumMember(Value = "lucene_initialized")]
        LuceneInitialized = 1 << 18,

        [EnumMember(Value = "max_distance_query_requests")]
        MaxDistanceQueryRequests = 1 << 19,

        [EnumMember(Value = "max_distance_query_with_filter_requests")]
        MaxDistanceQueryWithFilterRequests = 1 << 20,

        [EnumMember(Value = "min_score_query_requests")]
        MinScoreQueryRequests = 1 << 21,

        [EnumMember(Value = "min_score_query_with_filter_requests")]
        MinScoreQueryWithFilterRequests = 1 << 22,

        [EnumMember(Value = "miss_count")]
        MissCount = 1 << 23,

        [EnumMember(Value = "model_index_status")]
        ModelIndexStatus = 1 << 24,

        [EnumMember(Value = "nmslib_initialized")]
        NmslibInitialized = 1 << 25,

        [EnumMember(Value = "script_compilation_errors")]
        ScriptCompilationErrors = 1 << 26,

        [EnumMember(Value = "script_compilations")]
        ScriptCompilations = 1 << 27,

        [EnumMember(Value = "script_query_errors")]
        ScriptQueryErrors = 1 << 28,

        [EnumMember(Value = "script_query_requests")]
        ScriptQueryRequests = 1 << 29,

        [EnumMember(Value = "total_load_time")]
        TotalLoadTime = 1 << 30,

        [EnumMember(Value = "training_errors")]
        TrainingErrors = 1 << 31,

        [EnumMember(Value = "training_memory_usage")]
        TrainingMemoryUsage = 1 << 32,

        [EnumMember(Value = "training_memory_usage_percentage")]
        TrainingMemoryUsagePercentage = 1 << 33,

        [EnumMember(Value = "training_requests")]
        TrainingRequests = 1 << 34,
    }

    [StringEnum]
    public enum Level
    {
        [EnumMember(Value = "cluster")]
        Cluster,

        [EnumMember(Value = "indices")]
        Indices,

        [EnumMember(Value = "shards")]
        Shards,
    }

    [Flags, StringEnum]
    public enum LtrStatName
    {
        [EnumMember(Value = "cache")]
        Cache = 1 << 0,

        [EnumMember(Value = "request_error_count")]
        RequestErrorCount = 1 << 1,

        [EnumMember(Value = "request_total_count")]
        RequestTotalCount = 1 << 2,

        [EnumMember(Value = "status")]
        Status = 1 << 3,

        [EnumMember(Value = "stores")]
        Stores = 1 << 4,
    }

    [StringEnum]
    public enum MlFunctionName
    {
        [EnumMember(Value = "AD_LIBSVM")]
        AdLibsvm,

        [EnumMember(Value = "AGENT")]
        Agent,

        [EnumMember(Value = "ANOMALY_LOCALIZATION")]
        AnomalyLocalization,

        [EnumMember(Value = "BATCH_RCF")]
        BatchRcf,

        [EnumMember(Value = "CONNECTOR")]
        Connector,

        [EnumMember(Value = "FIT_RCF")]
        FitRcf,

        [EnumMember(Value = "KMEANS")]
        Kmeans,

        [EnumMember(Value = "LINEAR_REGRESSION")]
        LinearRegression,

        [EnumMember(Value = "LOCAL_SAMPLE_CALCULATOR")]
        LocalSampleCalculator,

        [EnumMember(Value = "LOGISTIC_REGRESSION")]
        LogisticRegression,

        [EnumMember(Value = "METRICS_CORRELATION")]
        MetricsCorrelation,

        [EnumMember(Value = "QUESTION_ANSWERING")]
        QuestionAnswering,

        [EnumMember(Value = "RCF_SUMMARIZE")]
        RcfSummarize,

        [EnumMember(Value = "REMOTE")]
        Remote,

        [EnumMember(Value = "SAMPLE_ALGO")]
        SampleAlgo,

        [EnumMember(Value = "SPARSE_ENCODING")]
        SparseEncoding,

        [EnumMember(Value = "SPARSE_TOKENIZE")]
        SparseTokenize,

        [EnumMember(Value = "TEXT_EMBEDDING")]
        TextEmbedding,

        [EnumMember(Value = "TEXT_SIMILARITY")]
        TextSimilarity,
    }

    [Flags, StringEnum]
    public enum MlStatName
    {
        [EnumMember(Value = "ml_config_index_status")]
        MlConfigIndexStatus = 1 << 0,

        [EnumMember(Value = "ml_connector_count")]
        MlConnectorCount = 1 << 1,

        [EnumMember(Value = "ml_connector_index_status")]
        MlConnectorIndexStatus = 1 << 2,

        [EnumMember(Value = "ml_controller_index_status")]
        MlControllerIndexStatus = 1 << 3,

        [EnumMember(Value = "ml_model_count")]
        MlModelCount = 1 << 4,

        [EnumMember(Value = "ml_model_index_status")]
        MlModelIndexStatus = 1 << 5,

        [EnumMember(Value = "ml_task_index_status")]
        MlTaskIndexStatus = 1 << 6,
    }

    [StringEnum]
    public enum MlToolName
    {
        [EnumMember(Value = "AgentTool")]
        Agenttool,

        [EnumMember(Value = "CatIndexTool")]
        Catindextool,

        [EnumMember(Value = "ConnectorTool")]
        Connectortool,

        [EnumMember(Value = "CreateAnomalyDetectorTool")]
        Createanomalydetectortool,

        [EnumMember(Value = "IndexMappingTool")]
        Indexmappingtool,

        [EnumMember(Value = "ListIndexTool")]
        Listindextool,

        [EnumMember(Value = "LogPatternTool")]
        Logpatterntool,

        [EnumMember(Value = "MLModelTool")]
        Mlmodeltool,

        [EnumMember(Value = "NeuralSparseSearchTool")]
        Neuralsparsesearchtool,

        [EnumMember(Value = "PPLTool")]
        Ppltool,

        [EnumMember(Value = "RAGTool")]
        Ragtool,

        [EnumMember(Value = "SearchAlertsTool")]
        Searchalertstool,

        [EnumMember(Value = "SearchAnomalyDetectorsTool")]
        Searchanomalydetectorstool,

        [EnumMember(Value = "SearchAnomalyResultsTool")]
        Searchanomalyresultstool,

        [EnumMember(Value = "SearchIndexTool")]
        Searchindextool,

        [EnumMember(Value = "SearchMonitorsTool")]
        Searchmonitorstool,

        [EnumMember(Value = "VectorDBTool")]
        Vectordbtool,

        [EnumMember(Value = "VisualizationTool")]
        Visualizationtool,
    }

    [Flags, StringEnum]
    public enum NeuralStatName
    {
        [EnumMember(Value = "cluster_version")]
        ClusterVersion = 1 << 0,

        [EnumMember(Value = "comb_arithmetic_executions")]
        CombArithmeticExecutions = 1 << 1,

        [EnumMember(Value = "comb_arithmetic_processors")]
        CombArithmeticProcessors = 1 << 2,

        [EnumMember(Value = "comb_geometric_executions")]
        CombGeometricExecutions = 1 << 3,

        [EnumMember(Value = "comb_geometric_processors")]
        CombGeometricProcessors = 1 << 4,

        [EnumMember(Value = "comb_harmonic_executions")]
        CombHarmonicExecutions = 1 << 5,

        [EnumMember(Value = "comb_harmonic_processors")]
        CombHarmonicProcessors = 1 << 6,

        [EnumMember(Value = "comb_rrf_executions")]
        CombRrfExecutions = 1 << 7,

        [EnumMember(Value = "comb_rrf_processors")]
        CombRrfProcessors = 1 << 8,

        [EnumMember(Value = "hybrid_query_requests")]
        HybridQueryRequests = 1 << 9,

        [EnumMember(Value = "hybrid_query_with_filter_requests")]
        HybridQueryWithFilterRequests = 1 << 10,

        [EnumMember(Value = "hybrid_query_with_inner_hits_requests")]
        HybridQueryWithInnerHitsRequests = 1 << 11,

        [EnumMember(Value = "hybrid_query_with_pagination_requests")]
        HybridQueryWithPaginationRequests = 1 << 12,

        [EnumMember(Value = "neural_query_against_knn_requests")]
        NeuralQueryAgainstKnnRequests = 1 << 13,

        [EnumMember(Value = "neural_query_against_semantic_dense_requests")]
        NeuralQueryAgainstSemanticDenseRequests = 1 << 14,

        [EnumMember(Value = "neural_query_against_semantic_sparse_requests")]
        NeuralQueryAgainstSemanticSparseRequests = 1 << 15,

        [EnumMember(Value = "neural_query_enricher_executions")]
        NeuralQueryEnricherExecutions = 1 << 16,

        [EnumMember(Value = "neural_query_enricher_processors")]
        NeuralQueryEnricherProcessors = 1 << 17,

        [EnumMember(Value = "neural_query_requests")]
        NeuralQueryRequests = 1 << 18,

        [EnumMember(Value = "neural_sparse_query_requests")]
        NeuralSparseQueryRequests = 1 << 19,

        [EnumMember(Value = "neural_sparse_two_phase_executions")]
        NeuralSparseTwoPhaseExecutions = 1 << 20,

        [EnumMember(Value = "neural_sparse_two_phase_processors")]
        NeuralSparseTwoPhaseProcessors = 1 << 21,

        [EnumMember(Value = "norm_l2_executions")]
        NormL2Executions = 1 << 22,

        [EnumMember(Value = "norm_l2_processors")]
        NormL2Processors = 1 << 23,

        [EnumMember(Value = "norm_minmax_executions")]
        NormMinmaxExecutions = 1 << 24,

        [EnumMember(Value = "norm_minmax_processors")]
        NormMinmaxProcessors = 1 << 25,

        [EnumMember(Value = "norm_zscore_executions")]
        NormZscoreExecutions = 1 << 26,

        [EnumMember(Value = "norm_zscore_processors")]
        NormZscoreProcessors = 1 << 27,

        [EnumMember(Value = "normalization_processor_executions")]
        NormalizationProcessorExecutions = 1 << 28,

        [EnumMember(Value = "normalization_processors")]
        NormalizationProcessors = 1 << 29,

        [EnumMember(Value = "rank_based_normalization_processor_executions")]
        RankBasedNormalizationProcessorExecutions = 1 << 30,

        [EnumMember(Value = "rank_based_normalization_processors")]
        RankBasedNormalizationProcessors = 1 << 31,

        [EnumMember(Value = "rerank_by_field_executions")]
        RerankByFieldExecutions = 1 << 32,

        [EnumMember(Value = "rerank_by_field_processors")]
        RerankByFieldProcessors = 1 << 33,

        [EnumMember(Value = "rerank_ml_executions")]
        RerankMlExecutions = 1 << 34,

        [EnumMember(Value = "rerank_ml_processors")]
        RerankMlProcessors = 1 << 35,

        [EnumMember(Value = "semantic_field_chunking_executions")]
        SemanticFieldChunkingExecutions = 1 << 36,

        [EnumMember(Value = "semantic_field_executions")]
        SemanticFieldExecutions = 1 << 37,

        [EnumMember(Value = "semantic_highlighting_request_count")]
        SemanticHighlightingRequestCount = 1 << 38,

        [EnumMember(Value = "skip_existing_executions")]
        SkipExistingExecutions = 1 << 39,

        [EnumMember(Value = "skip_existing_processors")]
        SkipExistingProcessors = 1 << 40,

        [EnumMember(Value = "sparse_encoding_executions")]
        SparseEncodingExecutions = 1 << 41,

        [EnumMember(Value = "sparse_encoding_processors")]
        SparseEncodingProcessors = 1 << 42,

        [EnumMember(Value = "text_chunking_delimiter_executions")]
        TextChunkingDelimiterExecutions = 1 << 43,

        [EnumMember(Value = "text_chunking_delimiter_processors")]
        TextChunkingDelimiterProcessors = 1 << 44,

        [EnumMember(Value = "text_chunking_executions")]
        TextChunkingExecutions = 1 << 45,

        [EnumMember(Value = "text_chunking_fixed_char_length_executions")]
        TextChunkingFixedCharLengthExecutions = 1 << 46,

        [EnumMember(Value = "text_chunking_fixed_char_length_processors")]
        TextChunkingFixedCharLengthProcessors = 1 << 47,

        [EnumMember(Value = "text_chunking_fixed_token_length_executions")]
        TextChunkingFixedTokenLengthExecutions = 1 << 48,

        [EnumMember(Value = "text_chunking_fixed_token_length_processors")]
        TextChunkingFixedTokenLengthProcessors = 1 << 49,

        [EnumMember(Value = "text_chunking_processors")]
        TextChunkingProcessors = 1 << 50,

        [EnumMember(Value = "text_embedding_executions")]
        TextEmbeddingExecutions = 1 << 51,

        [EnumMember(Value = "text_embedding_processors_in_pipelines")]
        TextEmbeddingProcessorsInPipelines = 1 << 52,

        [EnumMember(Value = "text_image_embedding_executions")]
        TextImageEmbeddingExecutions = 1 << 53,

        [EnumMember(Value = "text_image_embedding_processors")]
        TextImageEmbeddingProcessors = 1 << 54,
    }

    [Flags, StringEnum]
    public enum NodesInfoMetric
    {
        [EnumMember(Value = "aggregations")]
        Aggregations = 1 << 0,

        [EnumMember(Value = "http")]
        Http = 1 << 1,

        [EnumMember(Value = "indices")]
        Indices = 1 << 2,

        [EnumMember(Value = "ingest")]
        Ingest = 1 << 3,

        [EnumMember(Value = "jvm")]
        Jvm = 1 << 4,

        [EnumMember(Value = "os")]
        Os = 1 << 5,

        [EnumMember(Value = "plugins")]
        Plugins = 1 << 6,

        [EnumMember(Value = "process")]
        Process = 1 << 7,

        [EnumMember(Value = "search_pipelines")]
        SearchPipelines = 1 << 8,

        [EnumMember(Value = "settings")]
        Settings = 1 << 9,

        [EnumMember(Value = "thread_pool")]
        ThreadPool = 1 << 10,

        [EnumMember(Value = "transport")]
        Transport = 1 << 11,

        [EnumMember(Value = "_all")]
        All = 1 << 12,
    }

    [StringEnum]
    public enum NodesSampleType
    {
        [EnumMember(Value = "block")]
        Block,

        [EnumMember(Value = "cpu")]
        Cpu,

        [EnumMember(Value = "wait")]
        Wait,
    }

    [Flags, StringEnum]
    public enum NodesStatsIndexMetric
    {
        [EnumMember(Value = "completion")]
        Completion = 1 << 0,

        [EnumMember(Value = "docs")]
        Docs = 1 << 1,

        [EnumMember(Value = "fielddata")]
        Fielddata = 1 << 2,

        [EnumMember(Value = "flush")]
        Flush = 1 << 3,

        [EnumMember(Value = "get")]
        Get = 1 << 4,

        [EnumMember(Value = "indexing")]
        Indexing = 1 << 5,

        [EnumMember(Value = "merge")]
        Merge = 1 << 6,

        [EnumMember(Value = "query_cache")]
        QueryCache = 1 << 7,

        [EnumMember(Value = "recovery")]
        Recovery = 1 << 8,

        [EnumMember(Value = "refresh")]
        Refresh = 1 << 9,

        [EnumMember(Value = "request_cache")]
        RequestCache = 1 << 10,

        [EnumMember(Value = "search")]
        Search = 1 << 11,

        [EnumMember(Value = "segments")]
        Segments = 1 << 12,

        [EnumMember(Value = "store")]
        Store = 1 << 13,

        [EnumMember(Value = "suggest")]
        Suggest = 1 << 14,

        [EnumMember(Value = "translog")]
        Translog = 1 << 15,

        [EnumMember(Value = "warmer")]
        Warmer = 1 << 16,

        [EnumMember(Value = "_all")]
        All = 1 << 17,
    }

    [Flags, StringEnum]
    public enum NodesStatsMetric
    {
        [EnumMember(Value = "adaptive_selection")]
        AdaptiveSelection = 1 << 0,

        [EnumMember(Value = "admission_control")]
        AdmissionControl = 1 << 1,

        [EnumMember(Value = "breaker")]
        Breaker = 1 << 2,

        [EnumMember(Value = "caches")]
        Caches = 1 << 3,

        [EnumMember(Value = "cluster_manager_throttling")]
        ClusterManagerThrottling = 1 << 4,

        [EnumMember(Value = "discovery")]
        Discovery = 1 << 5,

        [EnumMember(Value = "file_cache")]
        FileCache = 1 << 6,

        [EnumMember(Value = "fs")]
        Fs = 1 << 7,

        [EnumMember(Value = "http")]
        Http = 1 << 8,

        [EnumMember(Value = "indexing_pressure")]
        IndexingPressure = 1 << 9,

        [EnumMember(Value = "indices")]
        Indices = 1 << 10,

        [EnumMember(Value = "ingest")]
        Ingest = 1 << 11,

        [EnumMember(Value = "jvm")]
        Jvm = 1 << 12,

        [EnumMember(Value = "os")]
        Os = 1 << 13,

        [EnumMember(Value = "process")]
        Process = 1 << 14,

        [EnumMember(Value = "repositories")]
        Repositories = 1 << 15,

        [EnumMember(Value = "resource_usage_stats")]
        ResourceUsageStats = 1 << 16,

        [EnumMember(Value = "script")]
        Script = 1 << 17,

        [EnumMember(Value = "script_cache")]
        ScriptCache = 1 << 18,

        [EnumMember(Value = "search_backpressure")]
        SearchBackpressure = 1 << 19,

        [EnumMember(Value = "search_pipeline")]
        SearchPipeline = 1 << 20,

        [EnumMember(Value = "segment_replication_backpressure")]
        SegmentReplicationBackpressure = 1 << 21,

        [EnumMember(Value = "shard_indexing_pressure")]
        ShardIndexingPressure = 1 << 22,

        [EnumMember(Value = "task_cancellation")]
        TaskCancellation = 1 << 23,

        [EnumMember(Value = "thread_pool")]
        ThreadPool = 1 << 24,

        [EnumMember(Value = "transport")]
        Transport = 1 << 25,

        [EnumMember(Value = "weighted_routing")]
        WeightedRouting = 1 << 26,

        [EnumMember(Value = "_all")]
        All = 1 << 27,
    }

    [Flags, StringEnum]
    public enum NodesUsageMetric
    {
        [EnumMember(Value = "aggregations")]
        Aggregations = 1 << 0,

        [EnumMember(Value = "rest_actions")]
        RestActions = 1 << 1,

        [EnumMember(Value = "_all")]
        All = 1 << 2,
    }

    [StringEnum]
    public enum NotificationsNotificationConfigType
    {
        [EnumMember(Value = "chime")]
        Chime,

        [EnumMember(Value = "email")]
        Email,

        [EnumMember(Value = "email_group")]
        EmailGroup,

        [EnumMember(Value = "microsoft_teams")]
        MicrosoftTeams,

        [EnumMember(Value = "ses_account")]
        SesAccount,

        [EnumMember(Value = "slack")]
        Slack,

        [EnumMember(Value = "smtp_account")]
        SmtpAccount,

        [EnumMember(Value = "sns")]
        Sns,

        [EnumMember(Value = "webhook")]
        Webhook,
    }

    [StringEnum]
    public enum OpType
    {
        [EnumMember(Value = "create")]
        Create,

        [EnumMember(Value = "index")]
        Index,
    }

    [StringEnum]
    public enum Refresh
    {
        [EnumMember(Value = "false")]
        False,

        [EnumMember(Value = "true")]
        True,

        [EnumMember(Value = "wait_for")]
        WaitFor,
    }

    [StringEnum]
    public enum SearchType
    {
        [EnumMember(Value = "dfs_query_then_fetch")]
        DfsQueryThenFetch,

        [EnumMember(Value = "query_then_fetch")]
        QueryThenFetch,
    }

    [StringEnum]
    public enum SecurityAnalyticsAlertsAlertSeverityLevel
    {
        [EnumMember(Value = "1")]
        One,

        [EnumMember(Value = "2")]
        Two,

        [EnumMember(Value = "3")]
        Three,

        [EnumMember(Value = "4")]
        Four,

        [EnumMember(Value = "5")]
        Five,

        [EnumMember(Value = "ALL")]
        All,
    }

    [StringEnum]
    public enum SecurityAnalyticsAlertsAlertState
    {
        [EnumMember(Value = "ACKNOWLEDGED")]
        Acknowledged,

        [EnumMember(Value = "ACTIVE")]
        Active,

        [EnumMember(Value = "COMPLETED")]
        Completed,

        [EnumMember(Value = "DELETED")]
        Deleted,

        [EnumMember(Value = "ERROR")]
        Error,
    }

    [StringEnum]
    public enum SecurityAnalyticsFindingsDetectionType
    {
        [EnumMember(Value = "rule")]
        Rule,

        [EnumMember(Value = "threat")]
        Threat,
    }

    [StringEnum]
    public enum SecurityAnalyticsFindingsRuleSeverity
    {
        [EnumMember(Value = "critical")]
        Critical,

        [EnumMember(Value = "high")]
        High,

        [EnumMember(Value = "low")]
        Low,

        [EnumMember(Value = "medium")]
        Medium,
    }

    [StringEnum]
    public enum SlicesCalculation
    {
        [EnumMember(Value = "auto")]
        Auto,
    }

    [StringEnum]
    public enum SortOrder
    {
        [EnumMember(Value = "asc")]
        Ascending,

        [EnumMember(Value = "desc")]
        Descending,
    }

    [StringEnum]
    public enum SuggestMode
    {
        [EnumMember(Value = "always")]
        Always,

        [EnumMember(Value = "missing")]
        Missing,

        [EnumMember(Value = "popular")]
        Popular,
    }

    [StringEnum]
    public enum TasksGroupBy
    {
        [EnumMember(Value = "nodes")]
        Nodes,

        [EnumMember(Value = "none")]
        None,

        [EnumMember(Value = "parents")]
        Parents,
    }

    [StringEnum]
    public enum TimeUnit
    {
        [EnumMember(Value = "d")]
        Days,

        [EnumMember(Value = "h")]
        Hours,

        [EnumMember(Value = "m")]
        Minutes,

        [EnumMember(Value = "micros")]
        Microseconds,

        [EnumMember(Value = "ms")]
        Milliseconds,

        [EnumMember(Value = "nanos")]
        Nanoseconds,

        [EnumMember(Value = "s")]
        Seconds,
    }

    [StringEnum]
    public enum VersionType
    {
        [EnumMember(Value = "external")]
        External,

        [EnumMember(Value = "external_gte")]
        ExternalGte,

        [EnumMember(Value = "force")]
        Force,

        [EnumMember(Value = "internal")]
        Internal,
    }

    [StringEnum]
    public enum WaitForActiveShardOptions
    {
        [EnumMember(Value = "all")]
        All,
    }

    [StringEnum]
    public enum WaitForEvents
    {
        [EnumMember(Value = "high")]
        High,

        [EnumMember(Value = "immediate")]
        Immediate,

        [EnumMember(Value = "languid")]
        Languid,

        [EnumMember(Value = "low")]
        Low,

        [EnumMember(Value = "normal")]
        Normal,

        [EnumMember(Value = "urgent")]
        Urgent,
    }

    public static partial class KnownEnums
    {
        static partial void RegisterEnumStringResolvers()
        {
            AddEnumStringResolver<ByteUnit>(GetStringValue);
            AddEnumStringResolver<ClusterHealthLevel>(GetStringValue);
            AddEnumStringResolver<ClusterRerouteMetric>(GetStringValue);
            AddEnumStringResolver<ClusterStateMetric>(GetStringValue);
            AddEnumStringResolver<ClusterStatsIndexMetric>(GetStringValue);
            AddEnumStringResolver<ClusterStatsMetric>(GetStringValue);
            AddEnumStringResolver<Conflicts>(GetStringValue);
            AddEnumStringResolver<DefaultOperator>(GetStringValue);
            AddEnumStringResolver<ExpandWildcards>(GetStringValue);
            AddEnumStringResolver<HealthStatus>(GetStringValue);
            AddEnumStringResolver<IndexApiBlock>(GetStringValue);
            AddEnumStringResolver<IndicesShardStoresShardStoreStatus>(GetStringValue);
            AddEnumStringResolver<IndicesStatsMetric>(GetStringValue);
            AddEnumStringResolver<InsightsMetricType>(GetStringValue);
            AddEnumStringResolver<KnnStatName>(GetStringValue);
            AddEnumStringResolver<Level>(GetStringValue);
            AddEnumStringResolver<LtrStatName>(GetStringValue);
            AddEnumStringResolver<MlFunctionName>(GetStringValue);
            AddEnumStringResolver<MlStatName>(GetStringValue);
            AddEnumStringResolver<MlToolName>(GetStringValue);
            AddEnumStringResolver<NeuralStatName>(GetStringValue);
            AddEnumStringResolver<NodesInfoMetric>(GetStringValue);
            AddEnumStringResolver<NodesSampleType>(GetStringValue);
            AddEnumStringResolver<NodesStatsIndexMetric>(GetStringValue);
            AddEnumStringResolver<NodesStatsMetric>(GetStringValue);
            AddEnumStringResolver<NodesUsageMetric>(GetStringValue);
            AddEnumStringResolver<NotificationsNotificationConfigType>(GetStringValue);
            AddEnumStringResolver<OpType>(GetStringValue);
            AddEnumStringResolver<Refresh>(GetStringValue);
            AddEnumStringResolver<SearchType>(GetStringValue);
            AddEnumStringResolver<SecurityAnalyticsAlertsAlertSeverityLevel>(GetStringValue);
            AddEnumStringResolver<SecurityAnalyticsAlertsAlertState>(GetStringValue);
            AddEnumStringResolver<SecurityAnalyticsFindingsDetectionType>(GetStringValue);
            AddEnumStringResolver<SecurityAnalyticsFindingsRuleSeverity>(GetStringValue);
            AddEnumStringResolver<SlicesCalculation>(GetStringValue);
            AddEnumStringResolver<SortOrder>(GetStringValue);
            AddEnumStringResolver<SuggestMode>(GetStringValue);
            AddEnumStringResolver<TasksGroupBy>(GetStringValue);
            AddEnumStringResolver<TimeUnit>(GetStringValue);
            AddEnumStringResolver<VersionType>(GetStringValue);
            AddEnumStringResolver<WaitForActiveShardOptions>(GetStringValue);
            AddEnumStringResolver<WaitForEvents>(GetStringValue);
        }

        public static string GetStringValue(this ByteUnit enumValue) =>
            enumValue switch
            {
                ByteUnit.B => "b",
                ByteUnit.G => "g",
                ByteUnit.Gb => "gb",
                ByteUnit.K => "k",
                ByteUnit.Kb => "kb",
                ByteUnit.M => "m",
                ByteUnit.Mb => "mb",
                ByteUnit.P => "p",
                ByteUnit.Pb => "pb",
                ByteUnit.T => "t",
                ByteUnit.Tb => "tb",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'ByteUnit'"
                ),
            };

        public static string GetStringValue(this ClusterHealthLevel enumValue) =>
            enumValue switch
            {
                ClusterHealthLevel.AwarenessAttributes => "awareness_attributes",
                ClusterHealthLevel.Cluster => "cluster",
                ClusterHealthLevel.Indices => "indices",
                ClusterHealthLevel.Shards => "shards",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'ClusterHealthLevel'"
                ),
            };

        public static string GetStringValue(this ClusterRerouteMetric enumValue)
        {
            if ((enumValue & ClusterRerouteMetric.All) != 0)
                return "_all";
            var list = new List<string>();
            if ((enumValue & ClusterRerouteMetric.Blocks) != 0)
                list.Add("blocks");
            if ((enumValue & ClusterRerouteMetric.ClusterManagerNode) != 0)
                list.Add("cluster_manager_node");
            if ((enumValue & ClusterRerouteMetric.MasterNode) != 0)
                list.Add("master_node");
            if ((enumValue & ClusterRerouteMetric.Metadata) != 0)
                list.Add("metadata");
            if ((enumValue & ClusterRerouteMetric.Nodes) != 0)
                list.Add("nodes");
            if ((enumValue & ClusterRerouteMetric.RoutingNodes) != 0)
                list.Add("routing_nodes");
            if ((enumValue & ClusterRerouteMetric.RoutingTable) != 0)
                list.Add("routing_table");
            if ((enumValue & ClusterRerouteMetric.Version) != 0)
                list.Add("version");
            return string.Join(",", list);
        }

        public static string GetStringValue(this ClusterStateMetric enumValue)
        {
            if ((enumValue & ClusterStateMetric.All) != 0)
                return "_all";
            var list = new List<string>();
            if ((enumValue & ClusterStateMetric.Blocks) != 0)
                list.Add("blocks");
            if ((enumValue & ClusterStateMetric.ClusterManagerNode) != 0)
                list.Add("cluster_manager_node");
            if ((enumValue & ClusterStateMetric.MasterNode) != 0)
                list.Add("master_node");
            if ((enumValue & ClusterStateMetric.Metadata) != 0)
                list.Add("metadata");
            if ((enumValue & ClusterStateMetric.Nodes) != 0)
                list.Add("nodes");
            if ((enumValue & ClusterStateMetric.RoutingNodes) != 0)
                list.Add("routing_nodes");
            if ((enumValue & ClusterStateMetric.RoutingTable) != 0)
                list.Add("routing_table");
            if ((enumValue & ClusterStateMetric.Version) != 0)
                list.Add("version");
            return string.Join(",", list);
        }

        public static string GetStringValue(this ClusterStatsIndexMetric enumValue)
        {
            if ((enumValue & ClusterStatsIndexMetric.All) != 0)
                return "_all";
            var list = new List<string>();
            if ((enumValue & ClusterStatsIndexMetric.Analysis) != 0)
                list.Add("analysis");
            if ((enumValue & ClusterStatsIndexMetric.Completion) != 0)
                list.Add("completion");
            if ((enumValue & ClusterStatsIndexMetric.Docs) != 0)
                list.Add("docs");
            if ((enumValue & ClusterStatsIndexMetric.Fielddata) != 0)
                list.Add("fielddata");
            if ((enumValue & ClusterStatsIndexMetric.Mappings) != 0)
                list.Add("mappings");
            if ((enumValue & ClusterStatsIndexMetric.QueryCache) != 0)
                list.Add("query_cache");
            if ((enumValue & ClusterStatsIndexMetric.Segments) != 0)
                list.Add("segments");
            if ((enumValue & ClusterStatsIndexMetric.Shards) != 0)
                list.Add("shards");
            if ((enumValue & ClusterStatsIndexMetric.Store) != 0)
                list.Add("store");
            return string.Join(",", list);
        }

        public static string GetStringValue(this ClusterStatsMetric enumValue)
        {
            if ((enumValue & ClusterStatsMetric.All) != 0)
                return "_all";
            var list = new List<string>();
            if ((enumValue & ClusterStatsMetric.DiscoveryType) != 0)
                list.Add("discovery_type");
            if ((enumValue & ClusterStatsMetric.Fs) != 0)
                list.Add("fs");
            if ((enumValue & ClusterStatsMetric.Indices) != 0)
                list.Add("indices");
            if ((enumValue & ClusterStatsMetric.Ingest) != 0)
                list.Add("ingest");
            if ((enumValue & ClusterStatsMetric.Jvm) != 0)
                list.Add("jvm");
            if ((enumValue & ClusterStatsMetric.NetworkTypes) != 0)
                list.Add("network_types");
            if ((enumValue & ClusterStatsMetric.Os) != 0)
                list.Add("os");
            if ((enumValue & ClusterStatsMetric.PackagingTypes) != 0)
                list.Add("packaging_types");
            if ((enumValue & ClusterStatsMetric.Plugins) != 0)
                list.Add("plugins");
            if ((enumValue & ClusterStatsMetric.Process) != 0)
                list.Add("process");
            return string.Join(",", list);
        }

        public static string GetStringValue(this Conflicts enumValue) =>
            enumValue switch
            {
                Conflicts.Abort => "abort",
                Conflicts.Proceed => "proceed",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'Conflicts'"
                ),
            };

        public static string GetStringValue(this DefaultOperator enumValue) =>
            enumValue switch
            {
                DefaultOperator.And => "and",
                DefaultOperator.Or => "or",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'DefaultOperator'"
                ),
            };

        public static string GetStringValue(this ExpandWildcards enumValue)
        {
            var list = new List<string>();
            if ((enumValue & ExpandWildcards.All) != 0)
                list.Add("all");
            if ((enumValue & ExpandWildcards.Closed) != 0)
                list.Add("closed");
            if ((enumValue & ExpandWildcards.Hidden) != 0)
                list.Add("hidden");
            if ((enumValue & ExpandWildcards.None) != 0)
                list.Add("none");
            if ((enumValue & ExpandWildcards.Open) != 0)
                list.Add("open");
            return string.Join(",", list);
        }

        public static string GetStringValue(this HealthStatus enumValue) =>
            enumValue switch
            {
                HealthStatus.Green => "green",
                HealthStatus.Red => "red",
                HealthStatus.Yellow => "yellow",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'HealthStatus'"
                ),
            };

        public static string GetStringValue(this IndexApiBlock enumValue) =>
            enumValue switch
            {
                IndexApiBlock.Metadata => "metadata",
                IndexApiBlock.Read => "read",
                IndexApiBlock.ReadOnly => "read_only",
                IndexApiBlock.Write => "write",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'IndexApiBlock'"
                ),
            };

        public static string GetStringValue(this IndicesShardStoresShardStoreStatus enumValue)
        {
            var list = new List<string>();
            if ((enumValue & IndicesShardStoresShardStoreStatus.All) != 0)
                list.Add("all");
            if ((enumValue & IndicesShardStoresShardStoreStatus.Green) != 0)
                list.Add("green");
            if ((enumValue & IndicesShardStoresShardStoreStatus.Red) != 0)
                list.Add("red");
            if ((enumValue & IndicesShardStoresShardStoreStatus.Yellow) != 0)
                list.Add("yellow");
            return string.Join(",", list);
        }

        public static string GetStringValue(this IndicesStatsMetric enumValue)
        {
            if ((enumValue & IndicesStatsMetric.All) != 0)
                return "_all";
            var list = new List<string>();
            if ((enumValue & IndicesStatsMetric.Completion) != 0)
                list.Add("completion");
            if ((enumValue & IndicesStatsMetric.Docs) != 0)
                list.Add("docs");
            if ((enumValue & IndicesStatsMetric.Fielddata) != 0)
                list.Add("fielddata");
            if ((enumValue & IndicesStatsMetric.Flush) != 0)
                list.Add("flush");
            if ((enumValue & IndicesStatsMetric.Get) != 0)
                list.Add("get");
            if ((enumValue & IndicesStatsMetric.Indexing) != 0)
                list.Add("indexing");
            if ((enumValue & IndicesStatsMetric.Merge) != 0)
                list.Add("merge");
            if ((enumValue & IndicesStatsMetric.QueryCache) != 0)
                list.Add("query_cache");
            if ((enumValue & IndicesStatsMetric.Recovery) != 0)
                list.Add("recovery");
            if ((enumValue & IndicesStatsMetric.Refresh) != 0)
                list.Add("refresh");
            if ((enumValue & IndicesStatsMetric.RequestCache) != 0)
                list.Add("request_cache");
            if ((enumValue & IndicesStatsMetric.Search) != 0)
                list.Add("search");
            if ((enumValue & IndicesStatsMetric.Segments) != 0)
                list.Add("segments");
            if ((enumValue & IndicesStatsMetric.Store) != 0)
                list.Add("store");
            if ((enumValue & IndicesStatsMetric.Suggest) != 0)
                list.Add("suggest");
            if ((enumValue & IndicesStatsMetric.Translog) != 0)
                list.Add("translog");
            if ((enumValue & IndicesStatsMetric.Warmer) != 0)
                list.Add("warmer");
            return string.Join(",", list);
        }

        public static string GetStringValue(this InsightsMetricType enumValue) =>
            enumValue switch
            {
                InsightsMetricType.Cpu => "cpu",
                InsightsMetricType.Latency => "latency",
                InsightsMetricType.Memory => "memory",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'InsightsMetricType'"
                ),
            };

        public static string GetStringValue(this KnnStatName enumValue)
        {
            var list = new List<string>();
            if ((enumValue & KnnStatName.CacheCapacityReached) != 0)
                list.Add("cache_capacity_reached");
            if ((enumValue & KnnStatName.CircuitBreakerTriggered) != 0)
                list.Add("circuit_breaker_triggered");
            if ((enumValue & KnnStatName.EvictionCount) != 0)
                list.Add("eviction_count");
            if ((enumValue & KnnStatName.FaissInitialized) != 0)
                list.Add("faiss_initialized");
            if ((enumValue & KnnStatName.GraphIndexErrors) != 0)
                list.Add("graph_index_errors");
            if ((enumValue & KnnStatName.GraphIndexRequests) != 0)
                list.Add("graph_index_requests");
            if ((enumValue & KnnStatName.GraphMemoryUsage) != 0)
                list.Add("graph_memory_usage");
            if ((enumValue & KnnStatName.GraphMemoryUsagePercentage) != 0)
                list.Add("graph_memory_usage_percentage");
            if ((enumValue & KnnStatName.GraphQueryErrors) != 0)
                list.Add("graph_query_errors");
            if ((enumValue & KnnStatName.GraphQueryRequests) != 0)
                list.Add("graph_query_requests");
            if ((enumValue & KnnStatName.GraphStats) != 0)
                list.Add("graph_stats");
            if ((enumValue & KnnStatName.HitCount) != 0)
                list.Add("hit_count");
            if ((enumValue & KnnStatName.IndexingFromModelDegraded) != 0)
                list.Add("indexing_from_model_degraded");
            if ((enumValue & KnnStatName.IndicesInCache) != 0)
                list.Add("indices_in_cache");
            if ((enumValue & KnnStatName.KnnQueryRequests) != 0)
                list.Add("knn_query_requests");
            if ((enumValue & KnnStatName.KnnQueryWithFilterRequests) != 0)
                list.Add("knn_query_with_filter_requests");
            if ((enumValue & KnnStatName.LoadExceptionCount) != 0)
                list.Add("load_exception_count");
            if ((enumValue & KnnStatName.LoadSuccessCount) != 0)
                list.Add("load_success_count");
            if ((enumValue & KnnStatName.LuceneInitialized) != 0)
                list.Add("lucene_initialized");
            if ((enumValue & KnnStatName.MaxDistanceQueryRequests) != 0)
                list.Add("max_distance_query_requests");
            if ((enumValue & KnnStatName.MaxDistanceQueryWithFilterRequests) != 0)
                list.Add("max_distance_query_with_filter_requests");
            if ((enumValue & KnnStatName.MinScoreQueryRequests) != 0)
                list.Add("min_score_query_requests");
            if ((enumValue & KnnStatName.MinScoreQueryWithFilterRequests) != 0)
                list.Add("min_score_query_with_filter_requests");
            if ((enumValue & KnnStatName.MissCount) != 0)
                list.Add("miss_count");
            if ((enumValue & KnnStatName.ModelIndexStatus) != 0)
                list.Add("model_index_status");
            if ((enumValue & KnnStatName.NmslibInitialized) != 0)
                list.Add("nmslib_initialized");
            if ((enumValue & KnnStatName.ScriptCompilationErrors) != 0)
                list.Add("script_compilation_errors");
            if ((enumValue & KnnStatName.ScriptCompilations) != 0)
                list.Add("script_compilations");
            if ((enumValue & KnnStatName.ScriptQueryErrors) != 0)
                list.Add("script_query_errors");
            if ((enumValue & KnnStatName.ScriptQueryRequests) != 0)
                list.Add("script_query_requests");
            if ((enumValue & KnnStatName.TotalLoadTime) != 0)
                list.Add("total_load_time");
            if ((enumValue & KnnStatName.TrainingErrors) != 0)
                list.Add("training_errors");
            if ((enumValue & KnnStatName.TrainingMemoryUsage) != 0)
                list.Add("training_memory_usage");
            if ((enumValue & KnnStatName.TrainingMemoryUsagePercentage) != 0)
                list.Add("training_memory_usage_percentage");
            if ((enumValue & KnnStatName.TrainingRequests) != 0)
                list.Add("training_requests");
            return string.Join(",", list);
        }

        public static string GetStringValue(this Level enumValue) =>
            enumValue switch
            {
                Level.Cluster => "cluster",
                Level.Indices => "indices",
                Level.Shards => "shards",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'Level'"
                ),
            };

        public static string GetStringValue(this LtrStatName enumValue)
        {
            var list = new List<string>();
            if ((enumValue & LtrStatName.Cache) != 0)
                list.Add("cache");
            if ((enumValue & LtrStatName.RequestErrorCount) != 0)
                list.Add("request_error_count");
            if ((enumValue & LtrStatName.RequestTotalCount) != 0)
                list.Add("request_total_count");
            if ((enumValue & LtrStatName.Status) != 0)
                list.Add("status");
            if ((enumValue & LtrStatName.Stores) != 0)
                list.Add("stores");
            return string.Join(",", list);
        }

        public static string GetStringValue(this MlFunctionName enumValue) =>
            enumValue switch
            {
                MlFunctionName.AdLibsvm => "AD_LIBSVM",
                MlFunctionName.Agent => "AGENT",
                MlFunctionName.AnomalyLocalization => "ANOMALY_LOCALIZATION",
                MlFunctionName.BatchRcf => "BATCH_RCF",
                MlFunctionName.Connector => "CONNECTOR",
                MlFunctionName.FitRcf => "FIT_RCF",
                MlFunctionName.Kmeans => "KMEANS",
                MlFunctionName.LinearRegression => "LINEAR_REGRESSION",
                MlFunctionName.LocalSampleCalculator => "LOCAL_SAMPLE_CALCULATOR",
                MlFunctionName.LogisticRegression => "LOGISTIC_REGRESSION",
                MlFunctionName.MetricsCorrelation => "METRICS_CORRELATION",
                MlFunctionName.QuestionAnswering => "QUESTION_ANSWERING",
                MlFunctionName.RcfSummarize => "RCF_SUMMARIZE",
                MlFunctionName.Remote => "REMOTE",
                MlFunctionName.SampleAlgo => "SAMPLE_ALGO",
                MlFunctionName.SparseEncoding => "SPARSE_ENCODING",
                MlFunctionName.SparseTokenize => "SPARSE_TOKENIZE",
                MlFunctionName.TextEmbedding => "TEXT_EMBEDDING",
                MlFunctionName.TextSimilarity => "TEXT_SIMILARITY",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'MlFunctionName'"
                ),
            };

        public static string GetStringValue(this MlStatName enumValue)
        {
            var list = new List<string>();
            if ((enumValue & MlStatName.MlConfigIndexStatus) != 0)
                list.Add("ml_config_index_status");
            if ((enumValue & MlStatName.MlConnectorCount) != 0)
                list.Add("ml_connector_count");
            if ((enumValue & MlStatName.MlConnectorIndexStatus) != 0)
                list.Add("ml_connector_index_status");
            if ((enumValue & MlStatName.MlControllerIndexStatus) != 0)
                list.Add("ml_controller_index_status");
            if ((enumValue & MlStatName.MlModelCount) != 0)
                list.Add("ml_model_count");
            if ((enumValue & MlStatName.MlModelIndexStatus) != 0)
                list.Add("ml_model_index_status");
            if ((enumValue & MlStatName.MlTaskIndexStatus) != 0)
                list.Add("ml_task_index_status");
            return string.Join(",", list);
        }

        public static string GetStringValue(this MlToolName enumValue) =>
            enumValue switch
            {
                MlToolName.Agenttool => "AgentTool",
                MlToolName.Catindextool => "CatIndexTool",
                MlToolName.Connectortool => "ConnectorTool",
                MlToolName.Createanomalydetectortool => "CreateAnomalyDetectorTool",
                MlToolName.Indexmappingtool => "IndexMappingTool",
                MlToolName.Listindextool => "ListIndexTool",
                MlToolName.Logpatterntool => "LogPatternTool",
                MlToolName.Mlmodeltool => "MLModelTool",
                MlToolName.Neuralsparsesearchtool => "NeuralSparseSearchTool",
                MlToolName.Ppltool => "PPLTool",
                MlToolName.Ragtool => "RAGTool",
                MlToolName.Searchalertstool => "SearchAlertsTool",
                MlToolName.Searchanomalydetectorstool => "SearchAnomalyDetectorsTool",
                MlToolName.Searchanomalyresultstool => "SearchAnomalyResultsTool",
                MlToolName.Searchindextool => "SearchIndexTool",
                MlToolName.Searchmonitorstool => "SearchMonitorsTool",
                MlToolName.Vectordbtool => "VectorDBTool",
                MlToolName.Visualizationtool => "VisualizationTool",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'MlToolName'"
                ),
            };

        public static string GetStringValue(this NeuralStatName enumValue)
        {
            var list = new List<string>();
            if ((enumValue & NeuralStatName.ClusterVersion) != 0)
                list.Add("cluster_version");
            if ((enumValue & NeuralStatName.CombArithmeticExecutions) != 0)
                list.Add("comb_arithmetic_executions");
            if ((enumValue & NeuralStatName.CombArithmeticProcessors) != 0)
                list.Add("comb_arithmetic_processors");
            if ((enumValue & NeuralStatName.CombGeometricExecutions) != 0)
                list.Add("comb_geometric_executions");
            if ((enumValue & NeuralStatName.CombGeometricProcessors) != 0)
                list.Add("comb_geometric_processors");
            if ((enumValue & NeuralStatName.CombHarmonicExecutions) != 0)
                list.Add("comb_harmonic_executions");
            if ((enumValue & NeuralStatName.CombHarmonicProcessors) != 0)
                list.Add("comb_harmonic_processors");
            if ((enumValue & NeuralStatName.CombRrfExecutions) != 0)
                list.Add("comb_rrf_executions");
            if ((enumValue & NeuralStatName.CombRrfProcessors) != 0)
                list.Add("comb_rrf_processors");
            if ((enumValue & NeuralStatName.HybridQueryRequests) != 0)
                list.Add("hybrid_query_requests");
            if ((enumValue & NeuralStatName.HybridQueryWithFilterRequests) != 0)
                list.Add("hybrid_query_with_filter_requests");
            if ((enumValue & NeuralStatName.HybridQueryWithInnerHitsRequests) != 0)
                list.Add("hybrid_query_with_inner_hits_requests");
            if ((enumValue & NeuralStatName.HybridQueryWithPaginationRequests) != 0)
                list.Add("hybrid_query_with_pagination_requests");
            if ((enumValue & NeuralStatName.NeuralQueryAgainstKnnRequests) != 0)
                list.Add("neural_query_against_knn_requests");
            if ((enumValue & NeuralStatName.NeuralQueryAgainstSemanticDenseRequests) != 0)
                list.Add("neural_query_against_semantic_dense_requests");
            if ((enumValue & NeuralStatName.NeuralQueryAgainstSemanticSparseRequests) != 0)
                list.Add("neural_query_against_semantic_sparse_requests");
            if ((enumValue & NeuralStatName.NeuralQueryEnricherExecutions) != 0)
                list.Add("neural_query_enricher_executions");
            if ((enumValue & NeuralStatName.NeuralQueryEnricherProcessors) != 0)
                list.Add("neural_query_enricher_processors");
            if ((enumValue & NeuralStatName.NeuralQueryRequests) != 0)
                list.Add("neural_query_requests");
            if ((enumValue & NeuralStatName.NeuralSparseQueryRequests) != 0)
                list.Add("neural_sparse_query_requests");
            if ((enumValue & NeuralStatName.NeuralSparseTwoPhaseExecutions) != 0)
                list.Add("neural_sparse_two_phase_executions");
            if ((enumValue & NeuralStatName.NeuralSparseTwoPhaseProcessors) != 0)
                list.Add("neural_sparse_two_phase_processors");
            if ((enumValue & NeuralStatName.NormL2Executions) != 0)
                list.Add("norm_l2_executions");
            if ((enumValue & NeuralStatName.NormL2Processors) != 0)
                list.Add("norm_l2_processors");
            if ((enumValue & NeuralStatName.NormMinmaxExecutions) != 0)
                list.Add("norm_minmax_executions");
            if ((enumValue & NeuralStatName.NormMinmaxProcessors) != 0)
                list.Add("norm_minmax_processors");
            if ((enumValue & NeuralStatName.NormZscoreExecutions) != 0)
                list.Add("norm_zscore_executions");
            if ((enumValue & NeuralStatName.NormZscoreProcessors) != 0)
                list.Add("norm_zscore_processors");
            if ((enumValue & NeuralStatName.NormalizationProcessorExecutions) != 0)
                list.Add("normalization_processor_executions");
            if ((enumValue & NeuralStatName.NormalizationProcessors) != 0)
                list.Add("normalization_processors");
            if ((enumValue & NeuralStatName.RankBasedNormalizationProcessorExecutions) != 0)
                list.Add("rank_based_normalization_processor_executions");
            if ((enumValue & NeuralStatName.RankBasedNormalizationProcessors) != 0)
                list.Add("rank_based_normalization_processors");
            if ((enumValue & NeuralStatName.RerankByFieldExecutions) != 0)
                list.Add("rerank_by_field_executions");
            if ((enumValue & NeuralStatName.RerankByFieldProcessors) != 0)
                list.Add("rerank_by_field_processors");
            if ((enumValue & NeuralStatName.RerankMlExecutions) != 0)
                list.Add("rerank_ml_executions");
            if ((enumValue & NeuralStatName.RerankMlProcessors) != 0)
                list.Add("rerank_ml_processors");
            if ((enumValue & NeuralStatName.SemanticFieldChunkingExecutions) != 0)
                list.Add("semantic_field_chunking_executions");
            if ((enumValue & NeuralStatName.SemanticFieldExecutions) != 0)
                list.Add("semantic_field_executions");
            if ((enumValue & NeuralStatName.SemanticHighlightingRequestCount) != 0)
                list.Add("semantic_highlighting_request_count");
            if ((enumValue & NeuralStatName.SkipExistingExecutions) != 0)
                list.Add("skip_existing_executions");
            if ((enumValue & NeuralStatName.SkipExistingProcessors) != 0)
                list.Add("skip_existing_processors");
            if ((enumValue & NeuralStatName.SparseEncodingExecutions) != 0)
                list.Add("sparse_encoding_executions");
            if ((enumValue & NeuralStatName.SparseEncodingProcessors) != 0)
                list.Add("sparse_encoding_processors");
            if ((enumValue & NeuralStatName.TextChunkingDelimiterExecutions) != 0)
                list.Add("text_chunking_delimiter_executions");
            if ((enumValue & NeuralStatName.TextChunkingDelimiterProcessors) != 0)
                list.Add("text_chunking_delimiter_processors");
            if ((enumValue & NeuralStatName.TextChunkingExecutions) != 0)
                list.Add("text_chunking_executions");
            if ((enumValue & NeuralStatName.TextChunkingFixedCharLengthExecutions) != 0)
                list.Add("text_chunking_fixed_char_length_executions");
            if ((enumValue & NeuralStatName.TextChunkingFixedCharLengthProcessors) != 0)
                list.Add("text_chunking_fixed_char_length_processors");
            if ((enumValue & NeuralStatName.TextChunkingFixedTokenLengthExecutions) != 0)
                list.Add("text_chunking_fixed_token_length_executions");
            if ((enumValue & NeuralStatName.TextChunkingFixedTokenLengthProcessors) != 0)
                list.Add("text_chunking_fixed_token_length_processors");
            if ((enumValue & NeuralStatName.TextChunkingProcessors) != 0)
                list.Add("text_chunking_processors");
            if ((enumValue & NeuralStatName.TextEmbeddingExecutions) != 0)
                list.Add("text_embedding_executions");
            if ((enumValue & NeuralStatName.TextEmbeddingProcessorsInPipelines) != 0)
                list.Add("text_embedding_processors_in_pipelines");
            if ((enumValue & NeuralStatName.TextImageEmbeddingExecutions) != 0)
                list.Add("text_image_embedding_executions");
            if ((enumValue & NeuralStatName.TextImageEmbeddingProcessors) != 0)
                list.Add("text_image_embedding_processors");
            return string.Join(",", list);
        }

        public static string GetStringValue(this NodesInfoMetric enumValue)
        {
            if ((enumValue & NodesInfoMetric.All) != 0)
                return "_all";
            var list = new List<string>();
            if ((enumValue & NodesInfoMetric.Aggregations) != 0)
                list.Add("aggregations");
            if ((enumValue & NodesInfoMetric.Http) != 0)
                list.Add("http");
            if ((enumValue & NodesInfoMetric.Indices) != 0)
                list.Add("indices");
            if ((enumValue & NodesInfoMetric.Ingest) != 0)
                list.Add("ingest");
            if ((enumValue & NodesInfoMetric.Jvm) != 0)
                list.Add("jvm");
            if ((enumValue & NodesInfoMetric.Os) != 0)
                list.Add("os");
            if ((enumValue & NodesInfoMetric.Plugins) != 0)
                list.Add("plugins");
            if ((enumValue & NodesInfoMetric.Process) != 0)
                list.Add("process");
            if ((enumValue & NodesInfoMetric.SearchPipelines) != 0)
                list.Add("search_pipelines");
            if ((enumValue & NodesInfoMetric.Settings) != 0)
                list.Add("settings");
            if ((enumValue & NodesInfoMetric.ThreadPool) != 0)
                list.Add("thread_pool");
            if ((enumValue & NodesInfoMetric.Transport) != 0)
                list.Add("transport");
            return string.Join(",", list);
        }

        public static string GetStringValue(this NodesSampleType enumValue) =>
            enumValue switch
            {
                NodesSampleType.Block => "block",
                NodesSampleType.Cpu => "cpu",
                NodesSampleType.Wait => "wait",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'NodesSampleType'"
                ),
            };

        public static string GetStringValue(this NodesStatsIndexMetric enumValue)
        {
            if ((enumValue & NodesStatsIndexMetric.All) != 0)
                return "_all";
            var list = new List<string>();
            if ((enumValue & NodesStatsIndexMetric.Completion) != 0)
                list.Add("completion");
            if ((enumValue & NodesStatsIndexMetric.Docs) != 0)
                list.Add("docs");
            if ((enumValue & NodesStatsIndexMetric.Fielddata) != 0)
                list.Add("fielddata");
            if ((enumValue & NodesStatsIndexMetric.Flush) != 0)
                list.Add("flush");
            if ((enumValue & NodesStatsIndexMetric.Get) != 0)
                list.Add("get");
            if ((enumValue & NodesStatsIndexMetric.Indexing) != 0)
                list.Add("indexing");
            if ((enumValue & NodesStatsIndexMetric.Merge) != 0)
                list.Add("merge");
            if ((enumValue & NodesStatsIndexMetric.QueryCache) != 0)
                list.Add("query_cache");
            if ((enumValue & NodesStatsIndexMetric.Recovery) != 0)
                list.Add("recovery");
            if ((enumValue & NodesStatsIndexMetric.Refresh) != 0)
                list.Add("refresh");
            if ((enumValue & NodesStatsIndexMetric.RequestCache) != 0)
                list.Add("request_cache");
            if ((enumValue & NodesStatsIndexMetric.Search) != 0)
                list.Add("search");
            if ((enumValue & NodesStatsIndexMetric.Segments) != 0)
                list.Add("segments");
            if ((enumValue & NodesStatsIndexMetric.Store) != 0)
                list.Add("store");
            if ((enumValue & NodesStatsIndexMetric.Suggest) != 0)
                list.Add("suggest");
            if ((enumValue & NodesStatsIndexMetric.Translog) != 0)
                list.Add("translog");
            if ((enumValue & NodesStatsIndexMetric.Warmer) != 0)
                list.Add("warmer");
            return string.Join(",", list);
        }

        public static string GetStringValue(this NodesStatsMetric enumValue)
        {
            if ((enumValue & NodesStatsMetric.All) != 0)
                return "_all";
            var list = new List<string>();
            if ((enumValue & NodesStatsMetric.AdaptiveSelection) != 0)
                list.Add("adaptive_selection");
            if ((enumValue & NodesStatsMetric.AdmissionControl) != 0)
                list.Add("admission_control");
            if ((enumValue & NodesStatsMetric.Breaker) != 0)
                list.Add("breaker");
            if ((enumValue & NodesStatsMetric.Caches) != 0)
                list.Add("caches");
            if ((enumValue & NodesStatsMetric.ClusterManagerThrottling) != 0)
                list.Add("cluster_manager_throttling");
            if ((enumValue & NodesStatsMetric.Discovery) != 0)
                list.Add("discovery");
            if ((enumValue & NodesStatsMetric.FileCache) != 0)
                list.Add("file_cache");
            if ((enumValue & NodesStatsMetric.Fs) != 0)
                list.Add("fs");
            if ((enumValue & NodesStatsMetric.Http) != 0)
                list.Add("http");
            if ((enumValue & NodesStatsMetric.IndexingPressure) != 0)
                list.Add("indexing_pressure");
            if ((enumValue & NodesStatsMetric.Indices) != 0)
                list.Add("indices");
            if ((enumValue & NodesStatsMetric.Ingest) != 0)
                list.Add("ingest");
            if ((enumValue & NodesStatsMetric.Jvm) != 0)
                list.Add("jvm");
            if ((enumValue & NodesStatsMetric.Os) != 0)
                list.Add("os");
            if ((enumValue & NodesStatsMetric.Process) != 0)
                list.Add("process");
            if ((enumValue & NodesStatsMetric.Repositories) != 0)
                list.Add("repositories");
            if ((enumValue & NodesStatsMetric.ResourceUsageStats) != 0)
                list.Add("resource_usage_stats");
            if ((enumValue & NodesStatsMetric.Script) != 0)
                list.Add("script");
            if ((enumValue & NodesStatsMetric.ScriptCache) != 0)
                list.Add("script_cache");
            if ((enumValue & NodesStatsMetric.SearchBackpressure) != 0)
                list.Add("search_backpressure");
            if ((enumValue & NodesStatsMetric.SearchPipeline) != 0)
                list.Add("search_pipeline");
            if ((enumValue & NodesStatsMetric.SegmentReplicationBackpressure) != 0)
                list.Add("segment_replication_backpressure");
            if ((enumValue & NodesStatsMetric.ShardIndexingPressure) != 0)
                list.Add("shard_indexing_pressure");
            if ((enumValue & NodesStatsMetric.TaskCancellation) != 0)
                list.Add("task_cancellation");
            if ((enumValue & NodesStatsMetric.ThreadPool) != 0)
                list.Add("thread_pool");
            if ((enumValue & NodesStatsMetric.Transport) != 0)
                list.Add("transport");
            if ((enumValue & NodesStatsMetric.WeightedRouting) != 0)
                list.Add("weighted_routing");
            return string.Join(",", list);
        }

        public static string GetStringValue(this NodesUsageMetric enumValue)
        {
            if ((enumValue & NodesUsageMetric.All) != 0)
                return "_all";
            var list = new List<string>();
            if ((enumValue & NodesUsageMetric.Aggregations) != 0)
                list.Add("aggregations");
            if ((enumValue & NodesUsageMetric.RestActions) != 0)
                list.Add("rest_actions");
            return string.Join(",", list);
        }

        public static string GetStringValue(this NotificationsNotificationConfigType enumValue) =>
            enumValue switch
            {
                NotificationsNotificationConfigType.Chime => "chime",
                NotificationsNotificationConfigType.Email => "email",
                NotificationsNotificationConfigType.EmailGroup => "email_group",
                NotificationsNotificationConfigType.MicrosoftTeams => "microsoft_teams",
                NotificationsNotificationConfigType.SesAccount => "ses_account",
                NotificationsNotificationConfigType.Slack => "slack",
                NotificationsNotificationConfigType.SmtpAccount => "smtp_account",
                NotificationsNotificationConfigType.Sns => "sns",
                NotificationsNotificationConfigType.Webhook => "webhook",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'NotificationsNotificationConfigType'"
                ),
            };

        public static string GetStringValue(this OpType enumValue) =>
            enumValue switch
            {
                OpType.Create => "create",
                OpType.Index => "index",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'OpType'"
                ),
            };

        public static string GetStringValue(this Refresh enumValue) =>
            enumValue switch
            {
                Refresh.False => "false",
                Refresh.True => "true",
                Refresh.WaitFor => "wait_for",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'Refresh'"
                ),
            };

        public static string GetStringValue(this SearchType enumValue) =>
            enumValue switch
            {
                SearchType.DfsQueryThenFetch => "dfs_query_then_fetch",
                SearchType.QueryThenFetch => "query_then_fetch",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'SearchType'"
                ),
            };

        public static string GetStringValue(
            this SecurityAnalyticsAlertsAlertSeverityLevel enumValue
        ) =>
            enumValue switch
            {
                SecurityAnalyticsAlertsAlertSeverityLevel.One => "1",
                SecurityAnalyticsAlertsAlertSeverityLevel.Two => "2",
                SecurityAnalyticsAlertsAlertSeverityLevel.Three => "3",
                SecurityAnalyticsAlertsAlertSeverityLevel.Four => "4",
                SecurityAnalyticsAlertsAlertSeverityLevel.Five => "5",
                SecurityAnalyticsAlertsAlertSeverityLevel.All => "ALL",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'SecurityAnalyticsAlertsAlertSeverityLevel'"
                ),
            };

        public static string GetStringValue(this SecurityAnalyticsAlertsAlertState enumValue) =>
            enumValue switch
            {
                SecurityAnalyticsAlertsAlertState.Acknowledged => "ACKNOWLEDGED",
                SecurityAnalyticsAlertsAlertState.Active => "ACTIVE",
                SecurityAnalyticsAlertsAlertState.Completed => "COMPLETED",
                SecurityAnalyticsAlertsAlertState.Deleted => "DELETED",
                SecurityAnalyticsAlertsAlertState.Error => "ERROR",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'SecurityAnalyticsAlertsAlertState'"
                ),
            };

        public static string GetStringValue(
            this SecurityAnalyticsFindingsDetectionType enumValue
        ) =>
            enumValue switch
            {
                SecurityAnalyticsFindingsDetectionType.Rule => "rule",
                SecurityAnalyticsFindingsDetectionType.Threat => "threat",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'SecurityAnalyticsFindingsDetectionType'"
                ),
            };

        public static string GetStringValue(this SecurityAnalyticsFindingsRuleSeverity enumValue) =>
            enumValue switch
            {
                SecurityAnalyticsFindingsRuleSeverity.Critical => "critical",
                SecurityAnalyticsFindingsRuleSeverity.High => "high",
                SecurityAnalyticsFindingsRuleSeverity.Low => "low",
                SecurityAnalyticsFindingsRuleSeverity.Medium => "medium",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'SecurityAnalyticsFindingsRuleSeverity'"
                ),
            };

        public static string GetStringValue(this SlicesCalculation enumValue) =>
            enumValue switch
            {
                SlicesCalculation.Auto => "auto",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'SlicesCalculation'"
                ),
            };

        public static string GetStringValue(this SortOrder enumValue) =>
            enumValue switch
            {
                SortOrder.Ascending => "asc",
                SortOrder.Descending => "desc",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'SortOrder'"
                ),
            };

        public static string GetStringValue(this SuggestMode enumValue) =>
            enumValue switch
            {
                SuggestMode.Always => "always",
                SuggestMode.Missing => "missing",
                SuggestMode.Popular => "popular",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'SuggestMode'"
                ),
            };

        public static string GetStringValue(this TasksGroupBy enumValue) =>
            enumValue switch
            {
                TasksGroupBy.Nodes => "nodes",
                TasksGroupBy.None => "none",
                TasksGroupBy.Parents => "parents",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'TasksGroupBy'"
                ),
            };

        public static string GetStringValue(this TimeUnit enumValue) =>
            enumValue switch
            {
                TimeUnit.Days => "d",
                TimeUnit.Hours => "h",
                TimeUnit.Minutes => "m",
                TimeUnit.Microseconds => "micros",
                TimeUnit.Milliseconds => "ms",
                TimeUnit.Nanoseconds => "nanos",
                TimeUnit.Seconds => "s",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'TimeUnit'"
                ),
            };

        public static string GetStringValue(this VersionType enumValue) =>
            enumValue switch
            {
                VersionType.External => "external",
                VersionType.ExternalGte => "external_gte",
                VersionType.Force => "force",
                VersionType.Internal => "internal",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'VersionType'"
                ),
            };

        public static string GetStringValue(this WaitForActiveShardOptions enumValue) =>
            enumValue switch
            {
                WaitForActiveShardOptions.All => "all",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'WaitForActiveShardOptions'"
                ),
            };

        public static string GetStringValue(this WaitForEvents enumValue) =>
            enumValue switch
            {
                WaitForEvents.High => "high",
                WaitForEvents.Immediate => "immediate",
                WaitForEvents.Languid => "languid",
                WaitForEvents.Low => "low",
                WaitForEvents.Normal => "normal",
                WaitForEvents.Urgent => "urgent",
                _ => throw new ArgumentException(
                    $"'{enumValue.ToString()}' is not a valid value for enum 'WaitForEvents'"
                ),
            };
    }
}
