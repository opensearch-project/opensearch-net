/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using OpenSearch.Net;
using static OpenSearch.Net.HttpMethod;

// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable once CheckNamespace
// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable RedundantExtendsListEntry
namespace OpenSearch.Net.Specification.KnnApi
{
    /// <summary>
    /// Knn APIs.
    /// <para>Not intended to be instantiated directly. Use the <see cref="IOpenSearchLowLevelClient.Knn"/> property
    /// on <see cref="IOpenSearchLowLevelClient"/>.
    /// </para>
    /// </summary>
    public partial class LowLevelKnnNamespace : NamespacedClientProxy
    {
        internal LowLevelKnnNamespace(OpenSearchLowLevelClient client)
            : base(client) { }

        /// <summary>DELETE on /_plugins/_knn/models/{model_id} <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#delete-model</para></summary>
        /// <param name="modelId">The id of the model.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DeleteModel<TResponse>(
            string modelId,
            DeleteModelRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_plugins/_knn/models/{modelId:modelId}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_knn/models/{model_id} <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#delete-model</para></summary>
        /// <param name="modelId">The id of the model.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("knn.delete_model", "model_id")]
        public Task<TResponse> DeleteModelAsync<TResponse>(
            string modelId,
            DeleteModelRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_plugins/_knn/models/{modelId:modelId}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_knn/models/{model_id} <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#get-model</para></summary>
        /// <param name="modelId">The id of the model.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetModel<TResponse>(
            string modelId,
            GetModelRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/_knn/models/{modelId:modelId}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_knn/models/{model_id} <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#get-model</para></summary>
        /// <param name="modelId">The id of the model.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("knn.get_model", "model_id")]
        public Task<TResponse> GetModelAsync<TResponse>(
            string modelId,
            GetModelRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/_knn/models/{modelId:modelId}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_knn/models/_search <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#search-model</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse SearchModels<TResponse>(
            PostData body,
            SearchModelsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_plugins/_knn/models/_search",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_knn/models/_search <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#search-model</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("knn.search_models", "body")]
        public Task<TResponse> SearchModelsAsync<TResponse>(
            PostData body,
            SearchModelsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_plugins/_knn/models/_search",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_knn/stats <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#stats</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse StatsForAll<TResponse>(StatsRequestParameters requestParameters = null)
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_knn/stats",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_knn/stats <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#stats</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("knn.stats", "")]
        public Task<TResponse> StatsForAllAsync<TResponse>(
            StatsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_knn/stats",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_knn/{node_id}/stats <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#stats</para></summary>
        /// <param name="nodeId">Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#x27;re connecting to, leave empty to get information from all nodes.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Stats<TResponse>(
            string nodeId,
            StatsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/_knn/{nodeId:nodeId}/stats"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_knn/{node_id}/stats <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#stats</para></summary>
        /// <param name="nodeId">Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#x27;re connecting to, leave empty to get information from all nodes.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("knn.stats", "node_id")]
        public Task<TResponse> StatsAsync<TResponse>(
            string nodeId,
            StatsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/_knn/{nodeId:nodeId}/stats"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_knn/{node_id}/stats/{stat} <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#stats</para></summary>
        /// <param name="nodeId">Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#x27;re connecting to, leave empty to get information from all nodes.</param>
        /// <param name="stat">Comma-separated list of stats to retrieve; use the special string `_all` or Indices.All to retrieve all stats.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Stats<TResponse>(
            string nodeId,
            string stat,
            StatsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/_knn/{nodeId:nodeId}/stats/{stat:stat}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_knn/{node_id}/stats/{stat} <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#stats</para></summary>
        /// <param name="nodeId">Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#x27;re connecting to, leave empty to get information from all nodes.</param>
        /// <param name="stat">Comma-separated list of stats to retrieve; use the special string `_all` or Indices.All to retrieve all stats.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("knn.stats", "node_id, stat")]
        public Task<TResponse> StatsAsync<TResponse>(
            string nodeId,
            string stat,
            StatsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/_knn/{nodeId:nodeId}/stats/{stat:stat}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_knn/stats/{stat} <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#stats</para></summary>
        /// <param name="stat">Comma-separated list of stats to retrieve; use the special string `_all` or Indices.All to retrieve all stats.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse StatsForAll<TResponse>(
            string stat,
            StatsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/_knn/stats/{stat:stat}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_knn/stats/{stat} <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#stats</para></summary>
        /// <param name="stat">Comma-separated list of stats to retrieve; use the special string `_all` or Indices.All to retrieve all stats.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("knn.stats", "stat")]
        public Task<TResponse> StatsForAllAsync<TResponse>(
            string stat,
            StatsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/_knn/stats/{stat:stat}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_knn/models/_train <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#train-model</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse TrainModel<TResponse>(
            PostData body,
            TrainModelRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_plugins/_knn/models/_train",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_knn/models/_train <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#train-model</para></summary>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("knn.train_model", "body")]
        public Task<TResponse> TrainModelAsync<TResponse>(
            PostData body,
            TrainModelRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_plugins/_knn/models/_train",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_knn/models/{model_id}/_train <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#train-model</para></summary>
        /// <param name="modelId">The id of the model.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse TrainModel<TResponse>(
            string modelId,
            PostData body,
            TrainModelRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"_plugins/_knn/models/{modelId:modelId}/_train"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_knn/models/{model_id}/_train <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#train-model</para></summary>
        /// <param name="modelId">The id of the model.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("knn.train_model", "model_id, body")]
        public Task<TResponse> TrainModelAsync<TResponse>(
            string modelId,
            PostData body,
            TrainModelRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"_plugins/_knn/models/{modelId:modelId}/_train"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_knn/warmup/{index} <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#warmup-operation</para></summary>
        /// <param name="index">Comma-separated list of indexes; use the special string `_all` or Indices.All to perform the operation on all indexes.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Warmup<TResponse>(
            string index,
            WarmupRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/_knn/warmup/{index:index}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_knn/warmup/{index} <para>https://opensearch.org/docs/latest/search-plugins/knn/api/#warmup-operation</para></summary>
        /// <param name="index">Comma-separated list of indexes; use the special string `_all` or Indices.All to perform the operation on all indexes.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("knn.warmup", "index")]
        public Task<TResponse> WarmupAsync<TResponse>(
            string index,
            WarmupRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/_knn/warmup/{index:index}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );
    }
}
