/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using OpenSearch.Net;
using static OpenSearch.Net.HttpMethod;

// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable once CheckNamespace
// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable RedundantExtendsListEntry
namespace OpenSearch.Net.Specification.QueryApi
{
    /// <summary>
    /// Query APIs.
    /// <para>Not intended to be instantiated directly. Use the <see cref="IOpenSearchLowLevelClient.Query"/> property
    /// on <see cref="IOpenSearchLowLevelClient"/>.
    /// </para>
    /// </summary>
    public partial class LowLevelQueryNamespace : NamespacedClientProxy
    {
        internal LowLevelQueryNamespace(OpenSearchLowLevelClient client)
            : base(client) { }

        /// <summary>DELETE on /_plugins/_query/_datasources/{datasource_name}</summary>
        /// <param name="datasourceName">The name of the data source to delete.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        public TResponse DatasourceDelete<TResponse>(
            string datasourceName,
            DatasourceDeleteRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_plugins/_query/_datasources/{datasourceName:datasourceName}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_plugins/_query/_datasources/{datasource_name}</summary>
        /// <param name="datasourceName">The name of the data source to delete.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        [MapsApi("query.datasource_delete", "datasource_name")]
        public Task<TResponse> DatasourceDeleteAsync<TResponse>(
            string datasourceName,
            DatasourceDeleteRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_plugins/_query/_datasources/{datasourceName:datasourceName}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_query/_datasources/{datasource_name}</summary>
        /// <param name="datasourceName">The name of the data source to retrieve.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        public TResponse DatasourceRetrieve<TResponse>(
            string datasourceName,
            DatasourceRetrieveRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_plugins/_query/_datasources/{datasourceName:datasourceName}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_query/_datasources/{datasource_name}</summary>
        /// <param name="datasourceName">The name of the data source to retrieve.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        [MapsApi("query.datasource_retrieve", "datasource_name")]
        public Task<TResponse> DatasourceRetrieveAsync<TResponse>(
            string datasourceName,
            DatasourceRetrieveRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_plugins/_query/_datasources/{datasourceName:datasourceName}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_query/_datasources</summary>
        /// <param name="body">The data source configuration to create.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        public TResponse DatasourcesCreate<TResponse>(
            PostData body,
            DatasourcesCreateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                "_plugins/_query/_datasources",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_plugins/_query/_datasources</summary>
        /// <param name="body">The data source configuration to create.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        [MapsApi("query.datasources_create", "body")]
        public Task<TResponse> DatasourcesCreateAsync<TResponse>(
            PostData body,
            DatasourcesCreateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_plugins/_query/_datasources",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_query/_datasources</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        public TResponse DatasourcesList<TResponse>(
            DatasourcesListRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                "_plugins/_query/_datasources",
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_plugins/_query/_datasources</summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        [MapsApi("query.datasources_list", "")]
        public Task<TResponse> DatasourcesListAsync<TResponse>(
            DatasourcesListRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_plugins/_query/_datasources",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_query/_datasources</summary>
        /// <param name="body">The updated data source configuration.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        public TResponse DatasourcesUpdate<TResponse>(
            PostData body,
            DatasourcesUpdateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                "_plugins/_query/_datasources",
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_plugins/_query/_datasources</summary>
        /// <param name="body">The updated data source configuration.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 2.7.0 or greater.</remarks>
        [MapsApi("query.datasources_update", "body")]
        public Task<TResponse> DatasourcesUpdateAsync<TResponse>(
            PostData body,
            DatasourcesUpdateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                "_plugins/_query/_datasources",
                ctx,
                body,
                RequestParams(requestParameters)
            );
    }
}
