/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using OpenSearch.Net;
using static OpenSearch.Net.HttpMethod;

// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable once CheckNamespace
// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable RedundantExtendsListEntry
namespace OpenSearch.Net.Specification.IngestionApi
{
    /// <summary>
    /// Ingestion APIs.
    /// <para>Not intended to be instantiated directly. Use the <see cref="IOpenSearchLowLevelClient.Ingestion"/> property
    /// on <see cref="IOpenSearchLowLevelClient"/>.
    /// </para>
    /// </summary>
    public partial class LowLevelIngestionNamespace : NamespacedClientProxy
    {
        internal LowLevelIngestionNamespace(OpenSearchLowLevelClient client)
            : base(client) { }

        /// <summary>GET on /{index}/ingestion/_state <para>https://docs.opensearch.org/docs/latest/api-reference/document-apis/pull-based-ingestion-management/</para></summary>
        /// <param name="index">Index for which ingestion state should be retrieved.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse GetState<TResponse>(
            string index,
            GetStateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"{index:index}/ingestion/_state"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /{index}/ingestion/_state <para>https://docs.opensearch.org/docs/latest/api-reference/document-apis/pull-based-ingestion-management/</para></summary>
        /// <param name="index">Index for which ingestion state should be retrieved.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("ingestion.get_state", "index")]
        public Task<TResponse> GetStateAsync<TResponse>(
            string index,
            GetStateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"{index:index}/ingestion/_state"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/ingestion/_pause <para>https://docs.opensearch.org/docs/latest/api-reference/document-apis/pull-based-ingestion-management/</para></summary>
        /// <param name="index">Index for which ingestion should be paused.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse Pause<TResponse>(
            string index,
            PauseRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/ingestion/_pause"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/ingestion/_pause <para>https://docs.opensearch.org/docs/latest/api-reference/document-apis/pull-based-ingestion-management/</para></summary>
        /// <param name="index">Index for which ingestion should be paused.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("ingestion.pause", "index")]
        public Task<TResponse> PauseAsync<TResponse>(
            string index,
            PauseRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/ingestion/_pause"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/ingestion/_resume <para>https://docs.opensearch.org/docs/latest/api-reference/document-apis/pull-based-ingestion-management/</para></summary>
        /// <param name="index">Index for which ingestion should be resumed.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        public TResponse Resume<TResponse>(
            string index,
            PostData body,
            ResumeRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/ingestion/_resume"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/ingestion/_resume <para>https://docs.opensearch.org/docs/latest/api-reference/document-apis/pull-based-ingestion-management/</para></summary>
        /// <param name="index">Index for which ingestion should be resumed.</param>
        /// <param name="body"></param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        /// <remarks>Supported by OpenSearch servers of version 3.1.0 or greater.</remarks>
        [MapsApi("ingestion.resume", "index, body")]
        public Task<TResponse> ResumeAsync<TResponse>(
            string index,
            PostData body,
            ResumeRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/ingestion/_resume"),
                ctx,
                body,
                RequestParams(requestParameters)
            );
    }
}
