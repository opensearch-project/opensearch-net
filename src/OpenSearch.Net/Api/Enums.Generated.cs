/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗  
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝  
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//  
// This file is automatically generated 
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;
using System.Text;
using System.Reflection;
using System.Runtime.Serialization;

namespace OpenSearch.Net;
public static partial class KnownEnums
{
	private static readonly ConcurrentDictionary<Type, Func<Enum, string>> EnumStringResolvers = new ConcurrentDictionary<Type, Func<Enum, string>>();
	static partial void InitializeStringResolvers()
	{
	}

	private class EnumDictionary : Dictionary<Enum, string>
	{
		public EnumDictionary(int capacity) : base(capacity)
		{
		}

		public Func<Enum, string> Resolver { get; set; }
	}

	public static string GetStringValue(this Enum e)
	{
		var type = e.GetType();
		var resolver = EnumStringResolvers.GetOrAdd(type, GetEnumStringResolver);
		return resolver(e);
	}

	private static Func<Enum, string> GetEnumStringResolver(Type type)
	{
		var values = Enum.GetValues(type);
		var dictionary = new EnumDictionary(values.Length);
		for (int index = 0; index < values.Length; index++)
		{
			var value = values.GetValue(index);
			var info = type.GetField(value.ToString());
			var da = (EnumMemberAttribute[])info.GetCustomAttributes(typeof(EnumMemberAttribute), false);
			var stringValue = da.Length > 0 ? da[0].Value : Enum.GetName(type, value);
			dictionary.Add((Enum)value, stringValue);
		}

		var isFlag = type.GetCustomAttributes(typeof(FlagsAttribute), false).Length > 0;
		return (e) =>
		{
			if (isFlag)
			{
				var list = new List<string>();
				foreach (var kv in dictionary)
				{
					if (e.HasFlag(kv.Key))
						list.Add(kv.Value);
				}

				return string.Join(",", list);
			}
			else
			{
				return dictionary[e];
			}
		};
	}
}