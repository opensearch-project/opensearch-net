/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
* 	http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
// 		*NIX 		:	./build.sh codegen
// 		Windows 	:	build.bat codegen
//
// -----------------------------------------------
namespace OpenSearch.Client;

internal static partial class ApiUrlsLookups
{
    internal static ApiUrls NoNamespaceBulk = new ApiUrls(new[] { "_bulk", "{index}/_bulk" });
    internal static ApiUrls NoNamespaceClearScroll = new ApiUrls(new[] { "_search/scroll" });
    internal static ApiUrls NoNamespaceCount = new ApiUrls(new[] { "_count", "{index}/_count" });
    internal static ApiUrls NoNamespaceCreate = new ApiUrls(new[] { "{index}/_create/{id}" });
    internal static ApiUrls NoNamespaceDelete = new ApiUrls(new[] { "{index}/_doc/{id}" });
    internal static ApiUrls NoNamespaceDeleteByQuery = new ApiUrls(new[] { "{index}/_delete_by_query" });
    internal static ApiUrls NoNamespaceDeleteByQueryRethrottle = new ApiUrls(new[] { "_delete_by_query/{task_id}/_rethrottle" });
    internal static ApiUrls NoNamespaceDeleteScript = new ApiUrls(new[] { "_scripts/{id}" });
    internal static ApiUrls NoNamespaceDocumentExists = new ApiUrls(new[] { "{index}/_doc/{id}" });
    internal static ApiUrls NoNamespaceSourceExists = new ApiUrls(new[] { "{index}/_source/{id}" });
    internal static ApiUrls NoNamespaceExplain = new ApiUrls(new[] { "{index}/_explain/{id}" });
    internal static ApiUrls NoNamespaceFieldCapabilities = new ApiUrls(new[] { "_field_caps", "{index}/_field_caps" });
    internal static ApiUrls NoNamespaceGet = new ApiUrls(new[] { "{index}/_doc/{id}" });
    internal static ApiUrls NoNamespaceGetScript = new ApiUrls(new[] { "_scripts/{id}" });
    internal static ApiUrls NoNamespaceSource = new ApiUrls(new[] { "{index}/_source/{id}" });
    internal static ApiUrls NoNamespaceIndex = new ApiUrls(new[] { "{index}/_doc/{id}", "{index}/_doc" });
    internal static ApiUrls IndicesAddBlock = new ApiUrls(new[] { "{index}/_block/{block}" });
    internal static ApiUrls IndicesAnalyze = new ApiUrls(new[] { "_analyze", "{index}/_analyze" });
    internal static ApiUrls IndicesClearCache = new ApiUrls(new[] { "_cache/clear", "{index}/_cache/clear" });
    internal static ApiUrls IndicesClone = new ApiUrls(new[] { "{index}/_clone/{target}" });
    internal static ApiUrls IndicesClose = new ApiUrls(new[] { "{index}/_close" });
    internal static ApiUrls IndicesCreate = new ApiUrls(new[] { "{index}" });
    internal static ApiUrls IndicesDelete = new ApiUrls(new[] { "{index}" });
    internal static ApiUrls IndicesDeleteAlias = new ApiUrls(new[] { "{index}/_alias/{name}" });
    internal static ApiUrls IndicesDeleteTemplate = new ApiUrls(new[] { "_template/{name}" });
    internal static ApiUrls IndicesExists = new ApiUrls(new[] { "{index}" });
    internal static ApiUrls IndicesAliasExists = new ApiUrls(new[] { "_alias/{name}", "{index}/_alias/{name}" });
    internal static ApiUrls IndicesTemplateExists = new ApiUrls(new[] { "_template/{name}" });
    ///<remarks>Deprecated as of OpenSearch 2.0</remarks>
    internal static ApiUrls IndicesTypeExists = new ApiUrls(new[] { "{index}/_mapping/{type}" });
    internal static ApiUrls IndicesFlush = new ApiUrls(new[] { "_flush", "{index}/_flush" });
    internal static ApiUrls IndicesForceMerge = new ApiUrls(new[] { "_forcemerge", "{index}/_forcemerge" });
    internal static ApiUrls IndicesGet = new ApiUrls(new[] { "{index}" });
    internal static ApiUrls IndicesGetAlias = new ApiUrls(new[] { "_alias", "_alias/{name}", "{index}/_alias/{name}", "{index}/_alias" });
    internal static ApiUrls IndicesGetFieldMapping = new ApiUrls(new[] { "_mapping/field/{fields}", "{index}/_mapping/field/{fields}" });
    internal static ApiUrls IndicesGetMapping = new ApiUrls(new[] { "_mapping", "{index}/_mapping" });
    internal static ApiUrls IndicesGetSettings = new ApiUrls(new[] { "_settings", "{index}/_settings", "{index}/_settings/{name}", "_settings/{name}" });
    internal static ApiUrls IndicesGetTemplate = new ApiUrls(new[] { "_template", "_template/{name}" });
    internal static ApiUrls IndicesOpen = new ApiUrls(new[] { "{index}/_open" });
    internal static ApiUrls IndicesPutAlias = new ApiUrls(new[] { "{index}/_alias/{name}" });
    internal static ApiUrls IndicesPutMapping = new ApiUrls(new[] { "{index}/_mapping" });
    internal static ApiUrls IndicesUpdateSettings = new ApiUrls(new[] { "_settings", "{index}/_settings" });
    internal static ApiUrls IndicesPutTemplate = new ApiUrls(new[] { "_template/{name}" });
    internal static ApiUrls IndicesRecoveryStatus = new ApiUrls(new[] { "_recovery", "{index}/_recovery" });
    internal static ApiUrls IndicesRefresh = new ApiUrls(new[] { "_refresh", "{index}/_refresh" });
    internal static ApiUrls IndicesResolve = new ApiUrls(new[] { "_resolve/index/{name}" });
    internal static ApiUrls IndicesRollover = new ApiUrls(new[] { "{alias}/_rollover", "{alias}/_rollover/{new_index}" });
    internal static ApiUrls IndicesSegments = new ApiUrls(new[] { "_segments", "{index}/_segments" });
    internal static ApiUrls IndicesShardStores = new ApiUrls(new[] { "_shard_stores", "{index}/_shard_stores" });
    internal static ApiUrls IndicesShrink = new ApiUrls(new[] { "{index}/_shrink/{target}" });
    internal static ApiUrls IndicesSplit = new ApiUrls(new[] { "{index}/_split/{target}" });
    internal static ApiUrls IndicesStats = new ApiUrls(new[] { "_stats", "_stats/{metric}", "{index}/_stats", "{index}/_stats/{metric}" });
    internal static ApiUrls IndicesBulkAlias = new ApiUrls(new[] { "_aliases" });
    internal static ApiUrls IndicesValidateQuery = new ApiUrls(new[] { "_validate/query", "{index}/_validate/query" });
    internal static ApiUrls NoNamespaceRootNodeInfo = new ApiUrls(new[] { "" });
    internal static ApiUrls NoNamespaceMultiGet = new ApiUrls(new[] { "_mget", "{index}/_mget" });
    internal static ApiUrls NoNamespaceMultiSearch = new ApiUrls(new[] { "_msearch", "{index}/_msearch" });
    internal static ApiUrls NoNamespaceMultiSearchTemplate = new ApiUrls(new[] { "_msearch/template", "{index}/_msearch/template" });
    internal static ApiUrls NoNamespaceMultiTermVectors = new ApiUrls(new[] { "_mtermvectors", "{index}/_mtermvectors" });
    internal static ApiUrls NoNamespacePing = new ApiUrls(new[] { "" });
    internal static ApiUrls NoNamespacePutScript = new ApiUrls(new[] { "_scripts/{id}", "_scripts/{id}/{context}" });
    internal static ApiUrls NoNamespaceReindexOnServer = new ApiUrls(new[] { "_reindex" });
    internal static ApiUrls NoNamespaceReindexRethrottle = new ApiUrls(new[] { "_reindex/{task_id}/_rethrottle" });
    internal static ApiUrls NoNamespaceRenderSearchTemplate = new ApiUrls(new[] { "_render/template", "_render/template/{id}" });
    internal static ApiUrls NoNamespaceExecutePainlessScript = new ApiUrls(new[] { "_scripts/painless/_execute" });
    internal static ApiUrls NoNamespaceScroll = new ApiUrls(new[] { "_search/scroll" });
    internal static ApiUrls NoNamespaceSearch = new ApiUrls(new[] { "_search", "{index}/_search" });
    internal static ApiUrls NoNamespaceSearchShards = new ApiUrls(new[] { "_search_shards", "{index}/_search_shards" });
    internal static ApiUrls NoNamespaceSearchTemplate = new ApiUrls(new[] { "_search/template", "{index}/_search/template" });
    internal static ApiUrls NoNamespaceTermVectors = new ApiUrls(new[] { "{index}/_termvectors/{id}", "{index}/_termvectors" });
    internal static ApiUrls NoNamespaceUpdate = new ApiUrls(new[] { "{index}/_update/{id}" });
    internal static ApiUrls NoNamespaceUpdateByQuery = new ApiUrls(new[] { "{index}/_update_by_query" });
    internal static ApiUrls NoNamespaceUpdateByQueryRethrottle = new ApiUrls(new[] { "_update_by_query/{task_id}/_rethrottle" });
}
