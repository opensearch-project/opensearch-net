/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
* 	http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
// 		*NIX 		:	./build.sh codegen
// 		Windows 	:	build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Threading;
using System.Threading.Tasks;
using OpenSearch.Net.Specification.IndicesApi;

// ReSharper disable once CheckNamespace
// ReSharper disable RedundantTypeArgumentsOfMethod
namespace OpenSearch.Client.Specification.IndicesApi
{
    public partial interface IIndicesNamespace
    {
        /// <summary>
        /// <c>HEAD</c> request to the <c>indices.exists_type</c> API, read more about this API online:
        /// <para></para>
        /// <a href = "https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/">https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/</a>
        /// </summary>
        /// <remarks>Deprecated as of OpenSearch 2.0</remarks>
        ExistsResponse TypeExists(
            Indices index,
            Names type,
            Func<TypeExistsDescriptor, ITypeExistsRequest> selector = null
        );

        /// <summary>
        /// <c>HEAD</c> request to the <c>indices.exists_type</c> API, read more about this API online:
        /// <para></para>
        /// <a href = "https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/">https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/</a>
        /// </summary>
        /// <remarks>Deprecated as of OpenSearch 2.0</remarks>
        Task<ExistsResponse> TypeExistsAsync(
            Indices index,
            Names type,
            Func<TypeExistsDescriptor, ITypeExistsRequest> selector = null,
            CancellationToken ct = default
        );

        /// <summary>
        /// <c>HEAD</c> request to the <c>indices.exists_type</c> API, read more about this API online:
        /// <para></para>
        /// <a href = "https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/">https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/</a>
        /// </summary>
        /// <remarks>Deprecated as of OpenSearch 2.0</remarks>
        ExistsResponse TypeExists(ITypeExistsRequest request);

        /// <summary>
        /// <c>HEAD</c> request to the <c>indices.exists_type</c> API, read more about this API online:
        /// <para></para>
        /// <a href = "https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/">https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/</a>
        /// </summary>
        /// <remarks>Deprecated as of OpenSearch 2.0</remarks>
        Task<ExistsResponse> TypeExistsAsync(
            ITypeExistsRequest request,
            CancellationToken ct = default
        );

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.put_alias</c> API, read more about this API online:
        /// <para></para>
        /// <a href = "https://opensearch.org/docs/latest/opensearch/rest-api/alias/">https://opensearch.org/docs/latest/opensearch/rest-api/alias/</a>
        /// </summary>
        PutAliasResponse PutAlias(
            Indices index,
            Name name,
            Func<PutAliasDescriptor, IPutAliasRequest> selector = null
        );

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.put_alias</c> API, read more about this API online:
        /// <para></para>
        /// <a href = "https://opensearch.org/docs/latest/opensearch/rest-api/alias/">https://opensearch.org/docs/latest/opensearch/rest-api/alias/</a>
        /// </summary>
        Task<PutAliasResponse> PutAliasAsync(
            Indices index,
            Name name,
            Func<PutAliasDescriptor, IPutAliasRequest> selector = null,
            CancellationToken ct = default
        );
    }

    public partial class IndicesNamespace
    {
        /// <summary>
        /// <c>HEAD</c> request to the <c>indices.exists_type</c> API, read more about this API online:
        /// <para></para>
        /// <a href = "https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/">https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/</a>
        /// </summary>
        /// <remarks>Deprecated as of OpenSearch 2.0</remarks>
        public ExistsResponse TypeExists(
            Indices index,
            Names type,
            Func<TypeExistsDescriptor, ITypeExistsRequest> selector = null
        ) =>
            TypeExists(
                selector.InvokeOrDefault(new TypeExistsDescriptor(index: index, type: type))
            );

        /// <summary>
        /// <c>HEAD</c> request to the <c>indices.exists_type</c> API, read more about this API online:
        /// <para></para>
        /// <a href = "https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/">https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/</a>
        /// </summary>
        /// <remarks>Deprecated as of OpenSearch 2.0</remarks>
        public Task<ExistsResponse> TypeExistsAsync(
            Indices index,
            Names type,
            Func<TypeExistsDescriptor, ITypeExistsRequest> selector = null,
            CancellationToken ct = default
        ) =>
            TypeExistsAsync(
                selector.InvokeOrDefault(new TypeExistsDescriptor(index: index, type: type)),
                ct
            );

        /// <summary>
        /// <c>HEAD</c> request to the <c>indices.exists_type</c> API, read more about this API online:
        /// <para></para>
        /// <a href = "https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/">https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/</a>
        /// </summary>
        /// <remarks>Deprecated as of OpenSearch 2.0</remarks>
        public ExistsResponse TypeExists(ITypeExistsRequest request) =>
            DoRequest<ITypeExistsRequest, ExistsResponse>(request, request.RequestParameters);

        /// <summary>
        /// <c>HEAD</c> request to the <c>indices.exists_type</c> API, read more about this API online:
        /// <para></para>
        /// <a href = "https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/">https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/</a>
        /// </summary>
        /// <remarks>Deprecated as of OpenSearch 2.0</remarks>
        public Task<ExistsResponse> TypeExistsAsync(
            ITypeExistsRequest request,
            CancellationToken ct = default
        ) =>
            DoRequestAsync<ITypeExistsRequest, ExistsResponse>(
                request,
                request.RequestParameters,
                ct
            );

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.put_alias</c> API, read more about this API online:
        /// <para></para>
        /// <a href = "https://opensearch.org/docs/latest/opensearch/rest-api/alias/">https://opensearch.org/docs/latest/opensearch/rest-api/alias/</a>
        /// </summary>
        public PutAliasResponse PutAlias(
            Indices index,
            Name name,
            Func<PutAliasDescriptor, IPutAliasRequest> selector = null
        ) => PutAlias(selector.InvokeOrDefault(new PutAliasDescriptor(index: index, name: name)));

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.put_alias</c> API, read more about this API online:
        /// <para></para>
        /// <a href = "https://opensearch.org/docs/latest/opensearch/rest-api/alias/">https://opensearch.org/docs/latest/opensearch/rest-api/alias/</a>
        /// </summary>
        public Task<PutAliasResponse> PutAliasAsync(
            Indices index,
            Name name,
            Func<PutAliasDescriptor, IPutAliasRequest> selector = null,
            CancellationToken ct = default
        ) =>
            PutAliasAsync(
                selector.InvokeOrDefault(new PutAliasDescriptor(index: index, name: name)),
                ct
            );
    }
}
