/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;

using OpenSearch.Net;
using OpenSearch.Net.Utf8Json;
using OpenSearch.Net.Specification.NodesApi;

// ReSharper disable RedundantBaseConstructorCall
// ReSharper disable UnusedTypeParameter
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
namespace OpenSearch.Client.Specification.NodesApi
{
    ///<summary>Descriptor for HotThreads <para>https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-hot-threads/</para></summary>
    public partial class NodesHotThreadsDescriptor
        : RequestDescriptorBase<
            NodesHotThreadsDescriptor,
            NodesHotThreadsRequestParameters,
            INodesHotThreadsRequest
        >,
            INodesHotThreadsRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NodesHotThreads;

        ///<summary>/_nodes/hot_threads</summary>
        public NodesHotThreadsDescriptor()
            : base() { }

        ///<summary>/_nodes/{node_id}/hot_threads</summary>
        ///<param name="nodeId">Optional, accepts null</param>
        public NodesHotThreadsDescriptor(NodeIds nodeId)
            : base(r => r.Optional("node_id", nodeId)) { }

        // values part of the url path
        NodeIds INodesHotThreadsRequest.NodeId => Self.RouteValues.Get<NodeIds>("node_id");

        ///<summary>Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.</summary>
        public NodesHotThreadsDescriptor NodeId(NodeIds nodeId) =>
            Assign(nodeId, (a, v) => a.RouteValues.Optional("node_id", v));

        // Request parameters
        ///<summary>Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.</summary>
        public NodesHotThreadsDescriptor IgnoreIdleThreads(bool? ignoreidlethreads = true) =>
            Qs("ignore_idle_threads", ignoreidlethreads);

        ///<summary>The interval for the second sampling of threads.</summary>
        public NodesHotThreadsDescriptor Interval(Time interval) => Qs("interval", interval);

        ///<summary>The type to sample.</summary>
        public NodesHotThreadsDescriptor SampleType(SampleType? sampletype) =>
            Qs("type", sampletype);

        ///<summary>Number of samples of thread stacktrace.</summary>
        public NodesHotThreadsDescriptor Snapshots(long? snapshots) => Qs("snapshots", snapshots);

        ///<summary>Specify the number of threads to provide information for.</summary>
        public NodesHotThreadsDescriptor Threads(long? threads) => Qs("threads", threads);

        ///<summary>Operation timeout.</summary>
        public NodesHotThreadsDescriptor Timeout(Time timeout) => Qs("timeout", timeout);
    }

    ///<summary>Descriptor for Info <para>https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-info/</para></summary>
    public partial class NodesInfoDescriptor
        : RequestDescriptorBase<NodesInfoDescriptor, NodesInfoRequestParameters, INodesInfoRequest>,
            INodesInfoRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NodesInfo;

        ///<summary>/_nodes</summary>
        public NodesInfoDescriptor()
            : base() { }

        ///<summary>/_nodes/{node_id}</summary>
        ///<param name="nodeId">Optional, accepts null</param>
        public NodesInfoDescriptor(NodeIds nodeId)
            : base(r => r.Optional("node_id", nodeId)) { }

        ///<summary>/_nodes/{metric}</summary>
        ///<param name="metric">Optional, accepts null</param>
        public NodesInfoDescriptor(Metrics metric)
            : base(r => r.Optional("metric", metric)) { }

        ///<summary>/_nodes/{node_id}/{metric}</summary>
        ///<param name="nodeId">Optional, accepts null</param>
        ///<param name="metric">Optional, accepts null</param>
        public NodesInfoDescriptor(NodeIds nodeId, Metrics metric)
            : base(r => r.Optional("node_id", nodeId).Optional("metric", metric)) { }

        // values part of the url path
        NodeIds INodesInfoRequest.NodeId => Self.RouteValues.Get<NodeIds>("node_id");
        Metrics INodesInfoRequest.Metric => Self.RouteValues.Get<Metrics>("metric");

        ///<summary>Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.</summary>
        public NodesInfoDescriptor NodeId(NodeIds nodeId) =>
            Assign(nodeId, (a, v) => a.RouteValues.Optional("node_id", v));

        ///<summary>Comma-separated list of metrics you wish returned. Leave empty to return all.</summary>
        public NodesInfoDescriptor Metric(Metrics metric) =>
            Assign(metric, (a, v) => a.RouteValues.Optional("metric", v));

        // Request parameters
        ///<summary>Return settings in flat format.</summary>
        public NodesInfoDescriptor FlatSettings(bool? flatsettings = true) =>
            Qs("flat_settings", flatsettings);

        ///<summary>Operation timeout.</summary>
        public NodesInfoDescriptor Timeout(Time timeout) => Qs("timeout", timeout);
    }
}
