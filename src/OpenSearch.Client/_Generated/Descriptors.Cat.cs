/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using OpenSearch.Net;
using OpenSearch.Net.Specification.CatApi;
using OpenSearch.Net.Utf8Json;

// ReSharper disable RedundantBaseConstructorCall
// ReSharper disable UnusedTypeParameter
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
namespace OpenSearch.Client
{
    /// <summary>Descriptor for Aliases <para>https://opensearch.org/docs/latest/api-reference/cat/cat-aliases/</para></summary>
    public partial class CatAliasesDescriptor
        : RequestDescriptorBase<
            CatAliasesDescriptor,
            CatAliasesRequestParameters,
            ICatAliasesRequest
        >,
            ICatAliasesRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatAliases;

        /// <summary>/_cat/aliases</summary>
        public CatAliasesDescriptor()
            : base() { }

        /// <summary>/_cat/aliases/{name}</summary>
        /// <param name="name">Optional, accepts null</param>
        public CatAliasesDescriptor(Names name)
            : base(r => r.Optional("name", name)) { }

        // values part of the url path
        Names ICatAliasesRequest.Name => Self.RouteValues.Get<Names>("name");

        /// <summary>Comma-separated list of alias names.</summary>
        public CatAliasesDescriptor Name(Names name) =>
            Assign(name, (a, v) => a.RouteValues.Optional("name", v));

        // Request parameters
        /// <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        public CatAliasesDescriptor ExpandWildcards(ExpandWildcards? expandwildcards) =>
            Qs("expand_wildcards", expandwildcards);

        /// <summary>A short version of the Accept header, e.g. json, yaml.</summary>
        public CatAliasesDescriptor Format(string format) => Qs("format", format);

        /// <summary>Comma-separated list of column names to display.</summary>
        public CatAliasesDescriptor Headers(params string[] headers) => Qs("h", headers);

        /// <summary>Return help information.</summary>
        public CatAliasesDescriptor Help(bool? help = true) => Qs("help", help);

        /// <summary>Return local information, do not retrieve the state from cluster-manager node.</summary>
        public CatAliasesDescriptor Local(bool? local = true) => Qs("local", local);

        /// <summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatAliasesDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);

        /// <summary>Verbose mode. Display column headers.</summary>
        public CatAliasesDescriptor Verbose(bool? verbose = true) => Qs("v", verbose);
    }

    ///<summary>Descriptor for Allocation <para>https://opensearch.org/docs/latest/api-reference/cat/cat-allocation/</para></summary>
    public partial class CatAllocationDescriptor
        : RequestDescriptorBase<
            CatAllocationDescriptor,
            CatAllocationRequestParameters,
            ICatAllocationRequest
        >,
            ICatAllocationRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatAllocation;

        ///<summary>/_cat/allocation</summary>
        public CatAllocationDescriptor()
            : base() { }

        ///<summary>/_cat/allocation/{node_id}</summary>
        ///<param name="nodeId">Optional, accepts null</param>
        public CatAllocationDescriptor(NodeIds nodeId)
            : base(r => r.Optional("node_id", nodeId)) { }

        // values part of the url path
        NodeIds ICatAllocationRequest.NodeId => Self.RouteValues.Get<NodeIds>("node_id");

        ///<summary>Comma-separated list of node IDs or names to limit the returned information.</summary>
        public CatAllocationDescriptor NodeId(NodeIds nodeId) =>
            Assign(nodeId, (a, v) => a.RouteValues.Optional("node_id", v));

        // Request parameters
        ///<summary>The unit in which to display byte values.</summary>
        public CatAllocationDescriptor Bytes(Bytes? bytes) => Qs("bytes", bytes);

        ///<summary>Operation timeout for connection to cluster-manager node.</summary>
        ///<remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public CatAllocationDescriptor ClusterManagerTimeout(Time clustermanagertimeout) =>
            Qs("cluster_manager_timeout", clustermanagertimeout);

        ///<summary>A short version of the Accept header, e.g. json, yaml.</summary>
        public CatAllocationDescriptor Format(string format) => Qs("format", format);

        ///<summary>Comma-separated list of column names to display.</summary>
        public CatAllocationDescriptor Headers(params string[] headers) => Qs("h", headers);

        ///<summary>Return help information.</summary>
        public CatAllocationDescriptor Help(bool? help = true) => Qs("help", help);

        ///<summary>Return local information, do not retrieve the state from cluster-manager node.</summary>
        public CatAllocationDescriptor Local(bool? local = true) => Qs("local", local);

        ///<summary>Operation timeout for connection to master node.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public CatAllocationDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);

        ///<summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatAllocationDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);

        ///<summary>Verbose mode. Display column headers.</summary>
        public CatAllocationDescriptor Verbose(bool? verbose = true) => Qs("v", verbose);
    }

    ///<summary>Descriptor for Count <para>https://opensearch.org/docs/latest/api-reference/cat/cat-count/</para></summary>
    public partial class CatCountDescriptor
        : RequestDescriptorBase<CatCountDescriptor, CatCountRequestParameters, ICatCountRequest>,
            ICatCountRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatCount;

        ///<summary>/_cat/count</summary>
        public CatCountDescriptor()
            : base() { }

        ///<summary>/_cat/count/{index}</summary>
        ///<param name="index">Optional, accepts null</param>
        public CatCountDescriptor(Indices index)
            : base(r => r.Optional("index", index)) { }

        // values part of the url path
        Indices ICatCountRequest.Index => Self.RouteValues.Get<Indices>("index");

        ///<summary>Comma-separated list of indices to limit the returned information.</summary>
        public CatCountDescriptor Index(Indices index) =>
            Assign(index, (a, v) => a.RouteValues.Optional("index", v));

        ///<summary>a shortcut into calling Index(typeof(TOther))</summary>
        public CatCountDescriptor Index<TOther>()
            where TOther : class =>
            Assign(typeof(TOther), (a, v) => a.RouteValues.Optional("index", (Indices)v));

        ///<summary>A shortcut into calling Index(Indices.All)</summary>
        public CatCountDescriptor AllIndices() => Index(Indices.All);

        // Request parameters
        ///<summary>A short version of the Accept header, e.g. json, yaml.</summary>
        public CatCountDescriptor Format(string format) => Qs("format", format);

        ///<summary>Comma-separated list of column names to display.</summary>
        public CatCountDescriptor Headers(params string[] headers) => Qs("h", headers);

        ///<summary>Return help information.</summary>
        public CatCountDescriptor Help(bool? help = true) => Qs("help", help);

        ///<summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatCountDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);

        ///<summary>Verbose mode. Display column headers.</summary>
        public CatCountDescriptor Verbose(bool? verbose = true) => Qs("v", verbose);
    }
}
