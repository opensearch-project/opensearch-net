/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using OpenSearch.Net;
using OpenSearch.Net.Specification.CatApi;
using OpenSearch.Net.Utf8Json;

// ReSharper disable RedundantBaseConstructorCall
// ReSharper disable UnusedTypeParameter
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
namespace OpenSearch.Client
{
    /// <summary>Descriptor for Aliases <para>https://opensearch.org/docs/latest/api-reference/cat/cat-aliases/</para></summary>
    public partial class CatAliasesDescriptor
        : RequestDescriptorBase<
            CatAliasesDescriptor,
            CatAliasesRequestParameters,
            ICatAliasesRequest
        >,
            ICatAliasesRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatAliases;

        /// <summary>/_cat/aliases</summary>
        public CatAliasesDescriptor()
            : base() { }

        /// <summary>/_cat/aliases/{name}</summary>
        /// <param name="name">Optional, accepts null</param>
        public CatAliasesDescriptor(Names name)
            : base(r => r.Optional("name", name)) { }

        // values part of the url path
        Names ICatAliasesRequest.Name => Self.RouteValues.Get<Names>("name");

        /// <summary>Comma-separated list of alias names.</summary>
        public CatAliasesDescriptor Name(Names name) =>
            Assign(name, (a, v) => a.RouteValues.Optional("name", v));

        // Request parameters
        /// <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        public CatAliasesDescriptor ExpandWildcards(ExpandWildcards? expandwildcards) =>
            Qs("expand_wildcards", expandwildcards);

        /// <summary>A short version of the Accept header, e.g. json, yaml.</summary>
        public CatAliasesDescriptor Format(string format) => Qs("format", format);

        /// <summary>Comma-separated list of column names to display.</summary>
        public CatAliasesDescriptor Headers(params string[] headers) => Qs("h", headers);

        /// <summary>Return help information.</summary>
        public CatAliasesDescriptor Help(bool? help = true) => Qs("help", help);

        /// <summary>Return local information, do not retrieve the state from cluster-manager node.</summary>
        public CatAliasesDescriptor Local(bool? local = true) => Qs("local", local);

        /// <summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatAliasesDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);

        /// <summary>Verbose mode. Display column headers.</summary>
        public CatAliasesDescriptor Verbose(bool? verbose = true) => Qs("v", verbose);
    }

    /// <summary>Descriptor for Allocation <para>https://opensearch.org/docs/latest/api-reference/cat/cat-allocation/</para></summary>
    public partial class CatAllocationDescriptor
        : RequestDescriptorBase<
            CatAllocationDescriptor,
            CatAllocationRequestParameters,
            ICatAllocationRequest
        >,
            ICatAllocationRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatAllocation;

        /// <summary>/_cat/allocation</summary>
        public CatAllocationDescriptor()
            : base() { }

        /// <summary>/_cat/allocation/{node_id}</summary>
        /// <param name="nodeId">Optional, accepts null</param>
        public CatAllocationDescriptor(NodeIds nodeId)
            : base(r => r.Optional("node_id", nodeId)) { }

        // values part of the url path
        NodeIds ICatAllocationRequest.NodeId => Self.RouteValues.Get<NodeIds>("node_id");

        /// <summary>Comma-separated list of node IDs or names to limit the returned information.</summary>
        public CatAllocationDescriptor NodeId(NodeIds nodeId) =>
            Assign(nodeId, (a, v) => a.RouteValues.Optional("node_id", v));

        // Request parameters
        /// <summary>The unit in which to display byte values.</summary>
        public CatAllocationDescriptor Bytes(Bytes? bytes) => Qs("bytes", bytes);

        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public CatAllocationDescriptor ClusterManagerTimeout(Time clustermanagertimeout) =>
            Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>A short version of the Accept header, e.g. json, yaml.</summary>
        public CatAllocationDescriptor Format(string format) => Qs("format", format);

        /// <summary>Comma-separated list of column names to display.</summary>
        public CatAllocationDescriptor Headers(params string[] headers) => Qs("h", headers);

        /// <summary>Return help information.</summary>
        public CatAllocationDescriptor Help(bool? help = true) => Qs("help", help);

        /// <summary>Return local information, do not retrieve the state from cluster-manager node.</summary>
        public CatAllocationDescriptor Local(bool? local = true) => Qs("local", local);

        /// <summary>Operation timeout for connection to master node.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public CatAllocationDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);

        /// <summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatAllocationDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);

        /// <summary>Verbose mode. Display column headers.</summary>
        public CatAllocationDescriptor Verbose(bool? verbose = true) => Qs("v", verbose);
    }

    /// <summary>Descriptor for ClusterManager <para>https://opensearch.org/docs/latest/api-reference/cat/cat-cluster_manager/</para></summary>
    public partial class CatClusterManagerDescriptor
        : RequestDescriptorBase<
            CatClusterManagerDescriptor,
            CatClusterManagerRequestParameters,
            ICatClusterManagerRequest
        >,
            ICatClusterManagerRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatClusterManager;

        // values part of the url path
        // Request parameters
        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public CatClusterManagerDescriptor ClusterManagerTimeout(Time clustermanagertimeout) =>
            Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>A short version of the Accept header, e.g. json, yaml.</summary>
        public CatClusterManagerDescriptor Format(string format) => Qs("format", format);

        /// <summary>Comma-separated list of column names to display.</summary>
        public CatClusterManagerDescriptor Headers(params string[] headers) => Qs("h", headers);

        /// <summary>Return help information.</summary>
        public CatClusterManagerDescriptor Help(bool? help = true) => Qs("help", help);

        /// <summary>Return local information, do not retrieve the state from cluster-manager node.</summary>
        public CatClusterManagerDescriptor Local(bool? local = true) => Qs("local", local);

        /// <summary>Operation timeout for connection to master node.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public CatClusterManagerDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);

        /// <summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatClusterManagerDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);

        /// <summary>Verbose mode. Display column headers.</summary>
        public CatClusterManagerDescriptor Verbose(bool? verbose = true) => Qs("v", verbose);
    }

    /// <summary>Descriptor for Count <para>https://opensearch.org/docs/latest/api-reference/cat/cat-count/</para></summary>
    public partial class CatCountDescriptor
        : RequestDescriptorBase<CatCountDescriptor, CatCountRequestParameters, ICatCountRequest>,
            ICatCountRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatCount;

        /// <summary>/_cat/count</summary>
        public CatCountDescriptor()
            : base() { }

        /// <summary>/_cat/count/{index}</summary>
        /// <param name="index">Optional, accepts null</param>
        public CatCountDescriptor(Indices index)
            : base(r => r.Optional("index", index)) { }

        // values part of the url path
        Indices ICatCountRequest.Index => Self.RouteValues.Get<Indices>("index");

        /// <summary>Comma-separated list of indices to limit the returned information.</summary>
        public CatCountDescriptor Index(Indices index) =>
            Assign(index, (a, v) => a.RouteValues.Optional("index", v));

        /// <summary>a shortcut into calling Index(typeof(TOther))</summary>
        public CatCountDescriptor Index<TOther>()
            where TOther : class =>
            Assign(typeof(TOther), (a, v) => a.RouteValues.Optional("index", (Indices)v));

        /// <summary>A shortcut into calling Index(Indices.All)</summary>
        public CatCountDescriptor AllIndices() => Index(Indices.All);

        // Request parameters
        /// <summary>A short version of the Accept header, e.g. json, yaml.</summary>
        public CatCountDescriptor Format(string format) => Qs("format", format);

        /// <summary>Comma-separated list of column names to display.</summary>
        public CatCountDescriptor Headers(params string[] headers) => Qs("h", headers);

        /// <summary>Return help information.</summary>
        public CatCountDescriptor Help(bool? help = true) => Qs("help", help);

        /// <summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatCountDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);

        /// <summary>Verbose mode. Display column headers.</summary>
        public CatCountDescriptor Verbose(bool? verbose = true) => Qs("v", verbose);
    }

    /// <summary>Descriptor for Fielddata <para>https://opensearch.org/docs/latest/api-reference/cat/cat-field-data/</para></summary>
    public partial class CatFielddataDescriptor
        : RequestDescriptorBase<
            CatFielddataDescriptor,
            CatFielddataRequestParameters,
            ICatFielddataRequest
        >,
            ICatFielddataRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatFielddata;

        /// <summary>/_cat/fielddata</summary>
        public CatFielddataDescriptor()
            : base() { }

        /// <summary>/_cat/fielddata/{fields}</summary>
        /// <param name="fields">Optional, accepts null</param>
        public CatFielddataDescriptor(Fields fields)
            : base(r => r.Optional("fields", fields)) { }

        // values part of the url path
        Fields ICatFielddataRequest.Fields => Self.RouteValues.Get<Fields>("fields");

        /// <summary>Comma-separated list of fields to return the fielddata size.</summary>
        public CatFielddataDescriptor Fields(Fields fields) =>
            Assign(fields, (a, v) => a.RouteValues.Optional("fields", v));

        /// <summary>Comma-separated list of fields to return the fielddata size.</summary>
        public CatFielddataDescriptor Fields<T>(params Expression<Func<T, object>>[] fields) =>
            Assign(fields, (a, v) => a.RouteValues.Optional("fields", (Fields)v));

        // Request parameters
        /// <summary>The unit in which to display byte values.</summary>
        public CatFielddataDescriptor Bytes(Bytes? bytes) => Qs("bytes", bytes);

        /// <summary>A short version of the Accept header, e.g. json, yaml.</summary>
        public CatFielddataDescriptor Format(string format) => Qs("format", format);

        /// <summary>Comma-separated list of column names to display.</summary>
        public CatFielddataDescriptor Headers(params string[] headers) => Qs("h", headers);

        /// <summary>Return help information.</summary>
        public CatFielddataDescriptor Help(bool? help = true) => Qs("help", help);

        /// <summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatFielddataDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);

        /// <summary>Verbose mode. Display column headers.</summary>
        public CatFielddataDescriptor Verbose(bool? verbose = true) => Qs("v", verbose);
    }

    /// <summary>Descriptor for Health <para>https://opensearch.org/docs/latest/api-reference/cat/cat-health/</para></summary>
    public partial class CatHealthDescriptor
        : RequestDescriptorBase<CatHealthDescriptor, CatHealthRequestParameters, ICatHealthRequest>,
            ICatHealthRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatHealth;

        // values part of the url path
        // Request parameters
        /// <summary>A short version of the Accept header, e.g. json, yaml.</summary>
        public CatHealthDescriptor Format(string format) => Qs("format", format);

        /// <summary>Comma-separated list of column names to display.</summary>
        public CatHealthDescriptor Headers(params string[] headers) => Qs("h", headers);

        /// <summary>Return help information.</summary>
        public CatHealthDescriptor Help(bool? help = true) => Qs("help", help);

        /// <summary>Set to false to disable timestamping.</summary>
        public CatHealthDescriptor IncludeTimestamp(bool? includetimestamp = true) =>
            Qs("ts", includetimestamp);

        /// <summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatHealthDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);

        /// <summary>Verbose mode. Display column headers.</summary>
        public CatHealthDescriptor Verbose(bool? verbose = true) => Qs("v", verbose);
    }

    /// <summary>Descriptor for Help <para>https://opensearch.org/docs/latest/api-reference/cat/index/</para></summary>
    public partial class CatHelpDescriptor
        : RequestDescriptorBase<CatHelpDescriptor, CatHelpRequestParameters, ICatHelpRequest>,
            ICatHelpRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatHelp;

        // values part of the url path
        // Request parameters
        /// <summary>Return help information.</summary>
        public CatHelpDescriptor Help(bool? help = true) => Qs("help", help);

        /// <summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatHelpDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);
    }

    /// <summary>Descriptor for Indices <para>https://opensearch.org/docs/latest/api-reference/cat/cat-indices/</para></summary>
    public partial class CatIndicesDescriptor
        : RequestDescriptorBase<
            CatIndicesDescriptor,
            CatIndicesRequestParameters,
            ICatIndicesRequest
        >,
            ICatIndicesRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatIndices;

        /// <summary>/_cat/indices</summary>
        public CatIndicesDescriptor()
            : base() { }

        /// <summary>/_cat/indices/{index}</summary>
        /// <param name="index">Optional, accepts null</param>
        public CatIndicesDescriptor(Indices index)
            : base(r => r.Optional("index", index)) { }

        // values part of the url path
        Indices ICatIndicesRequest.Index => Self.RouteValues.Get<Indices>("index");

        /// <summary>Comma-separated list of indices to limit the returned information.</summary>
        public CatIndicesDescriptor Index(Indices index) =>
            Assign(index, (a, v) => a.RouteValues.Optional("index", v));

        /// <summary>a shortcut into calling Index(typeof(TOther))</summary>
        public CatIndicesDescriptor Index<TOther>()
            where TOther : class =>
            Assign(typeof(TOther), (a, v) => a.RouteValues.Optional("index", (Indices)v));

        /// <summary>A shortcut into calling Index(Indices.All)</summary>
        public CatIndicesDescriptor AllIndices() => Index(Indices.All);

        // Request parameters
        /// <summary>The unit in which to display byte values.</summary>
        public CatIndicesDescriptor Bytes(Bytes? bytes) => Qs("bytes", bytes);

        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public CatIndicesDescriptor ClusterManagerTimeout(Time clustermanagertimeout) =>
            Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        public CatIndicesDescriptor ExpandWildcards(ExpandWildcards? expandwildcards) =>
            Qs("expand_wildcards", expandwildcards);

        /// <summary>A short version of the Accept header, e.g. json, yaml.</summary>
        public CatIndicesDescriptor Format(string format) => Qs("format", format);

        /// <summary>Comma-separated list of column names to display.</summary>
        public CatIndicesDescriptor Headers(params string[] headers) => Qs("h", headers);

        /// <summary>Health status ('green', 'yellow', or 'red') to filter only indices matching the specified health status.</summary>
        public CatIndicesDescriptor Health(Health? health) => Qs("health", health);

        /// <summary>Return help information.</summary>
        public CatIndicesDescriptor Help(bool? help = true) => Qs("help", help);

        /// <summary>If set to true segment stats will include stats for segments that are not currently loaded into memory.</summary>
        public CatIndicesDescriptor IncludeUnloadedSegments(bool? includeunloadedsegments = true) =>
            Qs("include_unloaded_segments", includeunloadedsegments);

        /// <summary>Return local information, do not retrieve the state from cluster-manager node.</summary>
        public CatIndicesDescriptor Local(bool? local = true) => Qs("local", local);

        /// <summary>Operation timeout for connection to master node.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public CatIndicesDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);

        /// <summary>Set to true to return stats only for primary shards.</summary>
        public CatIndicesDescriptor Pri(bool? pri = true) => Qs("pri", pri);

        /// <summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatIndicesDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);

        /// <summary>Verbose mode. Display column headers.</summary>
        public CatIndicesDescriptor Verbose(bool? verbose = true) => Qs("v", verbose);
    }

    /// <summary>Descriptor for Master <para>https://opensearch.org/docs/latest/api-reference/cat/cat-cluster_manager/</para></summary>
    public partial class CatMasterDescriptor
        : RequestDescriptorBase<CatMasterDescriptor, CatMasterRequestParameters, ICatMasterRequest>,
            ICatMasterRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatMaster;

        // values part of the url path
        // Request parameters
        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public CatMasterDescriptor ClusterManagerTimeout(Time clustermanagertimeout) =>
            Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>A short version of the Accept header, e.g. json, yaml.</summary>
        public CatMasterDescriptor Format(string format) => Qs("format", format);

        /// <summary>Comma-separated list of column names to display.</summary>
        public CatMasterDescriptor Headers(params string[] headers) => Qs("h", headers);

        /// <summary>Return help information.</summary>
        public CatMasterDescriptor Help(bool? help = true) => Qs("help", help);

        /// <summary>Return local information, do not retrieve the state from cluster-manager node.</summary>
        public CatMasterDescriptor Local(bool? local = true) => Qs("local", local);

        /// <summary>Operation timeout for connection to master node.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public CatMasterDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);

        /// <summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatMasterDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);

        /// <summary>Verbose mode. Display column headers.</summary>
        public CatMasterDescriptor Verbose(bool? verbose = true) => Qs("v", verbose);
    }

    /// <summary>Descriptor for NodeAttributes <para>https://opensearch.org/docs/latest/api-reference/cat/cat-nodeattrs/</para></summary>
    public partial class CatNodeAttributesDescriptor
        : RequestDescriptorBase<
            CatNodeAttributesDescriptor,
            CatNodeAttributesRequestParameters,
            ICatNodeAttributesRequest
        >,
            ICatNodeAttributesRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatNodeAttributes;

        // values part of the url path
        // Request parameters
        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public CatNodeAttributesDescriptor ClusterManagerTimeout(Time clustermanagertimeout) =>
            Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>A short version of the Accept header, e.g. json, yaml.</summary>
        public CatNodeAttributesDescriptor Format(string format) => Qs("format", format);

        /// <summary>Comma-separated list of column names to display.</summary>
        public CatNodeAttributesDescriptor Headers(params string[] headers) => Qs("h", headers);

        /// <summary>Return help information.</summary>
        public CatNodeAttributesDescriptor Help(bool? help = true) => Qs("help", help);

        /// <summary>Return local information, do not retrieve the state from cluster-manager node.</summary>
        public CatNodeAttributesDescriptor Local(bool? local = true) => Qs("local", local);

        /// <summary>Operation timeout for connection to master node.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public CatNodeAttributesDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);

        /// <summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatNodeAttributesDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);

        /// <summary>Verbose mode. Display column headers.</summary>
        public CatNodeAttributesDescriptor Verbose(bool? verbose = true) => Qs("v", verbose);
    }

    /// <summary>Descriptor for Nodes <para>https://opensearch.org/docs/latest/api-reference/cat/cat-nodes/</para></summary>
    public partial class CatNodesDescriptor
        : RequestDescriptorBase<CatNodesDescriptor, CatNodesRequestParameters, ICatNodesRequest>,
            ICatNodesRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatNodes;

        // values part of the url path
        // Request parameters
        /// <summary>The unit in which to display byte values.</summary>
        public CatNodesDescriptor Bytes(Bytes? bytes) => Qs("bytes", bytes);

        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public CatNodesDescriptor ClusterManagerTimeout(Time clustermanagertimeout) =>
            Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>A short version of the Accept header, e.g. json, yaml.</summary>
        public CatNodesDescriptor Format(string format) => Qs("format", format);

        /// <summary>Return the full node ID instead of the shortened version.</summary>
        public CatNodesDescriptor FullId(bool? fullid = true) => Qs("full_id", fullid);

        /// <summary>Comma-separated list of column names to display.</summary>
        public CatNodesDescriptor Headers(params string[] headers) => Qs("h", headers);

        /// <summary>Return help information.</summary>
        public CatNodesDescriptor Help(bool? help = true) => Qs("help", help);

        /// <summary>Return local information, do not retrieve the state from cluster-manager node.</summary>
        [Obsolete(
            "Deprecated as of: 1.0, reason: This parameter does not cause this API to act locally."
        )]
        public CatNodesDescriptor Local(bool? local = true) => Qs("local", local);

        /// <summary>Operation timeout for connection to master node.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public CatNodesDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);

        /// <summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatNodesDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);

        /// <summary>Verbose mode. Display column headers.</summary>
        public CatNodesDescriptor Verbose(bool? verbose = true) => Qs("v", verbose);
    }

    /// <summary>Descriptor for PendingTasks <para>https://opensearch.org/docs/latest/api-reference/cat/cat-pending-tasks/</para></summary>
    public partial class CatPendingTasksDescriptor
        : RequestDescriptorBase<
            CatPendingTasksDescriptor,
            CatPendingTasksRequestParameters,
            ICatPendingTasksRequest
        >,
            ICatPendingTasksRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.CatPendingTasks;

        // values part of the url path
        // Request parameters
        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public CatPendingTasksDescriptor ClusterManagerTimeout(Time clustermanagertimeout) =>
            Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>A short version of the Accept header, e.g. json, yaml.</summary>
        public CatPendingTasksDescriptor Format(string format) => Qs("format", format);

        /// <summary>Comma-separated list of column names to display.</summary>
        public CatPendingTasksDescriptor Headers(params string[] headers) => Qs("h", headers);

        /// <summary>Return help information.</summary>
        public CatPendingTasksDescriptor Help(bool? help = true) => Qs("help", help);

        /// <summary>Return local information, do not retrieve the state from cluster-manager node.</summary>
        public CatPendingTasksDescriptor Local(bool? local = true) => Qs("local", local);

        /// <summary>Operation timeout for connection to master node.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public CatPendingTasksDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);

        /// <summary>Comma-separated list of column names or column aliases to sort by.</summary>
        public CatPendingTasksDescriptor SortByColumns(params string[] sortbycolumns) =>
            Qs("s", sortbycolumns);

        /// <summary>Verbose mode. Display column headers.</summary>
        public CatPendingTasksDescriptor Verbose(bool? verbose = true) => Qs("v", verbose);
    }
}
