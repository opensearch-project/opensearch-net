/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Threading;
using System.Threading.Tasks;
using OpenSearch.Net.Specification.NodesApi;

// ReSharper disable once CheckNamespace
// ReSharper disable RedundantTypeArgumentsOfMethod
namespace OpenSearch.Client.Specification.NodesApi
{
    ///<summary>
    /// Nodes APIs.
    /// <para>Not intended to be instantiated directly. Use the <see cref="IOpenSearchClient.Nodes"/> property
    /// on <see cref="IOpenSearchClient"/>.
    ///</para>
    ///</summary>
    public partial class NodesNamespace : NamespacedClientProxy
    {
        internal NodesNamespace(OpenSearchClient client)
            : base(client) { }

        /// <summary>
        /// <c>GET</c> request to the <c>nodes.hot_threads</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-hot-threads/">https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-hot-threads/</a>
        /// </summary>
        public NodesHotThreadsResponse HotThreads(
            Func<NodesHotThreadsDescriptor, INodesHotThreadsRequest> selector = null
        ) => HotThreads(selector.InvokeOrDefault(new NodesHotThreadsDescriptor()));

        /// <summary>
        /// <c>GET</c> request to the <c>nodes.hot_threads</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-hot-threads/">https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-hot-threads/</a>
        /// </summary>
        public Task<NodesHotThreadsResponse> HotThreadsAsync(
            Func<NodesHotThreadsDescriptor, INodesHotThreadsRequest> selector = null,
            CancellationToken ct = default
        ) => HotThreadsAsync(selector.InvokeOrDefault(new NodesHotThreadsDescriptor()), ct);

        /// <summary>
        /// <c>GET</c> request to the <c>nodes.hot_threads</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-hot-threads/">https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-hot-threads/</a>
        /// </summary>
        public NodesHotThreadsResponse HotThreads(INodesHotThreadsRequest request) =>
            DoRequest<INodesHotThreadsRequest, NodesHotThreadsResponse>(
                request,
                request.RequestParameters
            );

        /// <summary>
        /// <c>GET</c> request to the <c>nodes.hot_threads</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-hot-threads/">https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-hot-threads/</a>
        /// </summary>
        public Task<NodesHotThreadsResponse> HotThreadsAsync(
            INodesHotThreadsRequest request,
            CancellationToken ct = default
        ) =>
            DoRequestAsync<INodesHotThreadsRequest, NodesHotThreadsResponse>(
                request,
                request.RequestParameters,
                ct
            );
    }
}
