/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using OpenSearch.Net;
using OpenSearch.Net.Specification.TasksApi;
using OpenSearch.Net.Utf8Json;

// ReSharper disable RedundantBaseConstructorCall
// ReSharper disable UnusedTypeParameter
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
namespace OpenSearch.Client
{
    /// <summary>Descriptor for Cancel <para>https://opensearch.org/docs/latest/api-reference/tasks/#task-canceling</para></summary>
    public partial class CancelTasksDescriptor
        : RequestDescriptorBase<
            CancelTasksDescriptor,
            CancelTasksRequestParameters,
            ICancelTasksRequest
        >,
            ICancelTasksRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.TasksCancel;

        /// <summary>/_tasks/_cancel</summary>
        public CancelTasksDescriptor()
            : base() { }

        /// <summary>/_tasks/{task_id}/_cancel</summary>
        /// <param name="taskId">Optional, accepts null</param>
        public CancelTasksDescriptor(TaskId taskId)
            : base(r => r.Optional("task_id", taskId)) { }

        // values part of the url path
        TaskId ICancelTasksRequest.TaskId => Self.RouteValues.Get<TaskId>("task_id");

        /// <summary>The task ID.</summary>
        public CancelTasksDescriptor TaskId(TaskId taskId) =>
            Assign(taskId, (a, v) => a.RouteValues.Optional("task_id", v));

        // Request parameters
        /// <summary>A comma-separated list of actions that should be returned. Keep empty to return all.</summary>
        public CancelTasksDescriptor Actions(params string[] actions) => Qs("actions", actions);

        /// <summary>A comma-separated list of node IDs or names used to limit the returned information. Use `_local` to return information from the node you're connecting to, specify the node name to get information from a specific node, or keep the parameter empty to get information from all nodes.</summary>
        public CancelTasksDescriptor Nodes(params string[] nodes) => Qs("nodes", nodes);

        /// <summary>Returns tasks with a specified parent task ID (`node_id:task_number`). Keep empty or set to -1 to return all.</summary>
        public CancelTasksDescriptor ParentTaskId(string parenttaskid) =>
            Qs("parent_task_id", parenttaskid);

        /// <summary>Waits for the matching task to complete. When `true`, the request is blocked until the task has completed.</summary>
        public CancelTasksDescriptor WaitForCompletion(bool? waitforcompletion = true) =>
            Qs("wait_for_completion", waitforcompletion);
    }

    /// <summary>Descriptor for GetTask <para>https://opensearch.org/docs/latest/api-reference/tasks/</para></summary>
    public partial class GetTaskDescriptor
        : RequestDescriptorBase<GetTaskDescriptor, GetTaskRequestParameters, IGetTaskRequest>,
            IGetTaskRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.TasksGetTask;

        /// <summary>/_tasks/{task_id}</summary>
        /// <param name="taskId">this parameter is required</param>
        public GetTaskDescriptor(TaskId taskId)
            : base(r => r.Required("task_id", taskId)) { }

        /// <summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
        [SerializationConstructor]
        protected GetTaskDescriptor()
            : base() { }

        // values part of the url path
        TaskId IGetTaskRequest.TaskId => Self.RouteValues.Get<TaskId>("task_id");

        // Request parameters
        /// <summary>The amount of time to wait for a response.</summary>
        public GetTaskDescriptor Timeout(Time timeout) => Qs("timeout", timeout);

        /// <summary>Waits for the matching task to complete. When `true`, the request is blocked until the task has completed.</summary>
        public GetTaskDescriptor WaitForCompletion(bool? waitforcompletion = true) =>
            Qs("wait_for_completion", waitforcompletion);
    }

    /// <summary>Descriptor for List <para>https://opensearch.org/docs/latest/api-reference/tasks/</para></summary>
    public partial class ListTasksDescriptor
        : RequestDescriptorBase<ListTasksDescriptor, ListTasksRequestParameters, IListTasksRequest>,
            IListTasksRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.TasksList;

        // values part of the url path
        // Request parameters
        /// <summary>A comma-separated list of actions that should be returned. Keep empty to return all.</summary>
        public ListTasksDescriptor Actions(params string[] actions) => Qs("actions", actions);

        /// <summary>When `true`, the response includes detailed information about shard recoveries.</summary>
        public ListTasksDescriptor Detailed(bool? detailed = true) => Qs("detailed", detailed);

        /// <summary>Groups tasks by parent/child relationships or nodes.</summary>
        public ListTasksDescriptor GroupBy(TasksGroupBy? groupby) => Qs("group_by", groupby);

        /// <summary>A comma-separated list of node IDs or names used to limit the returned information. Use `_local` to return information from the node you're connecting to, specify the node name to get information from a specific node, or keep the parameter empty to get information from all nodes.</summary>
        public ListTasksDescriptor Nodes(params string[] nodes) => Qs("nodes", nodes);

        /// <summary>Returns tasks with a specified parent task ID (`node_id:task_number`). Keep empty or set to -1 to return all.</summary>
        public ListTasksDescriptor ParentTaskId(string parenttaskid) =>
            Qs("parent_task_id", parenttaskid);

        /// <summary>The amount of time to wait for a response.</summary>
        public ListTasksDescriptor Timeout(Time timeout) => Qs("timeout", timeout);

        /// <summary>Waits for the matching task to complete. When `true`, the request is blocked until the task has completed.</summary>
        public ListTasksDescriptor WaitForCompletion(bool? waitforcompletion = true) =>
            Qs("wait_for_completion", waitforcompletion);
    }
}
