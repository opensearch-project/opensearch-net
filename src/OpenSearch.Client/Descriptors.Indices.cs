/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
* 	http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
// 		*NIX 		:	./build.sh codegen
// 		Windows 	:	build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using OpenSearch.Net;
using OpenSearch.Net.Specification.IndicesApi;
using OpenSearch.Net.Utf8Json;

// ReSharper disable RedundantBaseConstructorCall
// ReSharper disable UnusedTypeParameter
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
namespace OpenSearch.Client
{
    public partial class CreateIndexDescriptor
    {
        ///<summary>Whether a type should be expected in the body of the mappings.</summary>
        ///<remarks>Deprecated as of OpenSearch 2.0</remarks>
        public CreateIndexDescriptor IncludeTypeName(bool? includetypename = true) =>
            Qs("include_type_name", includetypename);
    }

    ///<summary>Descriptor for TypeExists <para>https://opensearch.org/docs/latest/opensearch/rest-api/index-apis/exists/</para></summary>
    ///<remarks>Deprecated as of OpenSearch 2.0</remarks>
    public partial class TypeExistsDescriptor
        : RequestDescriptorBase<
            TypeExistsDescriptor,
            TypeExistsRequestParameters,
            ITypeExistsRequest
        >,
            ITypeExistsRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesTypeExists;

        ///<summary>/{index}/_mapping/{type}</summary>
        ///<param name = "index">this parameter is required</param>
        ///<param name = "type">this parameter is required</param>
        public TypeExistsDescriptor(Indices index, Names type)
            : base(r => r.Required("index", index).Required("type", type)) { }

        ///<summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
        [SerializationConstructor]
        protected TypeExistsDescriptor()
            : base() { }

        // values part of the url path
        Indices ITypeExistsRequest.Index => Self.RouteValues.Get<Indices>("index");
        Names ITypeExistsRequest.Type => Self.RouteValues.Get<Names>("type");

        ///<summary>A comma-separated list of index names; use `_all` to check the types across all indices</summary>
        public TypeExistsDescriptor Index(Indices index) =>
            Assign(index, (a, v) => a.RouteValues.Required("index", v));

        ///<summary>a shortcut into calling Index(typeof(TOther))</summary>
        public TypeExistsDescriptor Index<TOther>()
            where TOther : class =>
            Assign(typeof(TOther), (a, v) => a.RouteValues.Required("index", (Indices)v));

        ///<summary>A shortcut into calling Index(Indices.All)</summary>
        public TypeExistsDescriptor AllIndices() => Index(Indices.All);

        // Request parameters
        ///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        public TypeExistsDescriptor AllowNoIndices(bool? allownoindices = true) =>
            Qs("allow_no_indices", allownoindices);

        ///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        public TypeExistsDescriptor ExpandWildcards(ExpandWildcards? expandwildcards) =>
            Qs("expand_wildcards", expandwildcards);

        ///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        public TypeExistsDescriptor IgnoreUnavailable(bool? ignoreunavailable = true) =>
            Qs("ignore_unavailable", ignoreunavailable);

        ///<summary>Return local information, do not retrieve the state from cluster_manager node (default: false)</summary>
        public TypeExistsDescriptor Local(bool? local = true) => Qs("local", local);
    }

    public partial class GetIndexDescriptor
    {
        ///<summary>Whether to add the type name to the response (default: false)</summary>
        ///<remarks>Deprecated as of OpenSearch 2.0</remarks>
        public GetIndexDescriptor IncludeTypeName(bool? includetypename = true) =>
            Qs("include_type_name", includetypename);
    }

    public partial class GetFieldMappingDescriptor<TDocument>
    {
        ///<summary>Whether a type should be returned in the body of the mappings.</summary>
        ///<remarks>Deprecated as of OpenSearch 2.0</remarks>
        public GetFieldMappingDescriptor<TDocument> IncludeTypeName(bool? includetypename = true) =>
            Qs("include_type_name", includetypename);
    }

    public partial class GetMappingDescriptor<TDocument>
    {
        ///<summary>Whether to add the type name to the response (default: false)</summary>
        ///<remarks>Deprecated as of OpenSearch 2.0</remarks>
        public GetMappingDescriptor<TDocument> IncludeTypeName(bool? includetypename = true) =>
            Qs("include_type_name", includetypename);
    }

    public partial class GetIndexTemplateDescriptor
    {
        ///<summary>Whether a type should be returned in the body of the mappings.</summary>
        ///<remarks>Deprecated as of OpenSearch 2.0</remarks>
        public GetIndexTemplateDescriptor IncludeTypeName(bool? includetypename = true) =>
            Qs("include_type_name", includetypename);
    }

    public partial class PutMappingDescriptor<TDocument>
    {
        ///<summary>Whether a type should be expected in the body of the mappings.</summary>
        ///<remarks>Deprecated as of OpenSearch 2.0</remarks>
        public PutMappingDescriptor<TDocument> IncludeTypeName(bool? includetypename = true) =>
            Qs("include_type_name", includetypename);
    }

    public partial class PutIndexTemplateDescriptor
    {
        ///<summary>Whether a type should be returned in the body of the mappings.</summary>
        ///<remarks>Deprecated as of OpenSearch 2.0</remarks>
        public PutIndexTemplateDescriptor IncludeTypeName(bool? includetypename = true) =>
            Qs("include_type_name", includetypename);
    }

    public partial class RolloverIndexDescriptor
    {
        ///<summary>Whether a type should be included in the body of the mappings.</summary>
        ///<remarks>Deprecated as of OpenSearch 2.0</remarks>
        public RolloverIndexDescriptor IncludeTypeName(bool? includetypename = true) =>
            Qs("include_type_name", includetypename);
    }
}
