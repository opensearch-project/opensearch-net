{
    "openapi": "3.0.2",
    "info": {
        "title": "OpenSearch",
        "version": "2021-11-23"
    },
    "paths": {
        "/": {
            "get": {
                "description": "Returns basic information about the cluster.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "Info",
                "responses": {
                    "200": {
                        "description": "Info 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "info",
                "x-version-added": "1.0"
            },
            "head": {
                "description": "Returns whether the cluster is running.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "Ping",
                "responses": {
                    "200": {
                        "description": "Ping 200 response"
                    }
                },
                "x-operation-group": "ping",
                "x-version-added": "1.0"
            }
        },
        "/_alias": {
            "get": {
                "description": "Returns an alias.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/im-plugin/index-alias/"
                },
                "operationId": "IndicesGetAlias",
                "parameters": [
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetAlias 200 response"
                    }
                },
                "x-operation-group": "indices.get_alias",
                "x-version-added": "1.0"
            }
        },
        "/_alias/{name}": {
            "get": {
                "description": "Returns an alias.",
                "operationId": "IndicesGetAlias_WithName",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of alias names.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of alias names.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetAlias_WithName 200 response"
                    }
                },
                "x-operation-group": "indices.get_alias",
                "x-version-added": "1.0"
            },
            "head": {
                "description": "Returns information about whether a particular alias exists.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesExistsAlias",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of alias names.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of alias names.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesExistsAlias 200 response"
                    }
                },
                "x-operation-group": "indices.exists_alias",
                "x-version-added": "1.0"
            }
        },
        "/_aliases": {
            "post": {
                "description": "Updates index aliases.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/alias/"
                },
                "operationId": "IndicesUpdateAliases",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesUpdateAliases_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesUpdateAliases 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesUpdateAliasesResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.update_aliases",
                "x-version-added": "1.0"
            }
        },
        "/_analyze": {
            "get": {
                "description": "Performs the analysis process on a text and return the tokens breakdown of the text.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/analyze-apis/perform-text-analysis/"
                },
                "operationId": "IndicesAnalyze_Get",
                "parameters": [
                    {
                        "name": "index",
                        "in": "query",
                        "description": "The name of the index to scope the operation.",
                        "schema": {
                            "type": "string",
                            "description": "The name of the index to scope the operation."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesAnalyze_Get 200 response"
                    }
                },
                "x-operation-group": "indices.analyze",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Performs the analysis process on a text and return the tokens breakdown of the text.",
                "operationId": "IndicesAnalyze_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesAnalyze_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "query",
                        "description": "The name of the index to scope the operation.",
                        "schema": {
                            "type": "string",
                            "description": "The name of the index to scope the operation."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesAnalyze_Post 200 response"
                    }
                },
                "x-operation-group": "indices.analyze",
                "x-version-added": "1.0"
            }
        },
        "/_bulk": {
            "post": {
                "description": "Allows to perform multiple index/update/delete operations in a single request.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/document-apis/bulk/"
                },
                "operationId": "Bulk_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Bulk_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1).",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
                        "schema": {
                            "$ref": "#/components/schemas/RefreshEnum"
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Default document type for items which don't provide one.",
                        "schema": {
                            "type": "string",
                            "description": "Default document type for items which don't provide one."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "Default list of fields to exclude from the returned _source field, can be overridden on each sub-request.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Default list of fields to exclude from the returned _source field, can be overridden on each sub-request."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "Default list of fields to extract and return from the _source field, can be overridden on each sub-request.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Default list of fields to extract and return from the _source field, can be overridden on each sub-request."
                        },
                        "explode": true
                    },
                    {
                        "name": "pipeline",
                        "in": "query",
                        "description": "The pipeline id to preprocess incoming documents with.",
                        "schema": {
                            "type": "string",
                            "description": "The pipeline id to preprocess incoming documents with."
                        }
                    },
                    {
                        "name": "require_alias",
                        "in": "query",
                        "description": "Sets require_alias for all incoming documents.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Sets require_alias for all incoming documents."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bulk_Post 200 response"
                    }
                },
                "x-operation-group": "bulk",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Allows to perform multiple index/update/delete operations in a single request.",
                "operationId": "Bulk_Put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Bulk_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1).",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
                        "schema": {
                            "$ref": "#/components/schemas/RefreshEnum"
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Default document type for items which don't provide one.",
                        "schema": {
                            "type": "string",
                            "description": "Default document type for items which don't provide one."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "Default list of fields to exclude from the returned _source field, can be overridden on each sub-request.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Default list of fields to exclude from the returned _source field, can be overridden on each sub-request."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "Default list of fields to extract and return from the _source field, can be overridden on each sub-request.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Default list of fields to extract and return from the _source field, can be overridden on each sub-request."
                        },
                        "explode": true
                    },
                    {
                        "name": "pipeline",
                        "in": "query",
                        "description": "The pipeline id to preprocess incoming documents with.",
                        "schema": {
                            "type": "string",
                            "description": "The pipeline id to preprocess incoming documents with."
                        }
                    },
                    {
                        "name": "require_alias",
                        "in": "query",
                        "description": "Sets require_alias for all incoming documents.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Sets require_alias for all incoming documents."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bulk_Put 200 response"
                    }
                },
                "x-operation-group": "bulk",
                "x-version-added": "1.0"
            }
        },
        "/_cache/clear": {
            "post": {
                "description": "Clears all or specific caches for one or more indices.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/clear-index-cache/"
                },
                "operationId": "IndicesClearCache",
                "parameters": [
                    {
                        "name": "fielddata",
                        "in": "query",
                        "description": "Clear field data.",
                        "schema": {
                            "type": "boolean",
                            "description": "Clear field data."
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to clear when using the `fielddata` parameter (default: all).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to clear when using the `fielddata` parameter (default: all)."
                        },
                        "explode": true
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Clear query caches.",
                        "schema": {
                            "type": "boolean",
                            "description": "Clear query caches."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "index",
                        "in": "query",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices."
                        },
                        "explode": true
                    },
                    {
                        "name": "request",
                        "in": "query",
                        "description": "Clear request cache.",
                        "schema": {
                            "type": "boolean",
                            "description": "Clear request cache."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesClearCache 200 response"
                    }
                },
                "x-operation-group": "indices.clear_cache",
                "x-version-added": "1.0"
            }
        },
        "/_cat": {
            "get": {
                "description": "Returns help for the Cat APIs.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/index/"
                },
                "operationId": "CatHelp",
                "parameters": [
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatHelp 200 response"
                    }
                },
                "x-operation-group": "cat.help",
                "x-version-added": "1.0"
            }
        },
        "/_cat/aliases": {
            "get": {
                "description": "Shows information about currently configured aliases to indices including filter and routing infos.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-aliases/"
                },
                "operationId": "CatAliases",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatAliases 200 response"
                    }
                },
                "x-operation-group": "cat.aliases",
                "x-version-added": "1.0"
            }
        },
        "/_cat/aliases/{name}": {
            "get": {
                "description": "Shows information about currently configured aliases to indices including filter and routing infos.",
                "operationId": "CatAliases_WithName",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of alias names.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of alias names.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatAliases_WithName 200 response"
                    }
                },
                "x-operation-group": "cat.aliases",
                "x-version-added": "1.0"
            }
        },
        "/_cat/allocation": {
            "get": {
                "description": "Provides a snapshot of how many shards are allocated to each data node and how much disk space they are using.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-allocation/"
                },
                "operationId": "CatAllocation",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatAllocation 200 response"
                    }
                },
                "x-operation-group": "cat.allocation",
                "x-version-added": "1.0"
            }
        },
        "/_cat/allocation/{node_id}": {
            "get": {
                "description": "Provides a snapshot of how many shards are allocated to each data node and how much disk space they are using.",
                "operationId": "CatAllocation_WithNodeId",
                "parameters": [
                    {
                        "name": "node_id",
                        "in": "path",
                        "description": "Comma-separated list of node IDs or names to limit the returned information.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of node IDs or names to limit the returned information.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatAllocation_WithNodeId 200 response"
                    }
                },
                "x-operation-group": "cat.allocation",
                "x-version-added": "1.0"
            }
        },
        "/_cat/cluster_manager": {
            "get": {
                "description": "Returns information about the cluster-manager node.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-cluster_manager/"
                },
                "operationId": "CatClusterManager",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatClusterManager 200 response"
                    }
                },
                "x-operation-group": "cat.cluster_manager",
                "x-version-added": "1.0"
            }
        },
        "/_cat/count": {
            "get": {
                "description": "Provides quick access to the document count of the entire cluster, or individual indices.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-count/"
                },
                "operationId": "CatCount",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatCount 200 response"
                    }
                },
                "x-operation-group": "cat.count",
                "x-version-added": "1.0"
            }
        },
        "/_cat/count/{index}": {
            "get": {
                "description": "Provides quick access to the document count of the entire cluster, or individual indices.",
                "operationId": "CatCount_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to limit the returned information.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to limit the returned information.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatCount_WithIndex 200 response"
                    }
                },
                "x-operation-group": "cat.count",
                "x-version-added": "1.0"
            }
        },
        "/_cat/fielddata": {
            "get": {
                "description": "Shows how much heap memory is currently being used by fielddata on every data node in the cluster.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-field-data/"
                },
                "operationId": "CatFielddata",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return in the output.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return in the output."
                        },
                        "explode": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatFielddata 200 response"
                    }
                },
                "x-operation-group": "cat.fielddata",
                "x-version-added": "1.0"
            }
        },
        "/_cat/fielddata/{fields}": {
            "get": {
                "description": "Shows how much heap memory is currently being used by fielddata on every data node in the cluster.",
                "operationId": "CatFielddata_WithFields",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "path",
                        "description": "Comma-separated list of fields to return the fielddata size.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of fields to return the fielddata size.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return in the output.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return in the output."
                        },
                        "explode": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatFielddata_WithFields 200 response"
                    }
                },
                "x-operation-group": "cat.fielddata",
                "x-version-added": "1.0"
            }
        },
        "/_cat/health": {
            "get": {
                "description": "Returns a concise representation of the cluster health.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-health/"
                },
                "operationId": "CatHealth",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "ts",
                        "in": "query",
                        "description": "Set to false to disable timestamping.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Set to false to disable timestamping."
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatHealth 200 response"
                    }
                },
                "x-operation-group": "cat.health",
                "x-version-added": "1.0"
            }
        },
        "/_cat/indices": {
            "get": {
                "description": "Returns information about indices: number of primaries and replicas, document counts, disk size, ...",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-indices/"
                },
                "operationId": "CatIndices",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "health",
                        "in": "query",
                        "description": "Health status ('green', 'yellow', or 'red') to filter only indices matching the specified health status.",
                        "schema": {
                            "$ref": "#/components/schemas/Health"
                        }
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "pri",
                        "in": "query",
                        "description": "Set to true to return stats only for primary shards.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Set to true to return stats only for primary shards."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    },
                    {
                        "name": "include_unloaded_segments",
                        "in": "query",
                        "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatIndices 200 response"
                    }
                },
                "x-operation-group": "cat.indices",
                "x-version-added": "1.0"
            }
        },
        "/_cat/indices/{index}": {
            "get": {
                "description": "Returns information about indices: number of primaries and replicas, document counts, disk size, ...",
                "operationId": "CatIndices_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to limit the returned information.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to limit the returned information.",
                            "x-data-type": "array"
                        },
                        "required": true,
                        "examples": {
                            "CatIndices_WithIndex_example1": {
                                "summary": "Examples for Cat indices with Index Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "health",
                        "in": "query",
                        "description": "Health status ('green', 'yellow', or 'red') to filter only indices matching the specified health status.",
                        "schema": {
                            "$ref": "#/components/schemas/Health"
                        }
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "pri",
                        "in": "query",
                        "description": "Set to true to return stats only for primary shards.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Set to true to return stats only for primary shards."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    },
                    {
                        "name": "include_unloaded_segments",
                        "in": "query",
                        "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatIndices_WithIndex 200 response"
                    }
                },
                "x-operation-group": "cat.indices",
                "x-version-added": "1.0"
            }
        },
        "/_cat/master": {
            "get": {
                "description": "Returns information about the cluster-manager node.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-cluster_manager/"
                },
                "operationId": "CatMaster",
                "deprecated": true,
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatMaster 200 response"
                    }
                },
                "x-deprecation-message": "To promote inclusive language, please use '/_cat/cluster_manager' instead.",
                "x-operation-group": "cat.master",
                "x-version-added": "1.0",
                "x-version-deprecated": "1.0"
            }
        },
        "/_cat/nodeattrs": {
            "get": {
                "description": "Returns information about custom node attributes.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-nodeattrs/"
                },
                "operationId": "CatNodeattrs",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatNodeattrs 200 response"
                    }
                },
                "x-operation-group": "cat.nodeattrs",
                "x-version-added": "1.0"
            }
        },
        "/_cat/nodes": {
            "get": {
                "description": "Returns basic statistics about performance of cluster nodes.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-nodes/"
                },
                "operationId": "CatNodes",
                "parameters": [
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "full_id",
                        "in": "query",
                        "description": "Return the full node ID instead of the shortened version.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return the full node ID instead of the shortened version."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node.",
                            "x-version-deprecated": "1.0",
                            "x-deprecation-message": "This parameter does not cause this API to act locally.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatNodes 200 response"
                    }
                },
                "x-operation-group": "cat.nodes",
                "x-version-added": "1.0"
            }
        },
        "/_cat/pending_tasks": {
            "get": {
                "description": "Returns a concise representation of the cluster pending tasks.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-pending-tasks/"
                },
                "operationId": "CatPendingTasks",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatPendingTasks 200 response"
                    }
                },
                "x-operation-group": "cat.pending_tasks",
                "x-version-added": "1.0"
            }
        },
        "/_cat/pit_segments": {
            "get": {
                "description": "List segments for one or several PITs.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/search-plugins/point-in-time-api/"
                },
                "operationId": "CatPitSegments",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CatPitSegments_BodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "CatPitSegments 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatPitSegmentsResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "cat.pit_segments",
                "x-version-added": "2.4"
            }
        },
        "/_cat/pit_segments/_all": {
            "get": {
                "description": "Lists all active point-in-time segments.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/search-plugins/point-in-time-api/"
                },
                "operationId": "CatAllPitSegments",
                "responses": {
                    "200": {
                        "description": "CatAllPitSegments 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatAllPitSegmentsResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "cat.all_pit_segments",
                "x-version-added": "2.4"
            }
        },
        "/_cat/plugins": {
            "get": {
                "description": "Returns information about installed plugins across nodes node.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-plugins/"
                },
                "operationId": "CatPlugins",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatPlugins 200 response"
                    }
                },
                "x-operation-group": "cat.plugins",
                "x-version-added": "1.0"
            }
        },
        "/_cat/recovery": {
            "get": {
                "description": "Returns information about index shard recoveries, both on-going completed.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-plugins/"
                },
                "operationId": "CatRecovery",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "active_only",
                        "in": "query",
                        "description": "If `true`, the response only includes ongoing shard recoveries.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If `true`, the response only includes ongoing shard recoveries."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "detailed",
                        "in": "query",
                        "description": "If `true`, the response includes detailed information about shard recoveries.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If `true`, the response includes detailed information about shard recoveries."
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "index",
                        "in": "query",
                        "description": "Comma-separated list or wildcard expression of index names to limit the returned information.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list or wildcard expression of index names to limit the returned information."
                        },
                        "explode": true
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatRecovery 200 response"
                    }
                },
                "x-operation-group": "cat.recovery",
                "x-version-added": "1.0"
            }
        },
        "/_cat/recovery/{index}": {
            "get": {
                "description": "Returns information about index shard recoveries, both on-going completed.",
                "operationId": "CatRecovery_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list or wildcard expression of index names to limit the returned information.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list or wildcard expression of index names to limit the returned information.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "active_only",
                        "in": "query",
                        "description": "If `true`, the response only includes ongoing shard recoveries.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If `true`, the response only includes ongoing shard recoveries."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "detailed",
                        "in": "query",
                        "description": "If `true`, the response includes detailed information about shard recoveries.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If `true`, the response includes detailed information about shard recoveries."
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "index",
                        "in": "query",
                        "description": "Comma-separated list or wildcard expression of index names to limit the returned information.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list or wildcard expression of index names to limit the returned information."
                        },
                        "explode": true
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatRecovery_WithIndex 200 response"
                    }
                },
                "x-operation-group": "cat.recovery",
                "x-version-added": "1.0"
            }
        },
        "/_cat/repositories": {
            "get": {
                "description": "Returns information about snapshot repositories registered in the cluster.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-repositories/"
                },
                "operationId": "CatRepositories",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatRepositories 200 response"
                    }
                },
                "x-operation-group": "cat.repositories",
                "x-version-added": "1.0"
            }
        },
        "/_cat/segment_replication": {
            "get": {
                "description": "Returns information about both on-going and latest completed Segment Replication events.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-segment-replication/"
                },
                "operationId": "CatSegmentReplication",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "active_only",
                        "in": "query",
                        "description": "If `true`, the response only includes ongoing segment replication events.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If `true`, the response only includes ongoing segment replication events."
                        }
                    },
                    {
                        "name": "completed_only",
                        "in": "query",
                        "description": "If `true`, the response only includes latest completed segment replication events.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If `true`, the response only includes latest completed segment replication events."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "detailed",
                        "in": "query",
                        "description": "If `true`, the response includes detailed information about segment replications.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If `true`, the response includes detailed information about segment replications."
                        }
                    },
                    {
                        "name": "shards",
                        "in": "query",
                        "description": "Comma-separated list of shards to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of shards to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "index",
                        "in": "query",
                        "description": "Comma-separated list or wildcard expression of index names to limit the returned information.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list or wildcard expression of index names to limit the returned information."
                        },
                        "explode": true
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatSegmentReplication 200 response"
                    }
                },
                "x-operation-group": "cat.segment_replication",
                "x-version-added": "1.0"
            }
        },
        "/_cat/segment_replication/{index}": {
            "get": {
                "description": "Returns information about both on-going and latest completed Segment Replication events.",
                "operationId": "CatSegmentReplication_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list or wildcard expression of index names to limit the returned information.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list or wildcard expression of index names to limit the returned information.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "active_only",
                        "in": "query",
                        "description": "If `true`, the response only includes ongoing segment replication events.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If `true`, the response only includes ongoing segment replication events."
                        }
                    },
                    {
                        "name": "completed_only",
                        "in": "query",
                        "description": "If `true`, the response only includes latest completed segment replication events.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If `true`, the response only includes latest completed segment replication events."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "detailed",
                        "in": "query",
                        "description": "If `true`, the response includes detailed information about segment replications.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If `true`, the response includes detailed information about segment replications."
                        }
                    },
                    {
                        "name": "shards",
                        "in": "query",
                        "description": "Comma-separated list of shards to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of shards to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "index",
                        "in": "query",
                        "description": "Comma-separated list or wildcard expression of index names to limit the returned information.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list or wildcard expression of index names to limit the returned information."
                        },
                        "explode": true
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatSegmentReplication_WithIndex 200 response"
                    }
                },
                "x-operation-group": "cat.segment_replication",
                "x-version-added": "1.0"
            }
        },
        "/_cat/segments": {
            "get": {
                "description": "Provides low-level information about the segments in the shards of an index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-segments/"
                },
                "operationId": "CatSegments",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatSegments 200 response"
                    }
                },
                "x-operation-group": "cat.segments",
                "x-version-added": "1.0"
            }
        },
        "/_cat/segments/{index}": {
            "get": {
                "description": "Provides low-level information about the segments in the shards of an index.",
                "operationId": "CatSegments_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to limit the returned information.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to limit the returned information.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatSegments_WithIndex 200 response"
                    }
                },
                "x-operation-group": "cat.segments",
                "x-version-added": "1.0"
            }
        },
        "/_cat/shards": {
            "get": {
                "description": "Provides a detailed view of shard allocation on nodes.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-shards/"
                },
                "operationId": "CatShards",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatShards 200 response"
                    }
                },
                "x-operation-group": "cat.shards",
                "x-version-added": "1.0"
            }
        },
        "/_cat/shards/{index}": {
            "get": {
                "description": "Provides a detailed view of shard allocation on nodes.",
                "operationId": "CatShards_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to limit the returned information.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to limit the returned information.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "bytes",
                        "in": "query",
                        "description": "The unit in which to display byte values.",
                        "schema": {
                            "$ref": "#/components/schemas/Bytes"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatShards_WithIndex 200 response"
                    }
                },
                "x-operation-group": "cat.shards",
                "x-version-added": "1.0"
            }
        },
        "/_cat/snapshots": {
            "get": {
                "description": "Returns all snapshots in a specific repository.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-snapshots/"
                },
                "operationId": "CatSnapshots",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatSnapshots 200 response"
                    }
                },
                "x-operation-group": "cat.snapshots",
                "x-version-added": "1.0"
            }
        },
        "/_cat/snapshots/{repository}": {
            "get": {
                "description": "Returns all snapshots in a specific repository.",
                "operationId": "CatSnapshots_WithRepository",
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Comma-separated list of repository names.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of repository names.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatSnapshots_WithRepository 200 response"
                    }
                },
                "x-operation-group": "cat.snapshots",
                "x-version-added": "1.0"
            }
        },
        "/_cat/tasks": {
            "get": {
                "description": "Returns information about the tasks currently executing on one or more nodes in the cluster.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-tasks/"
                },
                "operationId": "CatTasks",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "nodes",
                        "in": "query",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes."
                        },
                        "explode": true
                    },
                    {
                        "name": "actions",
                        "in": "query",
                        "description": "Comma-separated list of actions that should be returned. Leave empty to return all.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of actions that should be returned. Leave empty to return all."
                        },
                        "explode": true
                    },
                    {
                        "name": "detailed",
                        "in": "query",
                        "description": "Return detailed task information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return detailed task information."
                        }
                    },
                    {
                        "name": "parent_task_id",
                        "in": "query",
                        "description": "Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.",
                        "schema": {
                            "type": "string",
                            "description": "Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all."
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "The unit in which to display time values.",
                        "schema": {
                            "$ref": "#/components/schemas/Time"
                        }
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatTasks 200 response"
                    }
                },
                "x-operation-group": "cat.tasks",
                "x-version-added": "1.0"
            }
        },
        "/_cat/templates": {
            "get": {
                "description": "Returns information about existing templates.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-templates/"
                },
                "operationId": "CatTemplates",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatTemplates 200 response"
                    }
                },
                "x-operation-group": "cat.templates",
                "x-version-added": "1.0"
            }
        },
        "/_cat/templates/{name}": {
            "get": {
                "description": "Returns information about existing templates.",
                "operationId": "CatTemplates_WithName",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the template."
                        },
                        "required": true
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatTemplates_WithName 200 response"
                    }
                },
                "x-operation-group": "cat.templates",
                "x-version-added": "1.0"
            }
        },
        "/_cat/thread_pool": {
            "get": {
                "description": "Returns cluster-wide thread pool statistics per node.\nBy default the active, queue and rejected statistics are returned for all thread pools.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cat/cat-thread-pool/"
                },
                "operationId": "CatThreadPool",
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The multiplier in which to display values.",
                        "schema": {
                            "type": "integer",
                            "description": "The multiplier in which to display values.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatThreadPool 200 response"
                    }
                },
                "x-operation-group": "cat.thread_pool",
                "x-version-added": "1.0"
            }
        },
        "/_cat/thread_pool/{thread_pool_patterns}": {
            "get": {
                "description": "Returns cluster-wide thread pool statistics per node.\nBy default the active, queue and rejected statistics are returned for all thread pools.",
                "operationId": "CatThreadPool_WithThreadPoolPatterns",
                "parameters": [
                    {
                        "name": "thread_pool_patterns",
                        "in": "path",
                        "description": "Comma-separated list of regular-expressions to filter the thread pools in the output.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of regular-expressions to filter the thread pools in the output.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "A short version of the Accept header, e.g. json, yaml.",
                        "schema": {
                            "type": "string",
                            "description": "A short version of the Accept header, e.g. json, yaml."
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The multiplier in which to display values.",
                        "schema": {
                            "type": "integer",
                            "description": "The multiplier in which to display values.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Comma-separated list of column names to display.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names to display."
                        },
                        "explode": true
                    },
                    {
                        "name": "help",
                        "in": "query",
                        "description": "Return help information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return help information."
                        }
                    },
                    {
                        "name": "s",
                        "in": "query",
                        "description": "Comma-separated list of column names or column aliases to sort by.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of column names or column aliases to sort by."
                        },
                        "explode": true
                    },
                    {
                        "name": "v",
                        "in": "query",
                        "description": "Verbose mode. Display column headers.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display column headers."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CatThreadPool_WithThreadPoolPatterns 200 response"
                    }
                },
                "x-operation-group": "cat.thread_pool",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/allocation/explain": {
            "get": {
                "description": "Provides explanations for shard allocations in the cluster.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-allocation/"
                },
                "operationId": "ClusterAllocationExplain_Get",
                "parameters": [
                    {
                        "name": "include_yes_decisions",
                        "in": "query",
                        "description": "Return 'YES' decisions in explanation.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return 'YES' decisions in explanation."
                        }
                    },
                    {
                        "name": "include_disk_info",
                        "in": "query",
                        "description": "Return information about disk usage and shard sizes.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return information about disk usage and shard sizes."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterAllocationExplain_Get 200 response"
                    }
                },
                "x-operation-group": "cluster.allocation_explain",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Provides explanations for shard allocations in the cluster.",
                "operationId": "ClusterAllocationExplain_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterAllocationExplain_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "include_yes_decisions",
                        "in": "query",
                        "description": "Return 'YES' decisions in explanation.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return 'YES' decisions in explanation."
                        }
                    },
                    {
                        "name": "include_disk_info",
                        "in": "query",
                        "description": "Return information about disk usage and shard sizes.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return information about disk usage and shard sizes."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterAllocationExplain_Post 200 response"
                    }
                },
                "x-operation-group": "cluster.allocation_explain",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/decommission/awareness/": {
            "delete": {
                "description": "Delete any existing decommission.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-decommission/#example-decommissioning-and-recommissioning-a-zone"
                },
                "operationId": "ClusterDeleteDecommissionAwareness",
                "responses": {
                    "200": {
                        "description": "ClusterDeleteDecommissionAwareness 200 response"
                    }
                },
                "x-operation-group": "cluster.delete_decommission_awareness",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/decommission/awareness/{awareness_attribute_name}/_status": {
            "get": {
                "description": "Get details and status of decommissioned attribute.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-decommission/#example-getting-zone-decommission-status"
                },
                "operationId": "ClusterGetDecommissionAwareness",
                "parameters": [
                    {
                        "name": "awareness_attribute_name",
                        "in": "path",
                        "description": "Awareness attribute name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Awareness attribute name."
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterGetDecommissionAwareness 200 response"
                    }
                },
                "x-operation-group": "cluster.get_decommission_awareness",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/decommission/awareness/{awareness_attribute_name}/{awareness_attribute_value}": {
            "put": {
                "description": "Decommissions an awareness attribute.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-decommission/#example-decommissioning-and-recommissioning-a-zone"
                },
                "operationId": "ClusterPutDecommissionAwareness",
                "parameters": [
                    {
                        "name": "awareness_attribute_name",
                        "in": "path",
                        "description": "Awareness attribute name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Awareness attribute name."
                        },
                        "required": true
                    },
                    {
                        "name": "awareness_attribute_value",
                        "in": "path",
                        "description": "Awareness attribute value.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Awareness attribute value."
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterPutDecommissionAwareness 200 response"
                    }
                },
                "x-operation-group": "cluster.put_decommission_awareness",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/health": {
            "get": {
                "description": "Returns basic information about the health of the cluster.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-health/"
                },
                "operationId": "ClusterHealth",
                "parameters": [
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Specify the level of detail for returned information.",
                        "schema": {
                            "$ref": "#/components/schemas/ClusterHealthLevel"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Wait until the specified number of shards is active.",
                        "schema": {
                            "type": "string",
                            "description": "Wait until the specified number of shards is active."
                        }
                    },
                    {
                        "name": "wait_for_nodes",
                        "in": "query",
                        "description": "Wait until the specified number of nodes is available.",
                        "schema": {
                            "type": "string",
                            "description": "Wait until the specified number of nodes is available."
                        }
                    },
                    {
                        "name": "wait_for_events",
                        "in": "query",
                        "description": "Wait until all currently queued events with the given priority are processed.",
                        "schema": {
                            "$ref": "#/components/schemas/WaitForEvents"
                        }
                    },
                    {
                        "name": "wait_for_no_relocating_shards",
                        "in": "query",
                        "description": "Whether to wait until there are no relocating shards in the cluster.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to wait until there are no relocating shards in the cluster."
                        }
                    },
                    {
                        "name": "wait_for_no_initializing_shards",
                        "in": "query",
                        "description": "Whether to wait until there are no initializing shards in the cluster.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to wait until there are no initializing shards in the cluster."
                        }
                    },
                    {
                        "name": "wait_for_status",
                        "in": "query",
                        "description": "Wait until cluster is in a specific state.",
                        "schema": {
                            "$ref": "#/components/schemas/WaitForStatus"
                        }
                    },
                    {
                        "name": "awareness_attribute",
                        "in": "query",
                        "description": "The awareness attribute for which the health is required.",
                        "schema": {
                            "type": "string",
                            "description": "The awareness attribute for which the health is required."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterHealth 200 response"
                    }
                },
                "x-operation-group": "cluster.health",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/health/{index}": {
            "get": {
                "description": "Returns basic information about the health of the cluster.",
                "operationId": "ClusterHealth_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Limit the information returned to specific indicies.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Limit the information returned to specific indicies.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Specify the level of detail for returned information.",
                        "schema": {
                            "$ref": "#/components/schemas/ClusterHealthLevel"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Wait until the specified number of shards is active.",
                        "schema": {
                            "type": "string",
                            "description": "Wait until the specified number of shards is active."
                        }
                    },
                    {
                        "name": "wait_for_nodes",
                        "in": "query",
                        "description": "Wait until the specified number of nodes is available.",
                        "schema": {
                            "type": "string",
                            "description": "Wait until the specified number of nodes is available."
                        }
                    },
                    {
                        "name": "wait_for_events",
                        "in": "query",
                        "description": "Wait until all currently queued events with the given priority are processed.",
                        "schema": {
                            "$ref": "#/components/schemas/WaitForEvents"
                        }
                    },
                    {
                        "name": "wait_for_no_relocating_shards",
                        "in": "query",
                        "description": "Whether to wait until there are no relocating shards in the cluster.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to wait until there are no relocating shards in the cluster."
                        }
                    },
                    {
                        "name": "wait_for_no_initializing_shards",
                        "in": "query",
                        "description": "Whether to wait until there are no initializing shards in the cluster.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to wait until there are no initializing shards in the cluster."
                        }
                    },
                    {
                        "name": "wait_for_status",
                        "in": "query",
                        "description": "Wait until cluster is in a specific state.",
                        "schema": {
                            "$ref": "#/components/schemas/WaitForStatus"
                        }
                    },
                    {
                        "name": "awareness_attribute",
                        "in": "query",
                        "description": "The awareness attribute for which the health is required.",
                        "schema": {
                            "type": "string",
                            "description": "The awareness attribute for which the health is required."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterHealth_WithIndex 200 response"
                    }
                },
                "x-operation-group": "cluster.health",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/nodes/hot_threads": {
            "get": {
                "description": "Returns information about hot threads on each node in the cluster.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-hot-threads/"
                },
                "operationId": "NodesHotThreads_DeprecatedDash",
                "deprecated": true,
                "parameters": [
                    {
                        "name": "interval",
                        "in": "query",
                        "description": "The interval for the second sampling of threads.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "The interval for the second sampling of threads.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "snapshots",
                        "in": "query",
                        "description": "Number of samples of thread stacktrace.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of samples of thread stacktrace.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "threads",
                        "in": "query",
                        "description": "Specify the number of threads to provide information for.",
                        "schema": {
                            "type": "integer",
                            "default": 3,
                            "description": "Specify the number of threads to provide information for.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_idle_threads",
                        "in": "query",
                        "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue."
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type to sample.",
                        "schema": {
                            "$ref": "#/components/schemas/SampleType"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesHotThreads_DeprecatedDash 200 response"
                    }
                },
                "x-deprecation-message": "The hot accepts /_cluster/nodes as prefix for backwards compatibility reasons",
                "x-ignorable": true,
                "x-operation-group": "nodes.hot_threads",
                "x-version-added": "1.0",
                "x-version-deprecated": "1.0"
            }
        },
        "/_cluster/nodes/hotthreads": {
            "get": {
                "description": "Returns information about hot threads on each node in the cluster.",
                "operationId": "NodesHotThreads_DeprecatedCluster",
                "deprecated": true,
                "parameters": [
                    {
                        "name": "interval",
                        "in": "query",
                        "description": "The interval for the second sampling of threads.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "The interval for the second sampling of threads.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "snapshots",
                        "in": "query",
                        "description": "Number of samples of thread stacktrace.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of samples of thread stacktrace.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "threads",
                        "in": "query",
                        "description": "Specify the number of threads to provide information for.",
                        "schema": {
                            "type": "integer",
                            "default": 3,
                            "description": "Specify the number of threads to provide information for.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_idle_threads",
                        "in": "query",
                        "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue."
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type to sample.",
                        "schema": {
                            "$ref": "#/components/schemas/SampleType"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesHotThreads_DeprecatedCluster 200 response"
                    }
                },
                "x-deprecation-message": "The hot threads API accepts `hotthreads` but only `hot_threads` is documented",
                "x-ignorable": true,
                "x-operation-group": "nodes.hot_threads",
                "x-version-added": "1.0",
                "x-version-deprecated": "1.0"
            }
        },
        "/_cluster/nodes/{node_id}/hot_threads": {
            "get": {
                "description": "Returns information about hot threads on each node in the cluster.",
                "operationId": "NodesHotThreads_WithNodeId_DeprecatedDash",
                "deprecated": true,
                "parameters": [
                    {
                        "name": "node_id",
                        "in": "path",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "interval",
                        "in": "query",
                        "description": "The interval for the second sampling of threads.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "The interval for the second sampling of threads.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "snapshots",
                        "in": "query",
                        "description": "Number of samples of thread stacktrace.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of samples of thread stacktrace.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "threads",
                        "in": "query",
                        "description": "Specify the number of threads to provide information for.",
                        "schema": {
                            "type": "integer",
                            "default": 3,
                            "description": "Specify the number of threads to provide information for.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_idle_threads",
                        "in": "query",
                        "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue."
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type to sample.",
                        "schema": {
                            "$ref": "#/components/schemas/SampleType"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesHotThreads_WithNodeId_DeprecatedDash 200 response"
                    }
                },
                "x-deprecation-message": "The hot accepts /_cluster/nodes as prefix for backwards compatibility reasons",
                "x-ignorable": true,
                "x-operation-group": "nodes.hot_threads",
                "x-version-added": "1.0",
                "x-version-deprecated": "1.0"
            }
        },
        "/_cluster/nodes/{node_id}/hotthreads": {
            "get": {
                "description": "Returns information about hot threads on each node in the cluster.",
                "operationId": "NodesHotThreads_WithNodeId_DeprecatedCluster",
                "deprecated": true,
                "parameters": [
                    {
                        "name": "node_id",
                        "in": "path",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "interval",
                        "in": "query",
                        "description": "The interval for the second sampling of threads.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "The interval for the second sampling of threads.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "snapshots",
                        "in": "query",
                        "description": "Number of samples of thread stacktrace.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of samples of thread stacktrace.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "threads",
                        "in": "query",
                        "description": "Specify the number of threads to provide information for.",
                        "schema": {
                            "type": "integer",
                            "default": 3,
                            "description": "Specify the number of threads to provide information for.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_idle_threads",
                        "in": "query",
                        "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue."
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type to sample.",
                        "schema": {
                            "$ref": "#/components/schemas/SampleType"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesHotThreads_WithNodeId_DeprecatedCluster 200 response"
                    }
                },
                "x-deprecation-message": "The hot threads API accepts `hotthreads` but only `hot_threads` is documented",
                "x-ignorable": true,
                "x-operation-group": "nodes.hot_threads",
                "x-version-added": "1.0",
                "x-version-deprecated": "1.0"
            }
        },
        "/_cluster/pending_tasks": {
            "get": {
                "description": "Returns a list of any cluster-level changes (e.g. create index, update mapping,\nallocate or fail shard) which have not yet been executed.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "ClusterPendingTasks",
                "parameters": [
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterPendingTasks 200 response"
                    }
                },
                "x-operation-group": "cluster.pending_tasks",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/reroute": {
            "post": {
                "description": "Allows to manually change the allocation of individual shards in the cluster.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "ClusterReroute",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterReroute_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "dry_run",
                        "in": "query",
                        "description": "Simulate the operation only and return the resulting state.",
                        "schema": {
                            "type": "boolean",
                            "description": "Simulate the operation only and return the resulting state."
                        }
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Return an explanation of why the commands can or cannot be executed.",
                        "schema": {
                            "type": "boolean",
                            "description": "Return an explanation of why the commands can or cannot be executed."
                        }
                    },
                    {
                        "name": "retry_failed",
                        "in": "query",
                        "description": "Retries allocation of shards that are blocked due to too many subsequent allocation failures.",
                        "schema": {
                            "type": "boolean",
                            "description": "Retries allocation of shards that are blocked due to too many subsequent allocation failures."
                        }
                    },
                    {
                        "name": "metric",
                        "in": "query",
                        "description": "Limit the information returned to the specified metrics. Defaults to all but metadata.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ClusterRerouteMetric_Member"
                            },
                            "description": "Limit the information returned to the specified metrics. Defaults to all but metadata."
                        },
                        "explode": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterReroute 200 response"
                    }
                },
                "x-operation-group": "cluster.reroute",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/routing/awareness/weights": {
            "delete": {
                "description": "Delete weighted shard routing weights.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-awareness/#example-deleting-weights"
                },
                "operationId": "ClusterDeleteWeightedRouting",
                "responses": {
                    "200": {
                        "description": "ClusterDeleteWeightedRouting 200 response"
                    }
                },
                "x-operation-group": "cluster.delete_weighted_routing",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/routing/awareness/{attribute}/weights": {
            "get": {
                "description": "Fetches weighted shard routing weights.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-awareness/#example-getting-weights-for-all-zones"
                },
                "operationId": "ClusterGetWeightedRouting",
                "parameters": [
                    {
                        "name": "attribute",
                        "in": "path",
                        "description": "Awareness attribute name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Awareness attribute name."
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterGetWeightedRouting 200 response"
                    }
                },
                "x-operation-group": "cluster.get_weighted_routing",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Updates weighted shard routing weights.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-awareness/#example-weighted-round-robin-search"
                },
                "operationId": "ClusterPutWeightedRouting",
                "parameters": [
                    {
                        "name": "attribute",
                        "in": "path",
                        "description": "Awareness attribute name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Awareness attribute name."
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterPutWeightedRouting 200 response"
                    }
                },
                "x-operation-group": "cluster.put_weighted_routing",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/settings": {
            "get": {
                "description": "Returns cluster settings.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-settings/"
                },
                "operationId": "ClusterGetSettings",
                "parameters": [
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "include_defaults",
                        "in": "query",
                        "description": "Whether to return all default clusters setting.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to return all default clusters setting."
                        },
                        "examples": {
                            "ClusterGetSettings_example1": {
                                "summary": "Examples for Get cluster settings Operation.",
                                "description": "",
                                "value": true
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterGetSettings 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClusterGetSettingsResponseContent"
                                },
                                "examples": {
                                    "ClusterGetSettings_example1": {
                                        "summary": "Examples for Get cluster settings Operation.",
                                        "description": "",
                                        "value": {}
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "cluster.get_settings",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Updates the cluster settings.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cluster-settings/"
                },
                "operationId": "ClusterPutSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterPutSettings_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterPutSettings 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClusterPutSettingsResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "cluster.put_settings",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/state": {
            "get": {
                "description": "Returns a comprehensive information about the state of the cluster.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "ClusterState",
                "parameters": [
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "wait_for_metadata_version",
                        "in": "query",
                        "description": "Wait for the metadata version to be equal or greater than the specified metadata version.",
                        "schema": {
                            "type": "integer",
                            "description": "Wait for the metadata version to be equal or greater than the specified metadata version.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "wait_for_timeout",
                        "in": "query",
                        "description": "The maximum time to wait for wait_for_metadata_version before timing out.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "The maximum time to wait for wait_for_metadata_version before timing out.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterState 200 response"
                    }
                },
                "x-operation-group": "cluster.state",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/state/{metric}": {
            "get": {
                "description": "Returns a comprehensive information about the state of the cluster.",
                "operationId": "ClusterState_WithMetric",
                "parameters": [
                    {
                        "name": "metric",
                        "in": "path",
                        "description": "Limit the information returned to the specified metrics.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Limit the information returned to the specified metrics.",
                            "x-enum-options": [
                                "_all",
                                "blocks",
                                "metadata",
                                "nodes",
                                "routing_table",
                                "routing_nodes",
                                "master_node",
                                "cluster_manager_node",
                                "version"
                            ],
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "wait_for_metadata_version",
                        "in": "query",
                        "description": "Wait for the metadata version to be equal or greater than the specified metadata version.",
                        "schema": {
                            "type": "integer",
                            "description": "Wait for the metadata version to be equal or greater than the specified metadata version.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "wait_for_timeout",
                        "in": "query",
                        "description": "The maximum time to wait for wait_for_metadata_version before timing out.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "The maximum time to wait for wait_for_metadata_version before timing out.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterState_WithMetric 200 response"
                    }
                },
                "x-operation-group": "cluster.state",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/state/{metric}/{index}": {
            "get": {
                "description": "Returns a comprehensive information about the state of the cluster.",
                "operationId": "ClusterState_WithIndexMetric",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "metric",
                        "in": "path",
                        "description": "Limit the information returned to the specified metrics.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Limit the information returned to the specified metrics.",
                            "x-enum-options": [
                                "_all",
                                "blocks",
                                "metadata",
                                "nodes",
                                "routing_table",
                                "routing_nodes",
                                "master_node",
                                "cluster_manager_node",
                                "version"
                            ],
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "wait_for_metadata_version",
                        "in": "query",
                        "description": "Wait for the metadata version to be equal or greater than the specified metadata version.",
                        "schema": {
                            "type": "integer",
                            "description": "Wait for the metadata version to be equal or greater than the specified metadata version.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "wait_for_timeout",
                        "in": "query",
                        "description": "The maximum time to wait for wait_for_metadata_version before timing out.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "The maximum time to wait for wait_for_metadata_version before timing out.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterState_WithIndexMetric 200 response"
                    }
                },
                "x-operation-group": "cluster.state",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/stats": {
            "get": {
                "description": "Returns high-level overview of cluster statistics.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/cluster-api/cluster-stats/"
                },
                "operationId": "ClusterStats",
                "parameters": [
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterStats 200 response"
                    }
                },
                "x-operation-group": "cluster.stats",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/stats/nodes/{node_id}": {
            "get": {
                "description": "Returns high-level overview of cluster statistics.",
                "operationId": "ClusterStats_WithNodeId",
                "parameters": [
                    {
                        "name": "node_id",
                        "in": "path",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterStats_WithNodeId 200 response"
                    }
                },
                "x-operation-group": "cluster.stats",
                "x-version-added": "1.0"
            }
        },
        "/_cluster/voting_config_exclusions": {
            "delete": {
                "description": "Clears cluster voting config exclusions.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "ClusterDeleteVotingConfigExclusions",
                "parameters": [
                    {
                        "name": "wait_for_removal",
                        "in": "query",
                        "description": "Specifies whether to wait for all excluded nodes to be removed from the cluster before clearing the voting configuration exclusions list.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies whether to wait for all excluded nodes to be removed from the cluster before clearing the voting configuration exclusions list."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterDeleteVotingConfigExclusions 200 response"
                    }
                },
                "x-operation-group": "cluster.delete_voting_config_exclusions",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Updates the cluster voting config exclusions by node ids or node names.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "ClusterPostVotingConfigExclusions",
                "parameters": [
                    {
                        "name": "node_ids",
                        "in": "query",
                        "description": "Comma-separated list of the persistent ids of the nodes to exclude from the voting configuration. If specified, you may not also specify ?node_names.",
                        "schema": {
                            "type": "string",
                            "description": "Comma-separated list of the persistent ids of the nodes to exclude from the voting configuration. If specified, you may not also specify ?node_names."
                        }
                    },
                    {
                        "name": "node_names",
                        "in": "query",
                        "description": "Comma-separated list of the names of the nodes to exclude from the voting configuration. If specified, you may not also specify ?node_ids.",
                        "schema": {
                            "type": "string",
                            "description": "Comma-separated list of the names of the nodes to exclude from the voting configuration. If specified, you may not also specify ?node_ids."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterPostVotingConfigExclusions 200 response"
                    }
                },
                "x-operation-group": "cluster.post_voting_config_exclusions",
                "x-version-added": "1.0"
            }
        },
        "/_component_template": {
            "get": {
                "description": "Returns one or more component templates.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "ClusterGetComponentTemplate",
                "parameters": [
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterGetComponentTemplate 200 response"
                    }
                },
                "x-operation-group": "cluster.get_component_template",
                "x-version-added": "1.0"
            }
        },
        "/_component_template/{name}": {
            "delete": {
                "description": "Deletes a component template.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "ClusterDeleteComponentTemplate",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the template."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterDeleteComponentTemplate 200 response"
                    }
                },
                "x-operation-group": "cluster.delete_component_template",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Returns one or more component templates.",
                "operationId": "ClusterGetComponentTemplate_WithName",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The Comma-separated names of the component templates.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The Comma-separated names of the component templates.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterGetComponentTemplate_WithName 200 response"
                    }
                },
                "x-operation-group": "cluster.get_component_template",
                "x-version-added": "1.0"
            },
            "head": {
                "description": "Returns information about whether a particular component template exist.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "ClusterExistsComponentTemplate",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the template."
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterExistsComponentTemplate 200 response"
                    }
                },
                "x-operation-group": "cluster.exists_component_template",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Creates or updates a component template.",
                "operationId": "ClusterPutComponentTemplate_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterPutComponentTemplate_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the template."
                        },
                        "required": true
                    },
                    {
                        "name": "create",
                        "in": "query",
                        "description": "Whether the index template should only be added if new or can also replace an existing one.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether the index template should only be added if new or can also replace an existing one."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterPutComponentTemplate_Post 200 response"
                    }
                },
                "x-operation-group": "cluster.put_component_template",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or updates a component template.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/im-plugin/index-templates/#use-component-templates-to-create-an-index-template"
                },
                "operationId": "ClusterPutComponentTemplate_Put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClusterPutComponentTemplate_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the template."
                        },
                        "required": true
                    },
                    {
                        "name": "create",
                        "in": "query",
                        "description": "Whether the index template should only be added if new or can also replace an existing one.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether the index template should only be added if new or can also replace an existing one."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClusterPutComponentTemplate_Put 200 response"
                    }
                },
                "x-operation-group": "cluster.put_component_template",
                "x-version-added": "1.0"
            }
        },
        "/_count": {
            "get": {
                "description": "Returns number of documents matching a query.",
                "operationId": "Count_Get",
                "parameters": [
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "min_score",
                        "in": "query",
                        "description": "Include only documents with a specific `_score` value in the result.",
                        "schema": {
                            "type": "integer",
                            "description": "Include only documents with a specific `_score` value in the result.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "terminate_after",
                        "in": "query",
                        "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                        "schema": {
                            "type": "integer",
                            "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count_Get 200 response"
                    }
                },
                "x-operation-group": "count",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns number of documents matching a query.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/count/"
                },
                "operationId": "Count_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Count_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "min_score",
                        "in": "query",
                        "description": "Include only documents with a specific `_score` value in the result.",
                        "schema": {
                            "type": "integer",
                            "description": "Include only documents with a specific `_score` value in the result.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "terminate_after",
                        "in": "query",
                        "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                        "schema": {
                            "type": "integer",
                            "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count_Post 200 response"
                    }
                },
                "x-operation-group": "count",
                "x-version-added": "1.0"
            }
        },
        "/_dangling": {
            "get": {
                "description": "Returns all dangling indices.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/dangling-index/"
                },
                "operationId": "DanglingIndicesListDanglingIndices",
                "responses": {
                    "200": {
                        "description": "DanglingIndicesListDanglingIndices 200 response"
                    }
                },
                "x-operation-group": "dangling_indices.list_dangling_indices",
                "x-version-added": "1.0"
            }
        },
        "/_dangling/{index_uuid}": {
            "delete": {
                "description": "Deletes the specified dangling index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/dangling-index/"
                },
                "operationId": "DanglingIndicesDeleteDanglingIndex",
                "parameters": [
                    {
                        "name": "index_uuid",
                        "in": "path",
                        "description": "The UUID of the dangling index.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The UUID of the dangling index."
                        },
                        "required": true
                    },
                    {
                        "name": "accept_data_loss",
                        "in": "query",
                        "description": "Must be set to true in order to delete the dangling index.",
                        "schema": {
                            "type": "boolean",
                            "description": "Must be set to true in order to delete the dangling index."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DanglingIndicesDeleteDanglingIndex 200 response"
                    }
                },
                "x-operation-group": "dangling_indices.delete_dangling_index",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Imports the specified dangling index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/dangling-index/"
                },
                "operationId": "DanglingIndicesImportDanglingIndex",
                "parameters": [
                    {
                        "name": "index_uuid",
                        "in": "path",
                        "description": "The UUID of the dangling index.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The UUID of the dangling index."
                        },
                        "required": true
                    },
                    {
                        "name": "accept_data_loss",
                        "in": "query",
                        "description": "Must be set to true in order to import the dangling index.",
                        "schema": {
                            "type": "boolean",
                            "description": "Must be set to true in order to import the dangling index."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DanglingIndicesImportDanglingIndex 200 response"
                    }
                },
                "x-operation-group": "dangling_indices.import_dangling_index",
                "x-version-added": "1.0"
            }
        },
        "/_data_stream": {
            "get": {
                "description": "Returns data streams.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/im-plugin/data-streams/"
                },
                "operationId": "IndicesGetDataStream",
                "responses": {
                    "200": {
                        "description": "IndicesGetDataStream 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesGetDataStreamResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.get_data_stream",
                "x-version-added": "1.0"
            }
        },
        "/_data_stream/_stats": {
            "get": {
                "description": "Provides statistics on operations happening in a data stream.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/im-plugin/data-streams/"
                },
                "operationId": "IndicesDataStreamsStats",
                "responses": {
                    "200": {
                        "description": "IndicesDataStreamsStats 200 response"
                    }
                },
                "x-operation-group": "indices.data_streams_stats",
                "x-version-added": "1.0"
            }
        },
        "/_data_stream/{name}": {
            "delete": {
                "description": "Deletes a data stream.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/im-plugin/data-streams/"
                },
                "operationId": "IndicesDeleteDataStream",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of data streams; use `_all` or empty string to perform the operation on all data streams.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of data streams; use `_all` or empty string to perform the operation on all data streams.",
                            "x-data-type": "array"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesDeleteDataStream 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesDeleteDataStreamResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.delete_data_stream",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Returns data streams.",
                "operationId": "IndicesGetDataStream_WithName",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of data streams; use `_all` or empty string to perform the operation on all data streams.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of data streams; use `_all` or empty string to perform the operation on all data streams.",
                            "x-data-type": "array"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetDataStream_WithName 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesGetDataStream_WithNameResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.get_data_stream",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or updates a data stream.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/im-plugin/data-streams/"
                },
                "operationId": "IndicesCreateDataStream",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesCreateDataStream_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the data stream.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the data stream."
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesCreateDataStream 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesCreateDataStreamResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.create_data_stream",
                "x-version-added": "1.0"
            }
        },
        "/_data_stream/{name}/_stats": {
            "get": {
                "description": "Provides statistics on operations happening in a data stream.",
                "operationId": "IndicesDataStreamsStats_WithName",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of data streams; use `_all` or empty string to perform the operation on all data streams.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of data streams; use `_all` or empty string to perform the operation on all data streams.",
                            "x-data-type": "array"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesDataStreamsStats_WithName 200 response"
                    }
                },
                "x-operation-group": "indices.data_streams_stats",
                "x-version-added": "1.0"
            }
        },
        "/_delete_by_query/{task_id}/_rethrottle": {
            "post": {
                "description": "Changes the number of requests per second for a particular Delete By Query operation.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "DeleteByQueryRethrottle",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "description": "The task id to rethrottle.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The task id to rethrottle."
                        },
                        "required": true
                    },
                    {
                        "name": "requests_per_second",
                        "in": "query",
                        "description": "The throttle for this request in sub-requests per second. -1 means no throttle.",
                        "schema": {
                            "type": "integer",
                            "description": "The throttle for this request in sub-requests per second. -1 means no throttle.",
                            "format": "int32"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DeleteByQueryRethrottle 200 response"
                    }
                },
                "x-operation-group": "delete_by_query_rethrottle",
                "x-version-added": "1.0"
            }
        },
        "/_field_caps": {
            "get": {
                "description": "Returns the information about the capabilities of fields among multiple indices.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/field-types/supported-field-types/alias/#using-aliases-in-field-capabilities-api-operations"
                },
                "operationId": "FieldCaps_Get",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of field names.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of field names."
                        },
                        "explode": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "include_unmapped",
                        "in": "query",
                        "description": "Indicates whether unmapped fields should be included in the response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether unmapped fields should be included in the response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FieldCaps_Get 200 response"
                    }
                },
                "x-operation-group": "field_caps",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns the information about the capabilities of fields among multiple indices.",
                "operationId": "FieldCaps_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FieldCaps_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of field names.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of field names."
                        },
                        "explode": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "include_unmapped",
                        "in": "query",
                        "description": "Indicates whether unmapped fields should be included in the response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether unmapped fields should be included in the response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FieldCaps_Post 200 response"
                    }
                },
                "x-operation-group": "field_caps",
                "x-version-added": "1.0"
            }
        },
        "/_flush": {
            "get": {
                "description": "Performs the flush operation on one or more indices.",
                "operationId": "IndicesFlush_Get",
                "parameters": [
                    {
                        "name": "force",
                        "in": "query",
                        "description": "Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)."
                        }
                    },
                    {
                        "name": "wait_if_ongoing",
                        "in": "query",
                        "description": "If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. If set to false the flush will be skipped iff if another flush operation is already running.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. If set to false the flush will be skipped iff if another flush operation is already running."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesFlush_Get 200 response"
                    }
                },
                "x-operation-group": "indices.flush",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Performs the flush operation on one or more indices.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesFlush_Post",
                "parameters": [
                    {
                        "name": "force",
                        "in": "query",
                        "description": "Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)."
                        }
                    },
                    {
                        "name": "wait_if_ongoing",
                        "in": "query",
                        "description": "If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. If set to false the flush will be skipped iff if another flush operation is already running.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. If set to false the flush will be skipped iff if another flush operation is already running."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesFlush_Post 200 response"
                    }
                },
                "x-operation-group": "indices.flush",
                "x-version-added": "1.0"
            }
        },
        "/_forcemerge": {
            "post": {
                "description": "Performs the force merge operation on one or more indices.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesForcemerge",
                "parameters": [
                    {
                        "name": "flush",
                        "in": "query",
                        "description": "Specify whether the index should be flushed after performing the operation.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specify whether the index should be flushed after performing the operation."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "max_num_segments",
                        "in": "query",
                        "description": "The number of segments the index should be merged into (default: dynamic).",
                        "schema": {
                            "type": "integer",
                            "description": "The number of segments the index should be merged into (default: dynamic).",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "only_expunge_deletes",
                        "in": "query",
                        "description": "Specify whether the operation should only expunge deleted documents.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether the operation should only expunge deleted documents."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesForcemerge 200 response"
                    }
                },
                "x-operation-group": "indices.forcemerge",
                "x-version-added": "1.0"
            }
        },
        "/_index_template": {
            "get": {
                "description": "Returns an index template.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/im-plugin/index-templates/"
                },
                "operationId": "IndicesGetIndexTemplate",
                "parameters": [
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetIndexTemplate 200 response"
                    }
                },
                "x-operation-group": "indices.get_index_template",
                "x-version-added": "1.0"
            }
        },
        "/_index_template/_simulate": {
            "post": {
                "description": "Simulate resolving the given template name or body.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesSimulateTemplate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesSimulateTemplate_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "create",
                        "in": "query",
                        "description": "Whether the index template we optionally defined in the body should only be dry-run added if new or can also replace an existing one.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether the index template we optionally defined in the body should only be dry-run added if new or can also replace an existing one."
                        }
                    },
                    {
                        "name": "cause",
                        "in": "query",
                        "description": "User defined reason for dry-run creating the new template for simulation purposes.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "description": "User defined reason for dry-run creating the new template for simulation purposes."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesSimulateTemplate 200 response"
                    }
                },
                "x-operation-group": "indices.simulate_template",
                "x-version-added": "1.0"
            }
        },
        "/_index_template/_simulate/{name}": {
            "post": {
                "description": "Simulate resolving the given template name or body.",
                "operationId": "IndicesSimulateTemplate_WithName",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesSimulateTemplate_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the template."
                        },
                        "required": true
                    },
                    {
                        "name": "create",
                        "in": "query",
                        "description": "Whether the index template we optionally defined in the body should only be dry-run added if new or can also replace an existing one.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether the index template we optionally defined in the body should only be dry-run added if new or can also replace an existing one."
                        }
                    },
                    {
                        "name": "cause",
                        "in": "query",
                        "description": "User defined reason for dry-run creating the new template for simulation purposes.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "description": "User defined reason for dry-run creating the new template for simulation purposes."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesSimulateTemplate_WithName 200 response"
                    }
                },
                "x-operation-group": "indices.simulate_template",
                "x-version-added": "1.0"
            }
        },
        "/_index_template/_simulate_index/{name}": {
            "post": {
                "description": "Simulate matching the given index name against the index templates in the system.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesSimulateIndexTemplate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesSimulateIndexTemplate_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the index (it must be a concrete index name).",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the index (it must be a concrete index name)."
                        },
                        "required": true
                    },
                    {
                        "name": "create",
                        "in": "query",
                        "description": "Whether the index template we optionally defined in the body should only be dry-run added if new or can also replace an existing one.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether the index template we optionally defined in the body should only be dry-run added if new or can also replace an existing one."
                        }
                    },
                    {
                        "name": "cause",
                        "in": "query",
                        "description": "User defined reason for dry-run creating the new template for simulation purposes.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "description": "User defined reason for dry-run creating the new template for simulation purposes."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesSimulateIndexTemplate 200 response"
                    }
                },
                "x-operation-group": "indices.simulate_index_template",
                "x-version-added": "1.0"
            }
        },
        "/_index_template/{name}": {
            "delete": {
                "description": "Deletes an index template.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/im-plugin/index-templates/#delete-a-template"
                },
                "operationId": "IndicesDeleteIndexTemplate",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the template."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesDeleteIndexTemplate 200 response"
                    }
                },
                "x-operation-group": "indices.delete_index_template",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Returns an index template.",
                "operationId": "IndicesGetIndexTemplate_WithName",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated names of the index templates.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated names of the index templates.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetIndexTemplate_WithName 200 response"
                    }
                },
                "x-operation-group": "indices.get_index_template",
                "x-version-added": "1.0"
            },
            "head": {
                "description": "Returns information about whether a particular index template exists.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/im-plugin/index-templates/"
                },
                "operationId": "IndicesExistsIndexTemplate",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the template."
                        },
                        "required": true
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesExistsIndexTemplate 200 response"
                    }
                },
                "x-operation-group": "indices.exists_index_template",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Creates or updates an index template.",
                "operationId": "IndicesPutIndexTemplate_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesPutIndexTemplate_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the template."
                        },
                        "required": true
                    },
                    {
                        "name": "create",
                        "in": "query",
                        "description": "Whether the index template should only be added if new or can also replace an existing one.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether the index template should only be added if new or can also replace an existing one."
                        }
                    },
                    {
                        "name": "cause",
                        "in": "query",
                        "description": "User defined reason for creating/updating the index template.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "description": "User defined reason for creating/updating the index template."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesPutIndexTemplate_Post 200 response"
                    }
                },
                "x-operation-group": "indices.put_index_template",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or updates an index template.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/im-plugin/index-templates/"
                },
                "operationId": "IndicesPutIndexTemplate_Put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesPutIndexTemplate_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the template."
                        },
                        "required": true
                    },
                    {
                        "name": "create",
                        "in": "query",
                        "description": "Whether the index template should only be added if new or can also replace an existing one.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether the index template should only be added if new or can also replace an existing one."
                        }
                    },
                    {
                        "name": "cause",
                        "in": "query",
                        "description": "User defined reason for creating/updating the index template.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "description": "User defined reason for creating/updating the index template."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesPutIndexTemplate_Put 200 response"
                    }
                },
                "x-operation-group": "indices.put_index_template",
                "x-version-added": "1.0"
            }
        },
        "/_ingest/pipeline": {
            "get": {
                "description": "Returns a pipeline.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/ingest-apis/get-ingest/"
                },
                "operationId": "IngestGetPipeline",
                "parameters": [
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IngestGetPipeline 200 response"
                    }
                },
                "x-operation-group": "ingest.get_pipeline",
                "x-version-added": "1.0"
            }
        },
        "/_ingest/pipeline/_simulate": {
            "get": {
                "description": "Allows to simulate a pipeline with example documents.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/ingest-apis/simulate-ingest/"
                },
                "operationId": "IngestSimulate_Get",
                "parameters": [
                    {
                        "name": "verbose",
                        "in": "query",
                        "description": "Verbose mode. Display data output for each processor in executed pipeline.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display data output for each processor in executed pipeline."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IngestSimulate_Get 200 response"
                    }
                },
                "x-operation-group": "ingest.simulate",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to simulate a pipeline with example documents.",
                "operationId": "IngestSimulate_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestSimulate_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "verbose",
                        "in": "query",
                        "description": "Verbose mode. Display data output for each processor in executed pipeline.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display data output for each processor in executed pipeline."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IngestSimulate_Post 200 response"
                    }
                },
                "x-operation-group": "ingest.simulate",
                "x-version-added": "1.0"
            }
        },
        "/_ingest/pipeline/{id}": {
            "delete": {
                "description": "Deletes a pipeline.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/ingest-apis/delete-ingest/"
                },
                "operationId": "IngestDeletePipeline",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Pipeline ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Pipeline ID."
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IngestDeletePipeline 200 response"
                    }
                },
                "x-operation-group": "ingest.delete_pipeline",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Returns a pipeline.",
                "operationId": "IngestGetPipeline_WithId",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Comma-separated list of pipeline ids. Wildcards supported.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of pipeline ids. Wildcards supported.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IngestGetPipeline_WithId 200 response"
                    }
                },
                "x-operation-group": "ingest.get_pipeline",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or updates a pipeline.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/ingest-apis/create-update-ingest/"
                },
                "operationId": "IngestPutPipeline",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestPutPipeline_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Pipeline ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Pipeline ID."
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IngestPutPipeline 200 response"
                    }
                },
                "x-operation-group": "ingest.put_pipeline",
                "x-version-added": "1.0"
            }
        },
        "/_ingest/pipeline/{id}/_simulate": {
            "get": {
                "description": "Allows to simulate a pipeline with example documents.",
                "operationId": "IngestSimulate_Get_WithId",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Pipeline ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Pipeline ID."
                        },
                        "required": true
                    },
                    {
                        "name": "verbose",
                        "in": "query",
                        "description": "Verbose mode. Display data output for each processor in executed pipeline.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display data output for each processor in executed pipeline."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IngestSimulate_Get_WithId 200 response"
                    }
                },
                "x-operation-group": "ingest.simulate",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to simulate a pipeline with example documents.",
                "operationId": "IngestSimulate_Post_WithId",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestSimulate_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Pipeline ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Pipeline ID."
                        },
                        "required": true
                    },
                    {
                        "name": "verbose",
                        "in": "query",
                        "description": "Verbose mode. Display data output for each processor in executed pipeline.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Verbose mode. Display data output for each processor in executed pipeline."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IngestSimulate_Post_WithId 200 response"
                    }
                },
                "x-operation-group": "ingest.simulate",
                "x-version-added": "1.0"
            }
        },
        "/_ingest/processor/grok": {
            "get": {
                "description": "Returns a list of the built-in patterns.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IngestProcessorGrok",
                "responses": {
                    "200": {
                        "description": "IngestProcessorGrok 200 response"
                    }
                },
                "x-operation-group": "ingest.processor_grok",
                "x-version-added": "1.0"
            }
        },
        "/_mapping": {
            "get": {
                "description": "Returns mappings for one or more indices.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/field-types/index/#get-a-mapping"
                },
                "operationId": "IndicesGetMapping",
                "parameters": [
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node.",
                            "x-version-deprecated": "1.0",
                            "x-deprecation-message": "This parameter is a no-op and field mappings are always retrieved locally.",
                            "deprecated": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetMapping 200 response"
                    }
                },
                "x-operation-group": "indices.get_mapping",
                "x-version-added": "1.0"
            }
        },
        "/_mapping/field/{fields}": {
            "get": {
                "description": "Returns mapping for one or more fields.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/field-types/index/"
                },
                "operationId": "IndicesGetFieldMapping",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "path",
                        "description": "Comma-separated list of fields.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of fields.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "include_defaults",
                        "in": "query",
                        "description": "Whether the default mapping values should be returned as well.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether the default mapping values should be returned as well."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetFieldMapping 200 response"
                    }
                },
                "x-operation-group": "indices.get_field_mapping",
                "x-version-added": "1.0"
            }
        },
        "/_mget": {
            "get": {
                "description": "Allows to get multiple documents in one request.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/document-apis/multi-get/"
                },
                "operationId": "Mget_Get",
                "parameters": [
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specify whether to perform the operation in realtime or search mode.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to perform the operation in realtime or search mode."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "Refresh the shard containing the document before performing the operation.",
                        "schema": {
                            "type": "boolean",
                            "description": "Refresh the shard containing the document before performing the operation."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mget_Get 200 response"
                    }
                },
                "x-operation-group": "mget",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to get multiple documents in one request.",
                "operationId": "Mget_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Mget_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specify whether to perform the operation in realtime or search mode.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to perform the operation in realtime or search mode."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "Refresh the shard containing the document before performing the operation.",
                        "schema": {
                            "type": "boolean",
                            "description": "Refresh the shard containing the document before performing the operation."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mget_Post 200 response"
                    }
                },
                "x-operation-group": "mget",
                "x-version-added": "1.0"
            }
        },
        "/_msearch": {
            "get": {
                "description": "Allows to execute several search operations in one request.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/multi-search/"
                },
                "operationId": "Msearch_Get",
                "parameters": [
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchTypeMulti"
                        }
                    },
                    {
                        "name": "max_concurrent_searches",
                        "in": "query",
                        "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                        "schema": {
                            "type": "integer",
                            "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "pre_filter_shard_size",
                        "in": "query",
                        "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                        "schema": {
                            "type": "integer",
                            "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_concurrent_shard_requests",
                        "in": "query",
                        "description": "The number of concurrent shard requests each sub search executes concurrently per node. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "description": "The number of concurrent shard requests each sub search executes concurrently per node. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Msearch_Get 200 response"
                    }
                },
                "x-operation-group": "msearch",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to execute several search operations in one request.",
                "operationId": "Msearch_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Msearch_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchTypeMulti"
                        }
                    },
                    {
                        "name": "max_concurrent_searches",
                        "in": "query",
                        "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                        "schema": {
                            "type": "integer",
                            "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "pre_filter_shard_size",
                        "in": "query",
                        "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                        "schema": {
                            "type": "integer",
                            "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_concurrent_shard_requests",
                        "in": "query",
                        "description": "The number of concurrent shard requests each sub search executes concurrently per node. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "description": "The number of concurrent shard requests each sub search executes concurrently per node. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Msearch_Post 200 response"
                    }
                },
                "x-operation-group": "msearch",
                "x-version-added": "1.0"
            }
        },
        "/_msearch/template": {
            "get": {
                "description": "Allows to execute several search template operations in one request.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/search-plugins/search-template/"
                },
                "operationId": "MsearchTemplate_Get",
                "parameters": [
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchTypeMulti"
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "max_concurrent_searches",
                        "in": "query",
                        "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                        "schema": {
                            "type": "integer",
                            "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MsearchTemplate_Get 200 response"
                    }
                },
                "x-operation-group": "msearch_template",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to execute several search template operations in one request.",
                "operationId": "MsearchTemplate_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MsearchTemplate_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchTypeMulti"
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "max_concurrent_searches",
                        "in": "query",
                        "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                        "schema": {
                            "type": "integer",
                            "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MsearchTemplate_Post 200 response"
                    }
                },
                "x-operation-group": "msearch_template",
                "x-version-added": "1.0"
            }
        },
        "/_mtermvectors": {
            "get": {
                "description": "Returns multiple termvectors in one request.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "Mtermvectors_Get",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "Comma-separated list of documents ids. You must define ids as parameter or set 'ids' or 'docs' in the request body.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of documents ids. You must define ids as parameter or set 'ids' or 'docs' in the request body."
                        },
                        "explode": true
                    },
                    {
                        "name": "term_statistics",
                        "in": "query",
                        "description": "Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "field_statistics",
                        "in": "query",
                        "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        },
                        "explode": true
                    },
                    {
                        "name": "offsets",
                        "in": "query",
                        "description": "Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "positions",
                        "in": "query",
                        "description": "Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "payloads",
                        "in": "query",
                        "description": "Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specifies if requests are real-time as opposed to near-real-time.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if requests are real-time as opposed to near-real-time."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mtermvectors_Get 200 response"
                    }
                },
                "x-operation-group": "mtermvectors",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns multiple termvectors in one request.",
                "operationId": "Mtermvectors_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Mtermvectors_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "Comma-separated list of documents ids. You must define ids as parameter or set 'ids' or 'docs' in the request body.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of documents ids. You must define ids as parameter or set 'ids' or 'docs' in the request body."
                        },
                        "explode": true
                    },
                    {
                        "name": "term_statistics",
                        "in": "query",
                        "description": "Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "field_statistics",
                        "in": "query",
                        "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        },
                        "explode": true
                    },
                    {
                        "name": "offsets",
                        "in": "query",
                        "description": "Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "positions",
                        "in": "query",
                        "description": "Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "payloads",
                        "in": "query",
                        "description": "Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specifies if requests are real-time as opposed to near-real-time.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if requests are real-time as opposed to near-real-time."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mtermvectors_Post 200 response"
                    }
                },
                "x-operation-group": "mtermvectors",
                "x-version-added": "1.0"
            }
        },
        "/_nodes": {
            "get": {
                "description": "Returns information about nodes in the cluster.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-info/"
                },
                "operationId": "NodesInfo",
                "parameters": [
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesInfo 200 response"
                    }
                },
                "x-operation-group": "nodes.info",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/hot_threads": {
            "get": {
                "description": "Returns information about hot threads on each node in the cluster.",
                "operationId": "NodesHotThreads",
                "parameters": [
                    {
                        "name": "interval",
                        "in": "query",
                        "description": "The interval for the second sampling of threads.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "The interval for the second sampling of threads.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "snapshots",
                        "in": "query",
                        "description": "Number of samples of thread stacktrace.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of samples of thread stacktrace.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "threads",
                        "in": "query",
                        "description": "Specify the number of threads to provide information for.",
                        "schema": {
                            "type": "integer",
                            "default": 3,
                            "description": "Specify the number of threads to provide information for.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_idle_threads",
                        "in": "query",
                        "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue."
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type to sample.",
                        "schema": {
                            "$ref": "#/components/schemas/SampleType"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesHotThreads 200 response"
                    }
                },
                "x-operation-group": "nodes.hot_threads",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/hotthreads": {
            "get": {
                "description": "Returns information about hot threads on each node in the cluster.",
                "operationId": "NodesHotThreads_Deprecated",
                "deprecated": true,
                "parameters": [
                    {
                        "name": "interval",
                        "in": "query",
                        "description": "The interval for the second sampling of threads.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "The interval for the second sampling of threads.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "snapshots",
                        "in": "query",
                        "description": "Number of samples of thread stacktrace.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of samples of thread stacktrace.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "threads",
                        "in": "query",
                        "description": "Specify the number of threads to provide information for.",
                        "schema": {
                            "type": "integer",
                            "default": 3,
                            "description": "Specify the number of threads to provide information for.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_idle_threads",
                        "in": "query",
                        "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue."
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type to sample.",
                        "schema": {
                            "$ref": "#/components/schemas/SampleType"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesHotThreads_Deprecated 200 response"
                    }
                },
                "x-deprecation-message": "The hot threads API accepts `hotthreads` but only `hot_threads` is documented",
                "x-ignorable": true,
                "x-operation-group": "nodes.hot_threads",
                "x-version-added": "1.0",
                "x-version-deprecated": "1.0"
            }
        },
        "/_nodes/reload_secure_settings": {
            "post": {
                "description": "Reloads secure settings.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-reload-secure/"
                },
                "operationId": "NodesReloadSecureSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NodesReloadSecureSettings_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesReloadSecureSettings 200 response"
                    }
                },
                "x-operation-group": "nodes.reload_secure_settings",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/stats": {
            "get": {
                "description": "Returns statistical information about nodes in the cluster.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/nodes-apis/nodes-usage/"
                },
                "operationId": "NodesStats",
                "parameters": [
                    {
                        "name": "completion_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fielddata_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "groups",
                        "in": "query",
                        "description": "Comma-separated list of search groups for `search` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of search groups for `search` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Return indices stats aggregated at index, node or shard level.",
                        "schema": {
                            "$ref": "#/components/schemas/NodesStatLevel"
                        }
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "description": "Comma-separated list of document types for the `indexing` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of document types for the `indexing` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "include_segment_file_sizes",
                        "in": "query",
                        "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesStats 200 response"
                    }
                },
                "x-operation-group": "nodes.stats",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/stats/{metric}": {
            "get": {
                "description": "Returns statistical information about nodes in the cluster.",
                "operationId": "NodesStats_WithMetric",
                "parameters": [
                    {
                        "name": "metric",
                        "in": "path",
                        "description": "Limit the information returned to the specified metrics.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Limit the information returned to the specified metrics.",
                            "x-enum-options": [
                                "_all",
                                "breaker",
                                "fs",
                                "http",
                                "indices",
                                "jvm",
                                "os",
                                "process",
                                "thread_pool",
                                "transport",
                                "discovery",
                                "indexing_pressure"
                            ],
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "completion_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fielddata_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "groups",
                        "in": "query",
                        "description": "Comma-separated list of search groups for `search` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of search groups for `search` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Return indices stats aggregated at index, node or shard level.",
                        "schema": {
                            "$ref": "#/components/schemas/NodesStatLevel"
                        }
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "description": "Comma-separated list of document types for the `indexing` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of document types for the `indexing` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "include_segment_file_sizes",
                        "in": "query",
                        "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesStats_WithMetric 200 response"
                    }
                },
                "x-operation-group": "nodes.stats",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/stats/{metric}/{index_metric}": {
            "get": {
                "description": "Returns statistical information about nodes in the cluster.",
                "operationId": "NodesStats_WithIndexMetricMetric",
                "parameters": [
                    {
                        "name": "metric",
                        "in": "path",
                        "description": "Limit the information returned to the specified metrics.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Limit the information returned to the specified metrics.",
                            "x-enum-options": [
                                "_all",
                                "breaker",
                                "fs",
                                "http",
                                "indices",
                                "jvm",
                                "os",
                                "process",
                                "thread_pool",
                                "transport",
                                "discovery",
                                "indexing_pressure"
                            ],
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "index_metric",
                        "in": "path",
                        "description": "Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.",
                            "x-enum-options": [
                                "_all",
                                "store",
                                "indexing",
                                "get",
                                "search",
                                "merge",
                                "flush",
                                "refresh",
                                "query_cache",
                                "fielddata",
                                "docs",
                                "warmer",
                                "completion",
                                "segments",
                                "translog",
                                "suggest",
                                "request_cache",
                                "recovery"
                            ],
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "completion_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fielddata_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "groups",
                        "in": "query",
                        "description": "Comma-separated list of search groups for `search` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of search groups for `search` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Return indices stats aggregated at index, node or shard level.",
                        "schema": {
                            "$ref": "#/components/schemas/NodesStatLevel"
                        }
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "description": "Comma-separated list of document types for the `indexing` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of document types for the `indexing` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "include_segment_file_sizes",
                        "in": "query",
                        "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesStats_WithIndexMetricMetric 200 response"
                    }
                },
                "x-operation-group": "nodes.stats",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/usage": {
            "get": {
                "description": "Returns low-level information about REST actions usage on nodes.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "NodesUsage",
                "parameters": [
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesUsage 200 response"
                    }
                },
                "x-operation-group": "nodes.usage",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/usage/{metric}": {
            "get": {
                "description": "Returns low-level information about REST actions usage on nodes.",
                "operationId": "NodesUsage_WithMetric",
                "parameters": [
                    {
                        "name": "metric",
                        "in": "path",
                        "description": "Limit the information returned to the specified metrics.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Limit the information returned to the specified metrics.",
                            "x-enum-options": [
                                "_all",
                                "rest_actions"
                            ],
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesUsage_WithMetric 200 response"
                    }
                },
                "x-operation-group": "nodes.usage",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/{node_id}": {
            "get": {
                "description": "Returns information about nodes in the cluster.",
                "operationId": "NodesInfo_WithNodeId",
                "parameters": [
                    {
                        "name": "node_id",
                        "in": "path",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                            "x-overloaded-param": "metric",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesInfo_WithNodeId 200 response"
                    }
                },
                "x-operation-group": "nodes.info",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/{node_id}/hot_threads": {
            "get": {
                "description": "Returns information about hot threads on each node in the cluster.",
                "operationId": "NodesHotThreads_WithNodeId",
                "parameters": [
                    {
                        "name": "node_id",
                        "in": "path",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "interval",
                        "in": "query",
                        "description": "The interval for the second sampling of threads.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "The interval for the second sampling of threads.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "snapshots",
                        "in": "query",
                        "description": "Number of samples of thread stacktrace.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of samples of thread stacktrace.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "threads",
                        "in": "query",
                        "description": "Specify the number of threads to provide information for.",
                        "schema": {
                            "type": "integer",
                            "default": 3,
                            "description": "Specify the number of threads to provide information for.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_idle_threads",
                        "in": "query",
                        "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue."
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type to sample.",
                        "schema": {
                            "$ref": "#/components/schemas/SampleType"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesHotThreads_WithNodeId 200 response"
                    }
                },
                "x-operation-group": "nodes.hot_threads",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/{node_id}/hotthreads": {
            "get": {
                "description": "Returns information about hot threads on each node in the cluster.",
                "operationId": "NodesHotThreads_WithNodeId_Deprecated",
                "deprecated": true,
                "parameters": [
                    {
                        "name": "node_id",
                        "in": "path",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "interval",
                        "in": "query",
                        "description": "The interval for the second sampling of threads.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "The interval for the second sampling of threads.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "snapshots",
                        "in": "query",
                        "description": "Number of samples of thread stacktrace.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of samples of thread stacktrace.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "threads",
                        "in": "query",
                        "description": "Specify the number of threads to provide information for.",
                        "schema": {
                            "type": "integer",
                            "default": 3,
                            "description": "Specify the number of threads to provide information for.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_idle_threads",
                        "in": "query",
                        "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue."
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type to sample.",
                        "schema": {
                            "$ref": "#/components/schemas/SampleType"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesHotThreads_WithNodeId_Deprecated 200 response"
                    }
                },
                "x-deprecation-message": "The hot threads API accepts `hotthreads` but only `hot_threads` is documented",
                "x-ignorable": true,
                "x-operation-group": "nodes.hot_threads",
                "x-version-added": "1.0",
                "x-version-deprecated": "1.0"
            }
        },
        "/_nodes/{node_id}/reload_secure_settings": {
            "post": {
                "description": "Reloads secure settings.",
                "operationId": "NodesReloadSecureSettings_WithNodeId",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NodesReloadSecureSettings_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "node_id",
                        "in": "path",
                        "description": "Comma-separated list of node IDs to span the reload/reinit call. Should stay empty because reloading usually involves all cluster nodes.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of node IDs to span the reload/reinit call. Should stay empty because reloading usually involves all cluster nodes.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesReloadSecureSettings_WithNodeId 200 response"
                    }
                },
                "x-operation-group": "nodes.reload_secure_settings",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/{node_id}/stats": {
            "get": {
                "description": "Returns statistical information about nodes in the cluster.",
                "operationId": "NodesStats_WithNodeId",
                "parameters": [
                    {
                        "name": "node_id",
                        "in": "path",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "completion_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fielddata_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "groups",
                        "in": "query",
                        "description": "Comma-separated list of search groups for `search` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of search groups for `search` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Return indices stats aggregated at index, node or shard level.",
                        "schema": {
                            "$ref": "#/components/schemas/NodesStatLevel"
                        }
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "description": "Comma-separated list of document types for the `indexing` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of document types for the `indexing` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "include_segment_file_sizes",
                        "in": "query",
                        "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesStats_WithNodeId 200 response"
                    }
                },
                "x-operation-group": "nodes.stats",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/{node_id}/stats/{metric}": {
            "get": {
                "description": "Returns statistical information about nodes in the cluster.",
                "operationId": "NodesStats_WithMetricNodeId",
                "parameters": [
                    {
                        "name": "metric",
                        "in": "path",
                        "description": "Limit the information returned to the specified metrics.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Limit the information returned to the specified metrics.",
                            "x-enum-options": [
                                "_all",
                                "breaker",
                                "fs",
                                "http",
                                "indices",
                                "jvm",
                                "os",
                                "process",
                                "thread_pool",
                                "transport",
                                "discovery",
                                "indexing_pressure"
                            ],
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "node_id",
                        "in": "path",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "completion_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fielddata_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "groups",
                        "in": "query",
                        "description": "Comma-separated list of search groups for `search` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of search groups for `search` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Return indices stats aggregated at index, node or shard level.",
                        "schema": {
                            "$ref": "#/components/schemas/NodesStatLevel"
                        }
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "description": "Comma-separated list of document types for the `indexing` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of document types for the `indexing` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "include_segment_file_sizes",
                        "in": "query",
                        "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesStats_WithMetricNodeId 200 response"
                    }
                },
                "x-operation-group": "nodes.stats",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/{node_id}/stats/{metric}/{index_metric}": {
            "get": {
                "description": "Returns statistical information about nodes in the cluster.",
                "operationId": "NodesStats_WithIndexMetricMetricNodeId",
                "parameters": [
                    {
                        "name": "metric",
                        "in": "path",
                        "description": "Limit the information returned to the specified metrics.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Limit the information returned to the specified metrics.",
                            "x-enum-options": [
                                "_all",
                                "breaker",
                                "fs",
                                "http",
                                "indices",
                                "jvm",
                                "os",
                                "process",
                                "thread_pool",
                                "transport",
                                "discovery",
                                "indexing_pressure"
                            ],
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "index_metric",
                        "in": "path",
                        "description": "Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.",
                            "x-enum-options": [
                                "_all",
                                "store",
                                "indexing",
                                "get",
                                "search",
                                "merge",
                                "flush",
                                "refresh",
                                "query_cache",
                                "fielddata",
                                "docs",
                                "warmer",
                                "completion",
                                "segments",
                                "translog",
                                "suggest",
                                "request_cache",
                                "recovery"
                            ],
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "node_id",
                        "in": "path",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "completion_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fielddata_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "groups",
                        "in": "query",
                        "description": "Comma-separated list of search groups for `search` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of search groups for `search` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Return indices stats aggregated at index, node or shard level.",
                        "schema": {
                            "$ref": "#/components/schemas/NodesStatLevel"
                        }
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "description": "Comma-separated list of document types for the `indexing` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of document types for the `indexing` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "include_segment_file_sizes",
                        "in": "query",
                        "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesStats_WithIndexMetricMetricNodeId 200 response"
                    }
                },
                "x-operation-group": "nodes.stats",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/{node_id}/usage": {
            "get": {
                "description": "Returns low-level information about REST actions usage on nodes.",
                "operationId": "NodesUsage_WithNodeId",
                "parameters": [
                    {
                        "name": "node_id",
                        "in": "path",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesUsage_WithNodeId 200 response"
                    }
                },
                "x-operation-group": "nodes.usage",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/{node_id}/usage/{metric}": {
            "get": {
                "description": "Returns low-level information about REST actions usage on nodes.",
                "operationId": "NodesUsage_WithMetricNodeId",
                "parameters": [
                    {
                        "name": "metric",
                        "in": "path",
                        "description": "Limit the information returned to the specified metrics.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Limit the information returned to the specified metrics.",
                            "x-enum-options": [
                                "_all",
                                "rest_actions"
                            ],
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "node_id",
                        "in": "path",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesUsage_WithMetricNodeId 200 response"
                    }
                },
                "x-operation-group": "nodes.usage",
                "x-version-added": "1.0"
            }
        },
        "/_nodes/{node_id}/{metric}": {
            "get": {
                "description": "Returns information about nodes in the cluster.",
                "operationId": "NodesInfo_WithMetricNodeId",
                "parameters": [
                    {
                        "name": "node_id",
                        "in": "path",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "metric",
                        "in": "path",
                        "description": "Comma-separated list of metrics you wish returned. Leave empty to return all.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of metrics you wish returned. Leave empty to return all.",
                            "x-enum-options": [
                                "settings",
                                "os",
                                "process",
                                "jvm",
                                "thread_pool",
                                "transport",
                                "http",
                                "plugins",
                                "ingest"
                            ],
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NodesInfo_WithMetricNodeId 200 response"
                    }
                },
                "x-operation-group": "nodes.info",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/account": {
            "get": {
                "description": "Returns account details for the current user.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#get-account-details"
                },
                "operationId": "GetAccountDetails",
                "responses": {
                    "200": {
                        "description": "GetAccountDetails 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountDetails"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_account_details",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Changes the password for the current user.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#change-password"
                },
                "operationId": "ChangePassword",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangePasswordRequestContent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ChangePassword 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChangePasswordResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.change_password",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/actiongroups": {
            "patch": {
                "description": "Creates, updates, or deletes multiple action groups in a single call.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#patch-action-groups"
                },
                "operationId": "PatchActionGroups",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchActionGroupsInputPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "PatchActionGroups 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchActionGroupsResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.patch_action_groups",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/actiongroups/": {
            "get": {
                "description": "Retrieves all action groups.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#get-action-groups"
                },
                "operationId": "GetActionGroups",
                "responses": {
                    "200": {
                        "description": "GetActionGroups 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionGroupsMap"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_action_groups",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/actiongroups/{action_group}": {
            "delete": {
                "description": "Delete a specified action group.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#delete-action-group"
                },
                "operationId": "DeleteActionGroup",
                "parameters": [
                    {
                        "name": "action_group",
                        "in": "path",
                        "description": "Action group to delete.",
                        "schema": {
                            "type": "string",
                            "description": "Action group to delete."
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DeleteActionGroup 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteActionGroupResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.delete_action_group",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Retrieves one action group.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#get-action-group"
                },
                "operationId": "GetActionGroup",
                "parameters": [
                    {
                        "name": "action_group",
                        "in": "path",
                        "description": "Action group to retrieve.",
                        "schema": {
                            "type": "string",
                            "description": "Action group to retrieve."
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetActionGroup 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionGroupsMap"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_action_group",
                "x-version-added": "1.0"
            },
            "patch": {
                "description": "Updates individual attributes of an action group.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#patch-action-group"
                },
                "operationId": "PatchActionGroup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchActionGroupInputPayload"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "action_group",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PatchActionGroup 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchActionGroupResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.patch_action_group",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or replaces the specified action group.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#create-action-group"
                },
                "operationId": "CreateActionGroup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Group"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "action_group",
                        "in": "path",
                        "description": "The name of the action group to create or replace",
                        "schema": {
                            "type": "string",
                            "description": "The name of the action group to create or replace"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CreateActionGroup 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateActionGroupResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.create_action_group",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/audit": {
            "get": {
                "description": "Retrieves the audit configuration.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#audit-logs"
                },
                "operationId": "GetAuditConfiguration",
                "responses": {
                    "200": {
                        "description": "GetAuditConfiguration 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditConfigWithReadOnly"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_audit_configuration",
                "x-version-added": "1.0"
            },
            "patch": {
                "description": "A PATCH call is used to update specified fields in the audit configuration.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#audit-logs"
                },
                "operationId": "PatchAuditConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchAuditConfigurationInputPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "PatchAuditConfiguration 200 response"
                    }
                },
                "x-operation-group": "security.patch_audit_configuration",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/audit/config": {
            "put": {
                "description": "Updates the audit configuration.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#audit-logs"
                },
                "operationId": "UpdateAuditConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuditConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "UpdateAuditConfiguration 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateAuditConfigurationResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.update_audit_configuration",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/cache": {
            "delete": {
                "description": "Flushes the Security plugin user, authentication, and authorization cache.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/2.7/security/access-control/api/#flush-cache"
                },
                "operationId": "FlushCache",
                "responses": {
                    "200": {
                        "description": "FlushCache 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlushCacheResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.flush_cache",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/internalusers": {
            "get": {
                "description": "Retrieve all internal users.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#get-users"
                },
                "operationId": "GetUsers",
                "responses": {
                    "200": {
                        "description": "GetUsers 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsersMap"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_users",
                "x-version-added": "1.0"
            },
            "patch": {
                "description": "Creates, updates, or deletes multiple internal users in a single call.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#patch-users"
                },
                "operationId": "PatchUsers",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchUsersInputPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "PatchUsers 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchUsersResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.patch_users",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/internalusers/{username}": {
            "delete": {
                "description": "Delete the specified user.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#delete-user"
                },
                "operationId": "DeleteUser",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DeleteUser 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteUserResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.delete_user",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Retrieve one internal user.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#get-user"
                },
                "operationId": "GetUser",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetUser 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsersMap"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_user",
                "x-version-added": "1.0"
            },
            "patch": {
                "description": "Updates individual attributes of an internal user.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#patch-user"
                },
                "operationId": "PatchUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchUserInputPayload"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PatchUser 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchUserResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.patch_user",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or replaces the specified user.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#create-user"
                },
                "operationId": "CreateUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CreateUser 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateUserResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.create_user",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/nodesdn": {
            "get": {
                "description": "Retrieves all distinguished names in the allow list.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#get-distinguished-names"
                },
                "operationId": "GetDistinguishedNames",
                "responses": {
                    "200": {
                        "description": "GetDistinguishedNames 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DistinguishedNamesMap"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_distinguished_names",
                "x-version-added": "1.0"
            },
            "patch": {
                "description": "Bulk update of distinguished names.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#update-all-distinguished-names"
                },
                "operationId": "PatchDistinguishedNames",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchDistinguishedNamesInputPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "PatchDistinguishedNames 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchDistinguishedNamesResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.patch_distinguished_names",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/nodesdn/{cluster_name}": {
            "delete": {
                "description": "Deletes all distinguished names in the specified cluster’s or node’s allow list.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#delete-distinguished-names"
                },
                "operationId": "DeleteDistinguishedNames",
                "parameters": [
                    {
                        "name": "cluster_name",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DeleteDistinguishedNames 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteDistinguishedNamesResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.delete_distinguished_names",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Retrieve distinguished names of a specified cluster.",
                "operationId": "GetDistinguishedNamesWithClusterName",
                "parameters": [
                    {
                        "name": "cluster_name",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetDistinguishedNamesWithClusterName 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DistinguishedNamesMap"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_distinguished_names",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Adds or updates the specified distinguished names in the cluster’s or node’s allow list.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#update-distinguished-names"
                },
                "operationId": "UpdateDistinguishedNames",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DistinguishedNames"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "cluster_name",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UpdateDistinguishedNames 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateDistinguishedNamesResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.update_distinguished_names",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/roles": {
            "patch": {
                "description": "Creates, updates, or deletes multiple roles in a single call.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#patch-roles"
                },
                "operationId": "PatchRoles",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchRolesInputPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "PatchRoles 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchRolesResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.patch_roles",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/roles/": {
            "get": {
                "description": "Retrieves all roles.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#get-roles"
                },
                "operationId": "GetRoles",
                "responses": {
                    "200": {
                        "description": "GetRoles 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RolesMap"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_roles",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/roles/{role}": {
            "delete": {
                "description": "Delete the specified role.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#delete-role"
                },
                "operationId": "DeleteRole",
                "parameters": [
                    {
                        "name": "role",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DeleteRole 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteRoleResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.delete_role",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Retrieves one role.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#get-role"
                },
                "operationId": "GetRole",
                "parameters": [
                    {
                        "name": "role",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetRole 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RolesMap"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_role",
                "x-version-added": "1.0"
            },
            "patch": {
                "description": "Updates individual attributes of a role.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#patch-role"
                },
                "operationId": "PatchRole",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchRoleInputPayload"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "role",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PatchRole 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchRoleResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.patch_role",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or replaces the specified role.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#create-role"
                },
                "operationId": "CreateRole",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Role"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "role",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CreateRole 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRoleResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.create_role",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/rolesmapping": {
            "get": {
                "description": "Retrieves all role mappings.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#get-role-mappings"
                },
                "operationId": "GetRoleMappings",
                "responses": {
                    "200": {
                        "description": "GetRoleMappings 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleMappings"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_role_mappings",
                "x-version-added": "1.0"
            },
            "patch": {
                "description": "Creates or updates multiple role mappings in a single call.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#patch-role-mappings"
                },
                "operationId": "PatchRoleMappings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchRoleMappingsInputPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "PatchRoleMappings 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchRoleMappingsResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.patch_role_mappings",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/rolesmapping/{role}": {
            "delete": {
                "description": "Deletes the specified role mapping.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#delete-role-mapping"
                },
                "operationId": "DeleteRoleMapping",
                "parameters": [
                    {
                        "name": "role",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DeleteRoleMapping 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteRoleMappingResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.delete_role_mapping",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Retrieves one role mapping.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#get-role-mapping"
                },
                "operationId": "GetRoleMapping",
                "parameters": [
                    {
                        "name": "role",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetRoleMapping 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleMappings"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_role_mapping",
                "x-version-added": "1.0"
            },
            "patch": {
                "description": "Updates individual attributes of a role mapping.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#patch-role-mapping"
                },
                "operationId": "PatchRoleMapping",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchRoleMappingInputPayload"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "role",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PatchRoleMapping 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchRoleMappingResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.patch_role_mapping",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or replaces the specified role mapping.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#create-role-mapping"
                },
                "operationId": "CreateRoleMapping",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleMapping"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "role",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CreateRoleMapping 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRoleMappingResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.create_role_mapping",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/securityconfig": {
            "get": {
                "description": "Returns the current Security plugin configuration in JSON format.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/2.7/security/access-control/api/#get-configuration"
                },
                "operationId": "GetConfiguration",
                "responses": {
                    "200": {
                        "description": "GetConfiguration 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DynamicConfig"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_configuration",
                "x-version-added": "1.0"
            },
            "patch": {
                "description": "A PATCH call is used to update the existing configuration using the REST API.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/2.7/security/access-control/api/#patch-configuration"
                },
                "operationId": "PatchConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchConfigurationInputPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "PatchConfiguration 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchConfigurationResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.patch_configuration",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/securityconfig/config": {
            "put": {
                "description": "Adds or updates the existing configuration using the REST API.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/2.7/security/access-control/api/#update-configuration"
                },
                "operationId": "UpdateConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DynamicConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "UpdateConfiguration 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateConfigurationResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.update_configuration",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/ssl/certs": {
            "get": {
                "description": "Retrieves the cluster’s security certificates.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#get-certificates"
                },
                "operationId": "GetCertificates",
                "responses": {
                    "200": {
                        "description": "GetCertificates 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCertificatesResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_certificates",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/ssl/http/reloadcerts": {
            "put": {
                "description": "Reload HTTP layer communication certificates.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#reload-http-certificates"
                },
                "operationId": "ReloadHttpCertificates",
                "responses": {
                    "200": {
                        "description": "ReloadHttpCertificates 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReloadHttpCertificatesResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.reload_http_certificates",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/ssl/transport/reloadcerts": {
            "put": {
                "description": "Reload transport layer communication certificates.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#reload-transport-certificates"
                },
                "operationId": "ReloadTransportCertificates",
                "responses": {
                    "200": {
                        "description": "ReloadTransportCertificates 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReloadTransportCertificatesResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.reload_transport_certificates",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/tenants/": {
            "get": {
                "description": "Retrieves all tenants.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/2.7/security/access-control/api/#get-tenants"
                },
                "operationId": "GetTenants",
                "responses": {
                    "200": {
                        "description": "GetTenants 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantsMap"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_tenants",
                "x-version-added": "1.0"
            },
            "patch": {
                "description": "Add, delete, or modify multiple tenants in a single call.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/2.7/security/access-control/api/#patch-tenants"
                },
                "operationId": "PatchTenants",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchTenantsInputPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "PatchTenants 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchTenantsResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.patch_tenants",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/api/tenants/{tenant}": {
            "delete": {
                "description": "Delete the specified tenant.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#delete-action-group"
                },
                "operationId": "DeleteTenant",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DeleteTenant 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteTenantResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.delete_tenant",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Retrieves one tenant.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/2.7/security/access-control/api/#get-tenant"
                },
                "operationId": "GetTenant",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetTenant 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantsMap"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.get_tenant",
                "x-version-added": "1.0"
            },
            "patch": {
                "description": "Add, delete, or modify a single tenant.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/2.7/security/access-control/api/#patch-tenant"
                },
                "operationId": "PatchTenant",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchTenantInputPayload"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PatchTenant 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchTenantResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.patch_tenant",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or replaces the specified tenant.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/2.7/security/access-control/api/#create-tenant"
                },
                "operationId": "CreateTenant",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTenantParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CreateTenant 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateTenantResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.create_tenant",
                "x-version-added": "1.0"
            }
        },
        "/_plugins/_security/health": {
            "get": {
                "description": "Checks to see if the Security plugin is up and running.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/security/access-control/api/#health-check"
                },
                "operationId": "SecurityHealth",
                "responses": {
                    "200": {
                        "description": "SecurityHealth 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityHealthResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "security.health",
                "x-version-added": "1.0"
            }
        },
        "/_rank_eval": {
            "get": {
                "description": "Allows to evaluate the quality of ranked search results over a set of typical search queries.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/rank-eval/"
                },
                "operationId": "RankEval_Get",
                "parameters": [
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RankEval_Get 200 response"
                    }
                },
                "x-operation-group": "rank_eval",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to evaluate the quality of ranked search results over a set of typical search queries.",
                "operationId": "RankEval_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RankEval_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RankEval_Post 200 response"
                    }
                },
                "x-operation-group": "rank_eval",
                "x-version-added": "1.0"
            }
        },
        "/_recovery": {
            "get": {
                "description": "Returns information about ongoing index shard recoveries.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesRecovery",
                "parameters": [
                    {
                        "name": "detailed",
                        "in": "query",
                        "description": "Whether to display detailed information about shard recovery.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to display detailed information about shard recovery."
                        }
                    },
                    {
                        "name": "active_only",
                        "in": "query",
                        "description": "Display only those recoveries that are currently on-going.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Display only those recoveries that are currently on-going."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesRecovery 200 response"
                    }
                },
                "x-operation-group": "indices.recovery",
                "x-version-added": "1.0"
            }
        },
        "/_refresh": {
            "get": {
                "description": "Performs the refresh operation in one or more indices.",
                "operationId": "IndicesRefresh_Get",
                "parameters": [
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesRefresh_Get 200 response"
                    }
                },
                "x-operation-group": "indices.refresh",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Performs the refresh operation in one or more indices.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/tuning-your-cluster/availability-and-recovery/remote-store/index/#refresh-level-and-request-level-durability"
                },
                "operationId": "IndicesRefresh_Post",
                "parameters": [
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesRefresh_Post 200 response"
                    }
                },
                "x-operation-group": "indices.refresh",
                "x-version-added": "1.0"
            }
        },
        "/_reindex": {
            "post": {
                "description": "Allows to copy documents from one index to another, optionally filtering the source\ndocuments by a query, changing the destination index settings, or fetching the\ndocuments from a remote cluster.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/im-plugin/reindex-data/"
                },
                "operationId": "Reindex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Reindex_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "Should the affected indexes be refreshed?.",
                        "schema": {
                            "type": "boolean",
                            "description": "Should the affected indexes be refreshed?."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Time each individual bulk request should wait for shards that are unavailable.",
                        "schema": {
                            "type": "string",
                            "default": "1m",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Time each individual bulk request should wait for shards that are unavailable.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1).",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)."
                        }
                    },
                    {
                        "name": "wait_for_completion",
                        "in": "query",
                        "description": "Should this request wait until the operation has completed before returning.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Should this request wait until the operation has completed before returning."
                        }
                    },
                    {
                        "name": "requests_per_second",
                        "in": "query",
                        "description": "The throttle for this request in sub-requests per second. -1 means no throttle.",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "description": "The throttle for this request in sub-requests per second. -1 means no throttle.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "slices",
                        "in": "query",
                        "description": "The number of slices this task should be divided into. Defaults to 1, meaning the task isn't sliced into subtasks. Can be set to `auto`.",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "The number of slices this task should be divided into. Defaults to 1, meaning the task isn't sliced into subtasks. Can be set to `auto`."
                        }
                    },
                    {
                        "name": "max_docs",
                        "in": "query",
                        "description": "Maximum number of documents to process (default: all documents).",
                        "schema": {
                            "type": "integer",
                            "description": "Maximum number of documents to process (default: all documents).",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reindex 200 response"
                    }
                },
                "x-operation-group": "reindex",
                "x-version-added": "1.0"
            }
        },
        "/_reindex/{task_id}/_rethrottle": {
            "post": {
                "description": "Changes the number of requests per second for a particular Reindex operation.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "ReindexRethrottle",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "description": "The task id to rethrottle.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The task id to rethrottle."
                        },
                        "required": true
                    },
                    {
                        "name": "requests_per_second",
                        "in": "query",
                        "description": "The throttle for this request in sub-requests per second. -1 means no throttle.",
                        "schema": {
                            "type": "integer",
                            "description": "The throttle for this request in sub-requests per second. -1 means no throttle.",
                            "format": "int32"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ReindexRethrottle 200 response"
                    }
                },
                "x-operation-group": "reindex_rethrottle",
                "x-version-added": "1.0"
            }
        },
        "/_remote/info": {
            "get": {
                "description": "Returns the information about configured remote clusters.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/remote-info/"
                },
                "operationId": "ClusterRemoteInfo",
                "responses": {
                    "200": {
                        "description": "ClusterRemoteInfo 200 response"
                    }
                },
                "x-operation-group": "cluster.remote_info",
                "x-version-added": "1.0"
            }
        },
        "/_remotestore/_restore": {
            "post": {
                "description": "Restores from remote store.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/opensearch/remote/#restoring-from-a-backup"
                },
                "operationId": "RemoteStoreRestore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RemoteStoreRestore_BodyParams"
                            },
                            "examples": {
                                "RemoteStoreRestore_example1": {
                                    "summary": "Examples for Post Remote Storage Restore Operation.",
                                    "description": "",
                                    "value": {
                                        "indices": [
                                            "books"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_completion",
                        "in": "query",
                        "description": "Should this request wait until the operation has completed before returning.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Should this request wait until the operation has completed before returning."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RemoteStoreRestore 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RemoteStoreRestoreResponseContent"
                                },
                                "examples": {
                                    "RemoteStoreRestore_example1": {
                                        "summary": "Examples for Post Remote Storage Restore Operation.",
                                        "description": "",
                                        "value": {
                                            "remote_store": {
                                                "indices": [
                                                    "books"
                                                ],
                                                "shards": {
                                                    "total": 1,
                                                    "failed": 0,
                                                    "successful": 1
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "remote_store.restore",
                "x-version-added": "1.0"
            }
        },
        "/_render/template": {
            "get": {
                "description": "Allows to use the Mustache language to pre-render a search definition.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/search-plugins/search-template/"
                },
                "operationId": "RenderSearchTemplate_Get",
                "responses": {
                    "200": {
                        "description": "RenderSearchTemplate_Get 200 response"
                    }
                },
                "x-operation-group": "render_search_template",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to use the Mustache language to pre-render a search definition.",
                "operationId": "RenderSearchTemplate_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RenderSearchTemplate_BodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "RenderSearchTemplate_Post 200 response"
                    }
                },
                "x-operation-group": "render_search_template",
                "x-version-added": "1.0"
            }
        },
        "/_render/template/{id}": {
            "get": {
                "description": "Allows to use the Mustache language to pre-render a search definition.",
                "operationId": "RenderSearchTemplate_Get_WithId",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the stored search template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The id of the stored search template."
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RenderSearchTemplate_Get_WithId 200 response"
                    }
                },
                "x-operation-group": "render_search_template",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to use the Mustache language to pre-render a search definition.",
                "operationId": "RenderSearchTemplate_Post_WithId",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RenderSearchTemplate_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the stored search template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The id of the stored search template."
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RenderSearchTemplate_Post_WithId 200 response"
                    }
                },
                "x-operation-group": "render_search_template",
                "x-version-added": "1.0"
            }
        },
        "/_resolve/index/{name}": {
            "get": {
                "description": "Returns information about any matching indices, aliases, and data streams.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesResolveIndex",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of names or wildcard expressions.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of names or wildcard expressions.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesResolveIndex 200 response"
                    }
                },
                "x-operation-group": "indices.resolve_index",
                "x-version-added": "1.0"
            }
        },
        "/_script_context": {
            "get": {
                "description": "Returns all script contexts.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/script-apis/get-script-contexts/"
                },
                "operationId": "GetScriptContext",
                "responses": {
                    "200": {
                        "description": "GetScriptContext 200 response"
                    }
                },
                "x-operation-group": "get_script_context",
                "x-version-added": "1.0"
            }
        },
        "/_script_language": {
            "get": {
                "description": "Returns available script types, languages and contexts.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/script-apis/get-script-language/"
                },
                "operationId": "GetScriptLanguages",
                "responses": {
                    "200": {
                        "description": "GetScriptLanguages 200 response"
                    }
                },
                "x-operation-group": "get_script_languages",
                "x-version-added": "1.0"
            }
        },
        "/_scripts/painless/_execute": {
            "get": {
                "description": "Allows an arbitrary script to be executed and a result to be returned.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/script-apis/exec-script/"
                },
                "operationId": "ScriptsPainlessExecute_Get",
                "responses": {
                    "200": {
                        "description": "ScriptsPainlessExecute_Get 200 response"
                    }
                },
                "x-operation-group": "scripts_painless_execute",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows an arbitrary script to be executed and a result to be returned.",
                "operationId": "ScriptsPainlessExecute_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScriptsPainlessExecute_BodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ScriptsPainlessExecute_Post 200 response"
                    }
                },
                "x-operation-group": "scripts_painless_execute",
                "x-version-added": "1.0"
            }
        },
        "/_scripts/{id}": {
            "delete": {
                "description": "Deletes a script.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/script-apis/delete-script/"
                },
                "operationId": "DeleteScript",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Script ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Script ID."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DeleteScript 200 response"
                    }
                },
                "x-operation-group": "delete_script",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Returns a script.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/script-apis/get-stored-script/"
                },
                "operationId": "GetScript",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Script ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Script ID."
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetScript 200 response"
                    }
                },
                "x-operation-group": "get_script",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Creates or updates a script.",
                "operationId": "PutScript_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutScript_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Script ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Script ID."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PutScript_Post 200 response"
                    }
                },
                "x-operation-group": "put_script",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or updates a script.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/script-apis/create-stored-script/"
                },
                "operationId": "PutScript_Put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutScript_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Script ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Script ID."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PutScript_Put 200 response"
                    }
                },
                "x-operation-group": "put_script",
                "x-version-added": "1.0"
            }
        },
        "/_scripts/{id}/{context}": {
            "post": {
                "description": "Creates or updates a script.",
                "operationId": "PutScript_Post_WithContext",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutScript_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Script ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Script ID."
                        },
                        "required": true
                    },
                    {
                        "name": "context",
                        "in": "path",
                        "description": "Script context.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Script context."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PutScript_Post_WithContext 200 response"
                    }
                },
                "x-operation-group": "put_script",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or updates a script.",
                "operationId": "PutScript_Put_WithContext",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutScript_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Script ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Script ID."
                        },
                        "required": true
                    },
                    {
                        "name": "context",
                        "in": "path",
                        "description": "Script context.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Script context."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PutScript_Put_WithContext 200 response"
                    }
                },
                "x-operation-group": "put_script",
                "x-version-added": "1.0"
            }
        },
        "/_search": {
            "get": {
                "description": "Returns results matching a query.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/search/"
                },
                "operationId": "Search_Get",
                "parameters": [
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Specify whether to return detailed information about score computation as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return detailed information about score computation as part of a hit."
                        }
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "docvalue_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit."
                        },
                        "explode": true
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Starting offset.",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "description": "Starting offset.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Number of hits to return.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of hits to return.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma-separated list of <field>:<direction> pairs.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of <field>:<direction> pairs."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "terminate_after",
                        "in": "query",
                        "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                        "schema": {
                            "type": "integer",
                            "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "stats",
                        "in": "query",
                        "description": "Specific 'tag' of the request for logging and statistical purposes.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Specific 'tag' of the request for logging and statistical purposes."
                        },
                        "explode": true
                    },
                    {
                        "name": "suggest_field",
                        "in": "query",
                        "description": "Specify which field to use for suggestions.",
                        "schema": {
                            "type": "string",
                            "description": "Specify which field to use for suggestions."
                        }
                    },
                    {
                        "name": "suggest_mode",
                        "in": "query",
                        "description": "Specify suggest mode.",
                        "schema": {
                            "$ref": "#/components/schemas/SuggestMode"
                        }
                    },
                    {
                        "name": "suggest_size",
                        "in": "query",
                        "description": "How many suggestions to return in response.",
                        "schema": {
                            "type": "integer",
                            "description": "How many suggestions to return in response.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "suggest_text",
                        "in": "query",
                        "description": "The source text for which the suggestions should be returned.",
                        "schema": {
                            "type": "string",
                            "description": "The source text for which the suggestions should be returned."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "track_scores",
                        "in": "query",
                        "description": "Whether to calculate and return scores even if they are not used for sorting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to calculate and return scores even if they are not used for sorting."
                        }
                    },
                    {
                        "name": "track_total_hits",
                        "in": "query",
                        "description": "Indicate if the number of documents that match the query should be tracked.",
                        "schema": {
                            "type": "boolean",
                            "description": "Indicate if the number of documents that match the query should be tracked."
                        }
                    },
                    {
                        "name": "allow_partial_search_results",
                        "in": "query",
                        "description": "Indicate if an error should be returned if there is a partial search failure or timeout.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicate if an error should be returned if there is a partial search failure or timeout."
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Whether to return document version as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to return document version as part of a hit."
                        }
                    },
                    {
                        "name": "seq_no_primary_term",
                        "in": "query",
                        "description": "Specify whether to return sequence number and primary term of the last modification of each hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return sequence number and primary term of the last modification of each hit."
                        }
                    },
                    {
                        "name": "request_cache",
                        "in": "query",
                        "description": "Specify if request cache should be used for this request or not, defaults to index level setting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify if request cache should be used for this request or not, defaults to index level setting."
                        }
                    },
                    {
                        "name": "batched_reduce_size",
                        "in": "query",
                        "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                        "schema": {
                            "type": "integer",
                            "default": 512,
                            "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_concurrent_shard_requests",
                        "in": "query",
                        "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pre_filter_shard_size",
                        "in": "query",
                        "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                        "schema": {
                            "type": "integer",
                            "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search_Get 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search_GetResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "search",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns results matching a query.",
                "operationId": "Search_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Search_BodyParams"
                            },
                            "examples": {
                                "Search_Post_example1": {
                                    "summary": "Examples for Post Search Operation.",
                                    "description": "",
                                    "value": {
                                        "query": {
                                            "match_all": {}
                                        },
                                        "fields": [
                                            "*"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Specify whether to return detailed information about score computation as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return detailed information about score computation as part of a hit."
                        }
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "docvalue_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit."
                        },
                        "explode": true
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Starting offset.",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "description": "Starting offset.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        },
                        "examples": {
                            "Search_Post_example1": {
                                "summary": "Examples for Post Search Operation.",
                                "description": "",
                                "value": "1d"
                            }
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Number of hits to return.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of hits to return.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma-separated list of <field>:<direction> pairs.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of <field>:<direction> pairs."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "terminate_after",
                        "in": "query",
                        "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                        "schema": {
                            "type": "integer",
                            "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "stats",
                        "in": "query",
                        "description": "Specific 'tag' of the request for logging and statistical purposes.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Specific 'tag' of the request for logging and statistical purposes."
                        },
                        "explode": true
                    },
                    {
                        "name": "suggest_field",
                        "in": "query",
                        "description": "Specify which field to use for suggestions.",
                        "schema": {
                            "type": "string",
                            "description": "Specify which field to use for suggestions."
                        }
                    },
                    {
                        "name": "suggest_mode",
                        "in": "query",
                        "description": "Specify suggest mode.",
                        "schema": {
                            "$ref": "#/components/schemas/SuggestMode"
                        }
                    },
                    {
                        "name": "suggest_size",
                        "in": "query",
                        "description": "How many suggestions to return in response.",
                        "schema": {
                            "type": "integer",
                            "description": "How many suggestions to return in response.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "suggest_text",
                        "in": "query",
                        "description": "The source text for which the suggestions should be returned.",
                        "schema": {
                            "type": "string",
                            "description": "The source text for which the suggestions should be returned."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "track_scores",
                        "in": "query",
                        "description": "Whether to calculate and return scores even if they are not used for sorting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to calculate and return scores even if they are not used for sorting."
                        }
                    },
                    {
                        "name": "track_total_hits",
                        "in": "query",
                        "description": "Indicate if the number of documents that match the query should be tracked.",
                        "schema": {
                            "type": "boolean",
                            "description": "Indicate if the number of documents that match the query should be tracked."
                        }
                    },
                    {
                        "name": "allow_partial_search_results",
                        "in": "query",
                        "description": "Indicate if an error should be returned if there is a partial search failure or timeout.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicate if an error should be returned if there is a partial search failure or timeout."
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Whether to return document version as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to return document version as part of a hit."
                        }
                    },
                    {
                        "name": "seq_no_primary_term",
                        "in": "query",
                        "description": "Specify whether to return sequence number and primary term of the last modification of each hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return sequence number and primary term of the last modification of each hit."
                        }
                    },
                    {
                        "name": "request_cache",
                        "in": "query",
                        "description": "Specify if request cache should be used for this request or not, defaults to index level setting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify if request cache should be used for this request or not, defaults to index level setting."
                        }
                    },
                    {
                        "name": "batched_reduce_size",
                        "in": "query",
                        "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                        "schema": {
                            "type": "integer",
                            "default": 512,
                            "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_concurrent_shard_requests",
                        "in": "query",
                        "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pre_filter_shard_size",
                        "in": "query",
                        "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                        "schema": {
                            "type": "integer",
                            "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search_Post 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search_PostResponseContent"
                                },
                                "examples": {
                                    "Search_Post_example1": {
                                        "summary": "Examples for Post Search Operation.",
                                        "description": "",
                                        "value": {
                                            "timed_out": false,
                                            "_shards": {
                                                "total": 1,
                                                "successful": 1,
                                                "skipped": 0,
                                                "failed": 0
                                            },
                                            "hits": {
                                                "total": {
                                                    "value": 0,
                                                    "relation": "eq"
                                                },
                                                "hits": []
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "search",
                "x-version-added": "1.0"
            }
        },
        "/_search/point_in_time": {
            "delete": {
                "description": "Deletes one or more point in time searches based on the IDs passed.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#delete-pits"
                },
                "operationId": "DeletePit",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeletePit_BodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "DeletePit 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeletePitResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "delete_pit",
                "x-version-added": "2.4"
            }
        },
        "/_search/point_in_time/_all": {
            "delete": {
                "description": "Deletes all active point in time searches.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#delete-pits"
                },
                "operationId": "DeleteAllPits",
                "responses": {
                    "200": {
                        "description": "DeleteAllPits 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteAllPitsResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "delete_all_pits",
                "x-version-added": "2.4"
            },
            "get": {
                "description": "Lists all active point in time searches.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#list-all-pits"
                },
                "operationId": "GetAllPits",
                "responses": {
                    "200": {
                        "description": "GetAllPits 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAllPitsResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "get_all_pits",
                "x-version-added": "2.4"
            }
        },
        "/_search/scroll": {
            "delete": {
                "description": "Explicitly clears the search context for a scroll.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/scroll/"
                },
                "operationId": "ClearScroll",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClearScroll_BodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ClearScroll 200 response"
                    }
                },
                "x-operation-group": "clear_scroll",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Allows to retrieve a large numbers of results from a single search request.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/scroll/#path-and-http-methods"
                },
                "operationId": "Scroll_Get",
                "parameters": [
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "scroll_id",
                        "in": "query",
                        "description": "Scroll ID.",
                        "schema": {
                            "type": "string",
                            "description": "Scroll ID."
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Scroll_Get 200 response"
                    }
                },
                "x-operation-group": "scroll",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to retrieve a large numbers of results from a single search request.",
                "operationId": "Scroll_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Scroll_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "scroll_id",
                        "in": "query",
                        "description": "Scroll ID.",
                        "schema": {
                            "type": "string",
                            "description": "Scroll ID."
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Scroll_Post 200 response"
                    }
                },
                "x-operation-group": "scroll",
                "x-version-added": "1.0"
            }
        },
        "/_search/scroll/{scroll_id}": {
            "delete": {
                "description": "Explicitly clears the search context for a scroll.",
                "operationId": "ClearScroll_WithScrollId",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClearScroll_BodyParams"
                            }
                        }
                    }
                },
                "deprecated": true,
                "parameters": [
                    {
                        "name": "scroll_id",
                        "in": "path",
                        "description": "Comma-separated list of scroll IDs to clear.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of scroll IDs to clear.",
                            "deprecated": true,
                            "x-data-type": "array"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ClearScroll_WithScrollId 200 response"
                    }
                },
                "x-deprecation-message": "A scroll id can be quite large and should be specified as part of the body",
                "x-operation-group": "clear_scroll",
                "x-version-added": "1.0",
                "x-version-deprecated": "1.0"
            },
            "get": {
                "description": "Allows to retrieve a large numbers of results from a single search request.",
                "operationId": "Scroll_Get_WithScrollId",
                "deprecated": true,
                "parameters": [
                    {
                        "name": "scroll_id",
                        "in": "path",
                        "description": "Scroll ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Scroll ID."
                        },
                        "required": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "scroll_id",
                        "in": "query",
                        "description": "Scroll ID.",
                        "schema": {
                            "type": "string",
                            "description": "Scroll ID."
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Scroll_Get_WithScrollId 200 response"
                    }
                },
                "x-deprecation-message": "A scroll id can be quite large and should be specified as part of the body",
                "x-operation-group": "scroll",
                "x-version-added": "1.0",
                "x-version-deprecated": "1.0"
            },
            "post": {
                "description": "Allows to retrieve a large numbers of results from a single search request.",
                "operationId": "Scroll_Post_WithScrollId",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Scroll_BodyParams"
                            }
                        }
                    }
                },
                "deprecated": true,
                "parameters": [
                    {
                        "name": "scroll_id",
                        "in": "path",
                        "description": "Scroll ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Scroll ID."
                        },
                        "required": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "scroll_id",
                        "in": "query",
                        "description": "Scroll ID.",
                        "schema": {
                            "type": "string",
                            "description": "Scroll ID."
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Scroll_Post_WithScrollId 200 response"
                    }
                },
                "x-deprecation-message": "A scroll id can be quite large and should be specified as part of the body",
                "x-operation-group": "scroll",
                "x-version-added": "1.0",
                "x-version-deprecated": "1.0"
            }
        },
        "/_search/template": {
            "get": {
                "description": "Allows to use the Mustache language to pre-render a search definition.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/search-plugins/search-template/"
                },
                "operationId": "SearchTemplate_Get",
                "parameters": [
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchTypeMulti"
                        }
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Specify whether to return detailed information about score computation as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return detailed information about score computation as part of a hit."
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Specify whether to profile the query execution.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to profile the query execution."
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SearchTemplate_Get 200 response"
                    }
                },
                "x-operation-group": "search_template",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to use the Mustache language to pre-render a search definition.",
                "operationId": "SearchTemplate_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchTemplate_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchTypeMulti"
                        }
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Specify whether to return detailed information about score computation as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return detailed information about score computation as part of a hit."
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Specify whether to profile the query execution.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to profile the query execution."
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SearchTemplate_Post 200 response"
                    }
                },
                "x-operation-group": "search_template",
                "x-version-added": "1.0"
            }
        },
        "/_search_shards": {
            "get": {
                "description": "Returns information about the indices and shards that a search request would be executed against.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "SearchShards_Get",
                "parameters": [
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SearchShards_Get 200 response"
                    }
                },
                "x-operation-group": "search_shards",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns information about the indices and shards that a search request would be executed against.",
                "operationId": "SearchShards_Post",
                "parameters": [
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SearchShards_Post 200 response"
                    }
                },
                "x-operation-group": "search_shards",
                "x-version-added": "1.0"
            }
        },
        "/_segments": {
            "get": {
                "description": "Provides low-level information about segments in a Lucene index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesSegments",
                "parameters": [
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "verbose",
                        "in": "query",
                        "description": "Includes detailed memory usage by Lucene.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Includes detailed memory usage by Lucene."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesSegments 200 response"
                    }
                },
                "x-operation-group": "indices.segments",
                "x-version-added": "1.0"
            }
        },
        "/_settings": {
            "get": {
                "description": "Returns settings for one or more indices.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/get-settings/"
                },
                "operationId": "IndicesGetSettings",
                "parameters": [
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "include_defaults",
                        "in": "query",
                        "description": "Whether to return all default setting for each of the indices.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to return all default setting for each of the indices."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetSettings 200 response"
                    }
                },
                "x-operation-group": "indices.get_settings",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Updates the index settings.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/update-settings/"
                },
                "operationId": "IndicesPutSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesPutSettings_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "preserve_existing",
                        "in": "query",
                        "description": "Whether to update existing settings. If set to `true` existing settings on an index remain unchanged.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to update existing settings. If set to `true` existing settings on an index remain unchanged."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesPutSettings 200 response"
                    }
                },
                "x-operation-group": "indices.put_settings",
                "x-version-added": "1.0"
            }
        },
        "/_settings/{name}": {
            "get": {
                "description": "Returns settings for one or more indices.",
                "operationId": "IndicesGetSettings_WithName",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of settings.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of settings.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "include_defaults",
                        "in": "query",
                        "description": "Whether to return all default setting for each of the indices.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to return all default setting for each of the indices."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetSettings_WithName 200 response"
                    }
                },
                "x-operation-group": "indices.get_settings",
                "x-version-added": "1.0"
            }
        },
        "/_shard_stores": {
            "get": {
                "description": "Provides store information for shard copies of indices.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesShardStores",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Comma-separated list of statuses used to filter on shards to get store information for.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Status_Member"
                            },
                            "description": "Comma-separated list of statuses used to filter on shards to get store information for."
                        },
                        "explode": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesShardStores 200 response"
                    }
                },
                "x-operation-group": "indices.shard_stores",
                "x-version-added": "1.0"
            }
        },
        "/_snapshot": {
            "get": {
                "description": "Returns information about a repository.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/snapshots/get-snapshot-repository/"
                },
                "operationId": "SnapshotGetRepository",
                "parameters": [
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotGetRepository 200 response"
                    }
                },
                "x-operation-group": "snapshot.get_repository",
                "x-version-added": "1.0"
            }
        },
        "/_snapshot/_status": {
            "get": {
                "description": "Returns information about the status of a snapshot.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/snapshots/get-snapshot-status/"
                },
                "operationId": "SnapshotStatus",
                "parameters": [
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotStatus 200 response"
                    }
                },
                "x-operation-group": "snapshot.status",
                "x-version-added": "1.0"
            }
        },
        "/_snapshot/{repository}": {
            "delete": {
                "description": "Deletes a repository.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/snapshots/delete-snapshot-repository/"
                },
                "operationId": "SnapshotDeleteRepository",
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Name of the snapshot repository to unregister. Wildcard (`*`) patterns are supported.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Name of the snapshot repository to unregister. Wildcard (`*`) patterns are supported.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotDeleteRepository 200 response"
                    }
                },
                "x-operation-group": "snapshot.delete_repository",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Returns information about a repository.",
                "operationId": "SnapshotGetRepository_WithRepository",
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Comma-separated list of repository names.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of repository names.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotGetRepository_WithRepository 200 response"
                    }
                },
                "x-operation-group": "snapshot.get_repository",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Creates a repository.",
                "operationId": "SnapshotCreateRepository_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SnapshotCreateRepository_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Repository name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Repository name."
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "verify",
                        "in": "query",
                        "description": "Whether to verify the repository after creation.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to verify the repository after creation."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotCreateRepository_Post 200 response"
                    }
                },
                "x-operation-group": "snapshot.create_repository",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates a repository.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/snapshots/create-repository/"
                },
                "operationId": "SnapshotCreateRepository_Put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SnapshotCreateRepository_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Repository name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Repository name."
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "verify",
                        "in": "query",
                        "description": "Whether to verify the repository after creation.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to verify the repository after creation."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotCreateRepository_Put 200 response"
                    }
                },
                "x-operation-group": "snapshot.create_repository",
                "x-version-added": "1.0"
            }
        },
        "/_snapshot/{repository}/_cleanup": {
            "post": {
                "description": "Removes stale data from repository.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "SnapshotCleanupRepository",
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Repository name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Repository name."
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotCleanupRepository 200 response"
                    }
                },
                "x-operation-group": "snapshot.cleanup_repository",
                "x-version-added": "1.0"
            }
        },
        "/_snapshot/{repository}/_status": {
            "get": {
                "description": "Returns information about the status of a snapshot.",
                "operationId": "SnapshotStatus_WithRepository",
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Repository name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Repository name."
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotStatus_WithRepository 200 response"
                    }
                },
                "x-operation-group": "snapshot.status",
                "x-version-added": "1.0"
            }
        },
        "/_snapshot/{repository}/_verify": {
            "post": {
                "description": "Verifies a repository.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/snapshots/verify-snapshot-repository/"
                },
                "operationId": "SnapshotVerifyRepository",
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Repository name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Repository name."
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotVerifyRepository 200 response"
                    }
                },
                "x-operation-group": "snapshot.verify_repository",
                "x-version-added": "1.0"
            }
        },
        "/_snapshot/{repository}/{snapshot}": {
            "delete": {
                "description": "Deletes a snapshot.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/snapshots/delete-snapshot/"
                },
                "operationId": "SnapshotDelete",
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Repository name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Repository name."
                        },
                        "required": true
                    },
                    {
                        "name": "snapshot",
                        "in": "path",
                        "description": "Snapshot name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Snapshot name."
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotDelete 200 response"
                    }
                },
                "x-operation-group": "snapshot.delete",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Returns information about a snapshot.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "SnapshotGet",
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Repository name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Repository name."
                        },
                        "required": true
                    },
                    {
                        "name": "snapshot",
                        "in": "path",
                        "description": "Comma-separated list of snapshot names.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of snapshot names.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown."
                        }
                    },
                    {
                        "name": "verbose",
                        "in": "query",
                        "description": "Whether to show verbose snapshot info or only show the basic info found in the repository index blob.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to show verbose snapshot info or only show the basic info found in the repository index blob."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotGet 200 response"
                    }
                },
                "x-operation-group": "snapshot.get",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Creates a snapshot in a repository.",
                "operationId": "SnapshotCreate_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SnapshotCreate_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Repository name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Repository name."
                        },
                        "required": true
                    },
                    {
                        "name": "snapshot",
                        "in": "path",
                        "description": "Snapshot name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Snapshot name."
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_completion",
                        "in": "query",
                        "description": "Should this request wait until the operation has completed before returning.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Should this request wait until the operation has completed before returning."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotCreate_Post 200 response"
                    }
                },
                "x-operation-group": "snapshot.create",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates a snapshot in a repository.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/snapshots/create-snapshot/"
                },
                "operationId": "SnapshotCreate_Put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SnapshotCreate_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Repository name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Repository name."
                        },
                        "required": true
                    },
                    {
                        "name": "snapshot",
                        "in": "path",
                        "description": "Snapshot name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Snapshot name."
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_completion",
                        "in": "query",
                        "description": "Should this request wait until the operation has completed before returning.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Should this request wait until the operation has completed before returning."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotCreate_Put 200 response"
                    }
                },
                "x-operation-group": "snapshot.create",
                "x-version-added": "1.0"
            }
        },
        "/_snapshot/{repository}/{snapshot}/_clone/{target_snapshot}": {
            "put": {
                "description": "Clones indices from one snapshot into another snapshot in the same repository.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "SnapshotClone",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SnapshotClone_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Repository name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Repository name."
                        },
                        "required": true
                    },
                    {
                        "name": "snapshot",
                        "in": "path",
                        "description": "Snapshot name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Snapshot name."
                        },
                        "required": true
                    },
                    {
                        "name": "target_snapshot",
                        "in": "path",
                        "description": "The name of the cloned snapshot to create.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the cloned snapshot to create."
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotClone 200 response"
                    }
                },
                "x-operation-group": "snapshot.clone",
                "x-version-added": "1.0"
            }
        },
        "/_snapshot/{repository}/{snapshot}/_restore": {
            "post": {
                "description": "Restores a snapshot.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/snapshots/restore-snapshot/"
                },
                "operationId": "SnapshotRestore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SnapshotRestore_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Repository name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Repository name."
                        },
                        "required": true
                    },
                    {
                        "name": "snapshot",
                        "in": "path",
                        "description": "Snapshot name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Snapshot name."
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_completion",
                        "in": "query",
                        "description": "Should this request wait until the operation has completed before returning.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Should this request wait until the operation has completed before returning."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotRestore 200 response"
                    }
                },
                "x-operation-group": "snapshot.restore",
                "x-version-added": "1.0"
            }
        },
        "/_snapshot/{repository}/{snapshot}/_status": {
            "get": {
                "description": "Returns information about the status of a snapshot.",
                "operationId": "SnapshotStatus_WithRepositorySnapshot",
                "parameters": [
                    {
                        "name": "repository",
                        "in": "path",
                        "description": "Repository name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Repository name."
                        },
                        "required": true
                    },
                    {
                        "name": "snapshot",
                        "in": "path",
                        "description": "Comma-separated list of snapshot names.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of snapshot names.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SnapshotStatus_WithRepositorySnapshot 200 response"
                    }
                },
                "x-operation-group": "snapshot.status",
                "x-version-added": "1.0"
            }
        },
        "/_stats": {
            "get": {
                "description": "Provides statistics on operations happening in an index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesStats",
                "parameters": [
                    {
                        "name": "completion_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fielddata_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "groups",
                        "in": "query",
                        "description": "Comma-separated list of search groups for `search` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of search groups for `search` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Return stats aggregated at cluster, index or shard level.",
                        "schema": {
                            "$ref": "#/components/schemas/IndiciesStatLevel"
                        }
                    },
                    {
                        "name": "include_segment_file_sizes",
                        "in": "query",
                        "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)."
                        }
                    },
                    {
                        "name": "include_unloaded_segments",
                        "in": "query",
                        "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "forbid_closed_indices",
                        "in": "query",
                        "description": "If set to false stats will also collected from closed indices if explicitly specified or if expand_wildcards expands to closed indices.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "If set to false stats will also collected from closed indices if explicitly specified or if expand_wildcards expands to closed indices."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesStats 200 response"
                    }
                },
                "x-operation-group": "indices.stats",
                "x-version-added": "1.0"
            }
        },
        "/_stats/{metric}": {
            "get": {
                "description": "Provides statistics on operations happening in an index.",
                "operationId": "IndicesStats_WithMetric",
                "parameters": [
                    {
                        "name": "metric",
                        "in": "path",
                        "description": "Limit the information returned the specific metrics.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Limit the information returned the specific metrics.",
                            "x-enum-options": [
                                "_all",
                                "store",
                                "indexing",
                                "get",
                                "search",
                                "merge",
                                "flush",
                                "refresh",
                                "query_cache",
                                "fielddata",
                                "docs",
                                "warmer",
                                "completion",
                                "segments",
                                "translog",
                                "suggest",
                                "request_cache",
                                "recovery"
                            ],
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "completion_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fielddata_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "groups",
                        "in": "query",
                        "description": "Comma-separated list of search groups for `search` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of search groups for `search` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Return stats aggregated at cluster, index or shard level.",
                        "schema": {
                            "$ref": "#/components/schemas/IndiciesStatLevel"
                        }
                    },
                    {
                        "name": "include_segment_file_sizes",
                        "in": "query",
                        "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)."
                        }
                    },
                    {
                        "name": "include_unloaded_segments",
                        "in": "query",
                        "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "forbid_closed_indices",
                        "in": "query",
                        "description": "If set to false stats will also collected from closed indices if explicitly specified or if expand_wildcards expands to closed indices.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "If set to false stats will also collected from closed indices if explicitly specified or if expand_wildcards expands to closed indices."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesStats_WithMetric 200 response"
                    }
                },
                "x-operation-group": "indices.stats",
                "x-version-added": "1.0"
            }
        },
        "/_tasks": {
            "get": {
                "description": "Returns a list of tasks.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/tasks/"
                },
                "operationId": "TasksList",
                "parameters": [
                    {
                        "name": "nodes",
                        "in": "query",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes."
                        },
                        "explode": true
                    },
                    {
                        "name": "actions",
                        "in": "query",
                        "description": "Comma-separated list of actions that should be returned. Leave empty to return all.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of actions that should be returned. Leave empty to return all."
                        },
                        "explode": true
                    },
                    {
                        "name": "detailed",
                        "in": "query",
                        "description": "Return detailed task information.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return detailed task information."
                        }
                    },
                    {
                        "name": "parent_task_id",
                        "in": "query",
                        "description": "Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.",
                        "schema": {
                            "type": "string",
                            "description": "Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all."
                        }
                    },
                    {
                        "name": "wait_for_completion",
                        "in": "query",
                        "description": "Should this request wait until the operation has completed before returning.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Should this request wait until the operation has completed before returning."
                        }
                    },
                    {
                        "name": "group_by",
                        "in": "query",
                        "description": "Group tasks by nodes or parent/child relationships.",
                        "schema": {
                            "$ref": "#/components/schemas/GroupBy"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TasksList 200 response"
                    }
                },
                "x-operation-group": "tasks.list",
                "x-version-added": "1.0"
            }
        },
        "/_tasks/_cancel": {
            "post": {
                "description": "Cancels a task, if it can be cancelled through an API.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/tasks/#task-canceling"
                },
                "operationId": "TasksCancel",
                "parameters": [
                    {
                        "name": "nodes",
                        "in": "query",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes."
                        },
                        "explode": true
                    },
                    {
                        "name": "actions",
                        "in": "query",
                        "description": "Comma-separated list of actions that should be cancelled. Leave empty to cancel all.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of actions that should be cancelled. Leave empty to cancel all."
                        },
                        "explode": true
                    },
                    {
                        "name": "parent_task_id",
                        "in": "query",
                        "description": "Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.",
                        "schema": {
                            "type": "string",
                            "description": "Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all."
                        }
                    },
                    {
                        "name": "wait_for_completion",
                        "in": "query",
                        "description": "Should this request wait until the operation has completed before returning.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Should this request wait until the operation has completed before returning."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TasksCancel 200 response"
                    }
                },
                "x-operation-group": "tasks.cancel",
                "x-version-added": "1.0"
            }
        },
        "/_tasks/{task_id}": {
            "get": {
                "description": "Returns information about a task.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/tasks/"
                },
                "operationId": "TasksGet",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "description": "Return the task with specified id (node_id:task_number).",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Return the task with specified id (node_id:task_number)."
                        },
                        "required": true
                    },
                    {
                        "name": "wait_for_completion",
                        "in": "query",
                        "description": "Should this request wait until the operation has completed before returning.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Should this request wait until the operation has completed before returning."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TasksGet 200 response"
                    }
                },
                "x-operation-group": "tasks.get",
                "x-version-added": "1.0"
            }
        },
        "/_tasks/{task_id}/_cancel": {
            "post": {
                "description": "Cancels a task, if it can be cancelled through an API.",
                "operationId": "TasksCancel_WithTaskId",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "description": "Cancel the task with specified task id (node_id:task_number).",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Cancel the task with specified task id (node_id:task_number)."
                        },
                        "required": true
                    },
                    {
                        "name": "nodes",
                        "in": "query",
                        "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes."
                        },
                        "explode": true
                    },
                    {
                        "name": "actions",
                        "in": "query",
                        "description": "Comma-separated list of actions that should be cancelled. Leave empty to cancel all.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of actions that should be cancelled. Leave empty to cancel all."
                        },
                        "explode": true
                    },
                    {
                        "name": "parent_task_id",
                        "in": "query",
                        "description": "Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.",
                        "schema": {
                            "type": "string",
                            "description": "Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all."
                        }
                    },
                    {
                        "name": "wait_for_completion",
                        "in": "query",
                        "description": "Should this request wait until the operation has completed before returning.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Should this request wait until the operation has completed before returning."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TasksCancel_WithTaskId 200 response"
                    }
                },
                "x-operation-group": "tasks.cancel",
                "x-version-added": "1.0"
            }
        },
        "/_template": {
            "get": {
                "description": "Returns an index template.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesGetTemplate",
                "parameters": [
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetTemplate 200 response"
                    }
                },
                "x-operation-group": "indices.get_template",
                "x-version-added": "1.0"
            }
        },
        "/_template/{name}": {
            "delete": {
                "description": "Deletes an index template.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesDeleteTemplate",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the template."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesDeleteTemplate 200 response"
                    }
                },
                "x-operation-group": "indices.delete_template",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Returns an index template.",
                "operationId": "IndicesGetTemplate_WithName",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated names of the index templates.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated names of the index templates.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetTemplate_WithName 200 response"
                    }
                },
                "x-operation-group": "indices.get_template",
                "x-version-added": "1.0"
            },
            "head": {
                "description": "Returns information about whether a particular index template exists.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesExistsTemplate",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated names of the index templates.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated names of the index templates.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesExistsTemplate 200 response"
                    }
                },
                "x-operation-group": "indices.exists_template",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Creates or updates an index template.",
                "operationId": "IndicesPutTemplate_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesPutTemplate_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the template."
                        },
                        "required": true
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers).",
                        "schema": {
                            "type": "integer",
                            "description": "The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers).",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "create",
                        "in": "query",
                        "description": "Whether the index template should only be added if new or can also replace an existing one.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether the index template should only be added if new or can also replace an existing one."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesPutTemplate_Post 200 response"
                    }
                },
                "x-operation-group": "indices.put_template",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or updates an index template.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/im-plugin/index-templates/"
                },
                "operationId": "IndicesPutTemplate_Put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesPutTemplate_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the template.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the template."
                        },
                        "required": true
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers).",
                        "schema": {
                            "type": "integer",
                            "description": "The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers).",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "create",
                        "in": "query",
                        "description": "Whether the index template should only be added if new or can also replace an existing one.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether the index template should only be added if new or can also replace an existing one."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesPutTemplate_Put 200 response"
                    }
                },
                "x-operation-group": "indices.put_template",
                "x-version-added": "1.0"
            }
        },
        "/_update_by_query/{task_id}/_rethrottle": {
            "post": {
                "description": "Changes the number of requests per second for a particular Update By Query operation.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "UpdateByQueryRethrottle",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "description": "The task id to rethrottle.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The task id to rethrottle."
                        },
                        "required": true
                    },
                    {
                        "name": "requests_per_second",
                        "in": "query",
                        "description": "The throttle for this request in sub-requests per second. -1 means no throttle.",
                        "schema": {
                            "type": "integer",
                            "description": "The throttle for this request in sub-requests per second. -1 means no throttle.",
                            "format": "int32"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UpdateByQueryRethrottle 200 response"
                    }
                },
                "x-operation-group": "update_by_query_rethrottle",
                "x-version-added": "1.0"
            }
        },
        "/_upgrade": {
            "get": {
                "description": "The _upgrade API is no longer useful and will be removed.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesGetUpgrade",
                "parameters": [
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetUpgrade 200 response"
                    }
                },
                "x-operation-group": "indices.get_upgrade",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "The _upgrade API is no longer useful and will be removed.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesUpgrade",
                "parameters": [
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "wait_for_completion",
                        "in": "query",
                        "description": "Should this request wait until the operation has completed before returning.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Should this request wait until the operation has completed before returning."
                        }
                    },
                    {
                        "name": "only_ancient_segments",
                        "in": "query",
                        "description": "If true, only ancient (an older Lucene major release) segments will be upgraded.",
                        "schema": {
                            "type": "boolean",
                            "description": "If true, only ancient (an older Lucene major release) segments will be upgraded."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesUpgrade 200 response"
                    }
                },
                "x-operation-group": "indices.upgrade",
                "x-version-added": "1.0"
            }
        },
        "/_validate/query": {
            "get": {
                "description": "Allows a user to validate a potentially expensive query without executing it.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesValidateQuery_Get",
                "parameters": [
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Return detailed information about the error.",
                        "schema": {
                            "type": "boolean",
                            "description": "Return detailed information about the error."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "rewrite",
                        "in": "query",
                        "description": "Provide a more detailed explanation showing the actual Lucene query that will be executed.",
                        "schema": {
                            "type": "boolean",
                            "description": "Provide a more detailed explanation showing the actual Lucene query that will be executed."
                        }
                    },
                    {
                        "name": "all_shards",
                        "in": "query",
                        "description": "Execute validation on all shards instead of one random shard per index.",
                        "schema": {
                            "type": "boolean",
                            "description": "Execute validation on all shards instead of one random shard per index."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesValidateQuery_Get 200 response"
                    }
                },
                "x-operation-group": "indices.validate_query",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows a user to validate a potentially expensive query without executing it.",
                "operationId": "IndicesValidateQuery_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesValidateQuery_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Return detailed information about the error.",
                        "schema": {
                            "type": "boolean",
                            "description": "Return detailed information about the error."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "rewrite",
                        "in": "query",
                        "description": "Provide a more detailed explanation showing the actual Lucene query that will be executed.",
                        "schema": {
                            "type": "boolean",
                            "description": "Provide a more detailed explanation showing the actual Lucene query that will be executed."
                        }
                    },
                    {
                        "name": "all_shards",
                        "in": "query",
                        "description": "Execute validation on all shards instead of one random shard per index.",
                        "schema": {
                            "type": "boolean",
                            "description": "Execute validation on all shards instead of one random shard per index."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesValidateQuery_Post 200 response"
                    }
                },
                "x-operation-group": "indices.validate_query",
                "x-version-added": "1.0"
            }
        },
        "/{alias}/_rollover": {
            "post": {
                "description": "Updates an alias to point to a new index when the existing index\nis considered to be too large or too old.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/dashboards/im-dashboards/rollover/"
                },
                "operationId": "IndicesRollover",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesRollover_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "alias",
                        "in": "path",
                        "description": "The name of the alias to rollover.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the alias to rollover."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "dry_run",
                        "in": "query",
                        "description": "If set to true the rollover action will only be validated but not actually performed even if a condition matches.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If set to true the rollover action will only be validated but not actually performed even if a condition matches."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Set the number of active shards to wait for on the newly created rollover index before the operation returns.",
                        "schema": {
                            "type": "string",
                            "description": "Set the number of active shards to wait for on the newly created rollover index before the operation returns."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesRollover 200 response"
                    }
                },
                "x-operation-group": "indices.rollover",
                "x-version-added": "1.0"
            }
        },
        "/{alias}/_rollover/{new_index}": {
            "post": {
                "description": "Updates an alias to point to a new index when the existing index\nis considered to be too large or too old.",
                "operationId": "IndicesRollover_WithNewIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesRollover_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "alias",
                        "in": "path",
                        "description": "The name of the alias to rollover.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the alias to rollover."
                        },
                        "required": true
                    },
                    {
                        "name": "new_index",
                        "in": "path",
                        "description": "The name of the rollover index.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the rollover index."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "dry_run",
                        "in": "query",
                        "description": "If set to true the rollover action will only be validated but not actually performed even if a condition matches.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If set to true the rollover action will only be validated but not actually performed even if a condition matches."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Set the number of active shards to wait for on the newly created rollover index before the operation returns.",
                        "schema": {
                            "type": "string",
                            "description": "Set the number of active shards to wait for on the newly created rollover index before the operation returns."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesRollover_WithNewIndex 200 response"
                    }
                },
                "x-operation-group": "indices.rollover",
                "x-version-added": "1.0"
            }
        },
        "/{index}": {
            "delete": {
                "description": "Deletes an index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/delete-index/"
                },
                "operationId": "IndicesDelete",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to delete; use `_all` or `*` string to delete all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to delete; use `_all` or `*` string to delete all indices.",
                            "x-data-type": "array"
                        },
                        "required": true,
                        "examples": {
                            "IndicesDelete_example1": {
                                "summary": "Examples for Delete Index Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesDelete 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesDeleteResponseContent"
                                },
                                "examples": {
                                    "IndicesDelete_example1": {
                                        "summary": "Examples for Delete Index Operation.",
                                        "description": "",
                                        "value": {
                                            "acknowledged": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.delete",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Returns information about one or more indices.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/get-index/"
                },
                "operationId": "IndicesGet",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "include_defaults",
                        "in": "query",
                        "description": "Whether to return all default setting for each of the indices.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to return all default setting for each of the indices."
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGet 200 response"
                    }
                },
                "x-operation-group": "indices.get",
                "x-version-added": "1.0"
            },
            "head": {
                "description": "Returns information about whether a particular index exists.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/exists/"
                },
                "operationId": "IndicesExists",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "include_defaults",
                        "in": "query",
                        "description": "Whether to return all default setting for each of the indices.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to return all default setting for each of the indices."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesExists 200 response"
                    }
                },
                "x-operation-group": "indices.exists",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates an index with optional settings and mappings.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/create-index/"
                },
                "operationId": "IndicesCreate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesCreate_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true,
                        "examples": {
                            "IndicesCreate_example1": {
                                "summary": "Examples for Create Index Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Set the number of active shards to wait for before the operation returns.",
                        "schema": {
                            "type": "string",
                            "description": "Set the number of active shards to wait for before the operation returns."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesCreate 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesCreateResponseContent"
                                },
                                "examples": {
                                    "IndicesCreate_example1": {
                                        "summary": "Examples for Create Index Operation.",
                                        "description": "",
                                        "value": {
                                            "index": "books",
                                            "shards_acknowledged": true,
                                            "acknowledged": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.create",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_alias": {
            "get": {
                "description": "Returns an alias.",
                "operationId": "IndicesGetAlias_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to filter aliases.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to filter aliases.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetAlias_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.get_alias",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_alias/{name}": {
            "delete": {
                "description": "Deletes an alias.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/im-plugin/index-alias/#delete-aliases"
                },
                "operationId": "IndicesDeleteAlias",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesDeleteAlias 200 response"
                    }
                },
                "x-operation-group": "indices.delete_alias",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Returns an alias.",
                "operationId": "IndicesGetAlias_WithIndexName",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to filter aliases.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to filter aliases.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of alias names.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of alias names.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetAlias_WithIndexName 200 response"
                    }
                },
                "x-operation-group": "indices.get_alias",
                "x-version-added": "1.0"
            },
            "head": {
                "description": "Returns information about whether a particular alias exists.",
                "operationId": "IndicesExistsAlias_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to filter aliases.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to filter aliases.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of alias names.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of alias names.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesExistsAlias_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.exists_alias",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Creates or updates an alias.",
                "operationId": "IndicesPutAlias_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesPutAlias_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the alias to be created or updated.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the alias to be created or updated."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesPutAlias_Post 200 response"
                    }
                },
                "x-operation-group": "indices.put_alias",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or updates an alias.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/im-plugin/index-alias/#create-aliases"
                },
                "operationId": "IndicesPutAlias_Put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesPutAlias_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the alias to be created or updated.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the alias to be created or updated."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesPutAlias_Put 200 response"
                    }
                },
                "x-operation-group": "indices.put_alias",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_aliases/{name}": {
            "delete": {
                "description": "Deletes an alias.",
                "operationId": "IndicesDeleteAlias_Plural",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesDeleteAlias_Plural 200 response"
                    }
                },
                "x-operation-group": "indices.delete_alias",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Creates or updates an alias.",
                "operationId": "IndicesPutAlias_Post_Plural",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesPutAlias_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the alias to be created or updated.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the alias to be created or updated."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesPutAlias_Post_Plural 200 response"
                    }
                },
                "x-operation-group": "indices.put_alias",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or updates an alias.",
                "operationId": "IndicesPutAlias_Put_Plural",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesPutAlias_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the alias to be created or updated.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the alias to be created or updated."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesPutAlias_Put_Plural 200 response"
                    }
                },
                "x-operation-group": "indices.put_alias",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_analyze": {
            "get": {
                "description": "Performs the analysis process on a text and return the tokens breakdown of the text.",
                "operationId": "IndicesAnalyze_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The name of the index to scope the operation.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the index to scope the operation."
                        },
                        "required": true
                    },
                    {
                        "name": "index",
                        "in": "query",
                        "description": "The name of the index to scope the operation.",
                        "schema": {
                            "type": "string",
                            "description": "The name of the index to scope the operation."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesAnalyze_Get_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.analyze",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Performs the analysis process on a text and return the tokens breakdown of the text.",
                "operationId": "IndicesAnalyze_Post_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesAnalyze_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The name of the index to scope the operation.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the index to scope the operation."
                        },
                        "required": true
                    },
                    {
                        "name": "index",
                        "in": "query",
                        "description": "The name of the index to scope the operation.",
                        "schema": {
                            "type": "string",
                            "description": "The name of the index to scope the operation."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesAnalyze_Post_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.analyze",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_block/{block}": {
            "put": {
                "description": "Adds a block to an index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "IndicesAddBlock",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to add a block to.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to add a block to.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "block",
                        "in": "path",
                        "description": "The block to add (one of read, write, read_only or metadata).",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The block to add (one of read, write, read_only or metadata)."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesAddBlock 200 response"
                    }
                },
                "x-operation-group": "indices.add_block",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_bulk": {
            "post": {
                "description": "Allows to perform multiple index/update/delete operations in a single request.",
                "operationId": "Bulk_Post_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Bulk_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Default index for items which don't provide one.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Default index for items which don't provide one."
                        },
                        "required": true
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1).",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
                        "schema": {
                            "$ref": "#/components/schemas/RefreshEnum"
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Default document type for items which don't provide one.",
                        "schema": {
                            "type": "string",
                            "description": "Default document type for items which don't provide one."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "Default list of fields to exclude from the returned _source field, can be overridden on each sub-request.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Default list of fields to exclude from the returned _source field, can be overridden on each sub-request."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "Default list of fields to extract and return from the _source field, can be overridden on each sub-request.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Default list of fields to extract and return from the _source field, can be overridden on each sub-request."
                        },
                        "explode": true
                    },
                    {
                        "name": "pipeline",
                        "in": "query",
                        "description": "The pipeline id to preprocess incoming documents with.",
                        "schema": {
                            "type": "string",
                            "description": "The pipeline id to preprocess incoming documents with."
                        }
                    },
                    {
                        "name": "require_alias",
                        "in": "query",
                        "description": "Sets require_alias for all incoming documents.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Sets require_alias for all incoming documents."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bulk_Post_WithIndex 200 response"
                    }
                },
                "x-operation-group": "bulk",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Allows to perform multiple index/update/delete operations in a single request.",
                "operationId": "Bulk_Put_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Bulk_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Default index for items which don't provide one.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Default index for items which don't provide one."
                        },
                        "required": true
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1).",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
                        "schema": {
                            "$ref": "#/components/schemas/RefreshEnum"
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Default document type for items which don't provide one.",
                        "schema": {
                            "type": "string",
                            "description": "Default document type for items which don't provide one."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "Default list of fields to exclude from the returned _source field, can be overridden on each sub-request.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Default list of fields to exclude from the returned _source field, can be overridden on each sub-request."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "Default list of fields to extract and return from the _source field, can be overridden on each sub-request.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Default list of fields to extract and return from the _source field, can be overridden on each sub-request."
                        },
                        "explode": true
                    },
                    {
                        "name": "pipeline",
                        "in": "query",
                        "description": "The pipeline id to preprocess incoming documents with.",
                        "schema": {
                            "type": "string",
                            "description": "The pipeline id to preprocess incoming documents with."
                        }
                    },
                    {
                        "name": "require_alias",
                        "in": "query",
                        "description": "Sets require_alias for all incoming documents.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Sets require_alias for all incoming documents."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bulk_Put_WithIndex 200 response"
                    }
                },
                "x-operation-group": "bulk",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_cache/clear": {
            "post": {
                "description": "Clears all or specific caches for one or more indices.",
                "operationId": "IndicesClearCache_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "fielddata",
                        "in": "query",
                        "description": "Clear field data.",
                        "schema": {
                            "type": "boolean",
                            "description": "Clear field data."
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to clear when using the `fielddata` parameter (default: all).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to clear when using the `fielddata` parameter (default: all)."
                        },
                        "explode": true
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Clear query caches.",
                        "schema": {
                            "type": "boolean",
                            "description": "Clear query caches."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "index",
                        "in": "query",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices."
                        },
                        "explode": true
                    },
                    {
                        "name": "request",
                        "in": "query",
                        "description": "Clear request cache.",
                        "schema": {
                            "type": "boolean",
                            "description": "Clear request cache."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesClearCache_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.clear_cache",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_clone/{target}": {
            "post": {
                "description": "Clones an index.",
                "operationId": "IndicesClone_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesClone_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The name of the source index to clone.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the source index to clone."
                        },
                        "required": true
                    },
                    {
                        "name": "target",
                        "in": "path",
                        "description": "The name of the target index.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the target index."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Set the number of active shards to wait for on the cloned index before the operation returns.",
                        "schema": {
                            "type": "string",
                            "description": "Set the number of active shards to wait for on the cloned index before the operation returns."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesClone_Post 200 response"
                    }
                },
                "x-operation-group": "indices.clone",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Clones an index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/clone/"
                },
                "operationId": "IndicesClone_Put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesClone_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The name of the source index to clone.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the source index to clone."
                        },
                        "required": true
                    },
                    {
                        "name": "target",
                        "in": "path",
                        "description": "The name of the target index.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the target index."
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Set the number of active shards to wait for on the cloned index before the operation returns.",
                        "schema": {
                            "type": "string",
                            "description": "Set the number of active shards to wait for on the cloned index before the operation returns."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesClone_Put 200 response"
                    }
                },
                "x-operation-group": "indices.clone",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_close": {
            "post": {
                "description": "Closes an index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/close-index/"
                },
                "operationId": "IndicesClose",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to close.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to close.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of active shards to wait for before the operation returns.",
                        "schema": {
                            "type": "string",
                            "description": "Sets the number of active shards to wait for before the operation returns."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesClose 200 response"
                    }
                },
                "x-operation-group": "indices.close",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_count": {
            "get": {
                "description": "Returns number of documents matching a query.",
                "operationId": "Count_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to restrict the results.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to restrict the results.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "min_score",
                        "in": "query",
                        "description": "Include only documents with a specific `_score` value in the result.",
                        "schema": {
                            "type": "integer",
                            "description": "Include only documents with a specific `_score` value in the result.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "terminate_after",
                        "in": "query",
                        "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                        "schema": {
                            "type": "integer",
                            "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count_Get_WithIndex 200 response"
                    }
                },
                "x-operation-group": "count",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns number of documents matching a query.",
                "operationId": "Count_Post_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Count_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to restrict the results.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to restrict the results.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "min_score",
                        "in": "query",
                        "description": "Include only documents with a specific `_score` value in the result.",
                        "schema": {
                            "type": "integer",
                            "description": "Include only documents with a specific `_score` value in the result.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "terminate_after",
                        "in": "query",
                        "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                        "schema": {
                            "type": "integer",
                            "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count_Post_WithIndex 200 response"
                    }
                },
                "x-operation-group": "count",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_create/{id}": {
            "post": {
                "description": "Creates a new document in the index.\n\nReturns a 409 response when a document with a same ID already exists in the index.",
                "operationId": "Create_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Create_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Document ID."
                        },
                        "required": true
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1).",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
                        "schema": {
                            "$ref": "#/components/schemas/RefreshEnum"
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    },
                    {
                        "name": "pipeline",
                        "in": "query",
                        "description": "The pipeline id to preprocess incoming documents with.",
                        "schema": {
                            "type": "string",
                            "description": "The pipeline id to preprocess incoming documents with."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create_Post 200 response"
                    }
                },
                "x-operation-group": "create",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates a new document in the index.\n\nReturns a 409 response when a document with a same ID already exists in the index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/document-apis/index-document/"
                },
                "operationId": "Create_Put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Create_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Document ID."
                        },
                        "required": true
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1).",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
                        "schema": {
                            "$ref": "#/components/schemas/RefreshEnum"
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    },
                    {
                        "name": "pipeline",
                        "in": "query",
                        "description": "The pipeline id to preprocess incoming documents with.",
                        "schema": {
                            "type": "string",
                            "description": "The pipeline id to preprocess incoming documents with."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create_Put 200 response"
                    }
                },
                "x-operation-group": "create",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_delete_by_query": {
            "post": {
                "description": "Deletes documents matching the provided query.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/document-apis/delete-by-query/"
                },
                "operationId": "DeleteByQuery",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteByQuery_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Starting offset.",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "description": "Starting offset.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "conflicts",
                        "in": "query",
                        "description": "What to do when the operation encounters version conflicts?.",
                        "schema": {
                            "$ref": "#/components/schemas/Conflicts"
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "search_timeout",
                        "in": "query",
                        "description": "Explicit timeout for each search request. Defaults to no timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Explicit timeout for each search request. Defaults to no timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Deprecated, please use `max_docs` instead.",
                        "schema": {
                            "type": "integer",
                            "description": "Deprecated, please use `max_docs` instead.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_docs",
                        "in": "query",
                        "description": "Maximum number of documents to process (default: all documents).",
                        "schema": {
                            "type": "integer",
                            "description": "Maximum number of documents to process (default: all documents).",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma-separated list of <field>:<direction> pairs.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of <field>:<direction> pairs."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "terminate_after",
                        "in": "query",
                        "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                        "schema": {
                            "type": "integer",
                            "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "stats",
                        "in": "query",
                        "description": "Specific 'tag' of the request for logging and statistical purposes.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Specific 'tag' of the request for logging and statistical purposes."
                        },
                        "explode": true
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Whether to return document version as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to return document version as part of a hit."
                        }
                    },
                    {
                        "name": "request_cache",
                        "in": "query",
                        "description": "Specify if request cache should be used for this request or not, defaults to index level setting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify if request cache should be used for this request or not, defaults to index level setting."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "Refresh the shard containing the document before performing the operation.",
                        "schema": {
                            "type": "boolean",
                            "description": "Refresh the shard containing the document before performing the operation."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Time each individual bulk request should wait for shards that are unavailable.",
                        "schema": {
                            "type": "string",
                            "default": "1m",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Time each individual bulk request should wait for shards that are unavailable.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1).",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)."
                        }
                    },
                    {
                        "name": "scroll_size",
                        "in": "query",
                        "description": "Size on the scroll request powering the operation.",
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "description": "Size on the scroll request powering the operation.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "wait_for_completion",
                        "in": "query",
                        "description": "Should this request wait until the operation has completed before returning.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Should this request wait until the operation has completed before returning."
                        }
                    },
                    {
                        "name": "requests_per_second",
                        "in": "query",
                        "description": "The throttle for this request in sub-requests per second. -1 means no throttle.",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "description": "The throttle for this request in sub-requests per second. -1 means no throttle.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "slices",
                        "in": "query",
                        "description": "The number of slices this task should be divided into. Defaults to 1, meaning the task isn't sliced into subtasks. Can be set to `auto`.",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "The number of slices this task should be divided into. Defaults to 1, meaning the task isn't sliced into subtasks. Can be set to `auto`."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DeleteByQuery 200 response"
                    }
                },
                "x-operation-group": "delete_by_query",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_doc": {
            "post": {
                "description": "Creates or updates a document in an index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/document-apis/index-document/"
                },
                "operationId": "Index_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Index_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1).",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)."
                        }
                    },
                    {
                        "name": "op_type",
                        "in": "query",
                        "description": "Explicit operation type. Defaults to `index` for requests with an explicit document ID, and to `create` for requests without an explicit document ID.",
                        "schema": {
                            "$ref": "#/components/schemas/OpType"
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
                        "schema": {
                            "$ref": "#/components/schemas/RefreshEnum"
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    },
                    {
                        "name": "if_seq_no",
                        "in": "query",
                        "description": "only perform the operation if the last operation that has changed the document has the specified sequence number.",
                        "schema": {
                            "type": "integer",
                            "description": "only perform the operation if the last operation that has changed the document has the specified sequence number.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "if_primary_term",
                        "in": "query",
                        "description": "only perform the operation if the last operation that has changed the document has the specified primary term.",
                        "schema": {
                            "type": "integer",
                            "description": "only perform the operation if the last operation that has changed the document has the specified primary term.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pipeline",
                        "in": "query",
                        "description": "The pipeline id to preprocess incoming documents with.",
                        "schema": {
                            "type": "string",
                            "description": "The pipeline id to preprocess incoming documents with."
                        }
                    },
                    {
                        "name": "require_alias",
                        "in": "query",
                        "description": "When true, requires destination to be an alias.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "When true, requires destination to be an alias."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index_Post 200 response"
                    }
                },
                "x-operation-group": "index",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_doc/{id}": {
            "delete": {
                "description": "Removes a document from the index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/document-apis/delete-document/"
                },
                "operationId": "Delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Document ID."
                        },
                        "required": true
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1).",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
                        "schema": {
                            "$ref": "#/components/schemas/RefreshEnum"
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "if_seq_no",
                        "in": "query",
                        "description": "only perform the operation if the last operation that has changed the document has the specified sequence number.",
                        "schema": {
                            "type": "integer",
                            "description": "only perform the operation if the last operation that has changed the document has the specified sequence number.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "if_primary_term",
                        "in": "query",
                        "description": "only perform the operation if the last operation that has changed the document has the specified primary term.",
                        "schema": {
                            "type": "integer",
                            "description": "only perform the operation if the last operation that has changed the document has the specified primary term.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete 200 response"
                    }
                },
                "x-operation-group": "delete",
                "x-version-added": "1.0"
            },
            "get": {
                "description": "Returns a document.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/"
                },
                "operationId": "Get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Document ID."
                        },
                        "required": true,
                        "examples": {
                            "Get_example1": {
                                "summary": "Examples for Get document doc Operation.",
                                "description": "",
                                "value": "1"
                            }
                        }
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true,
                        "examples": {
                            "Get_example1": {
                                "summary": "Examples for Get document doc Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specify whether to perform the operation in realtime or search mode.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to perform the operation in realtime or search mode."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "Refresh the shard containing the document before performing the operation.",
                        "schema": {
                            "type": "boolean",
                            "description": "Refresh the shard containing the document before performing the operation."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetResponseContent"
                                },
                                "examples": {
                                    "Get_example1": {
                                        "summary": "Examples for Get document doc Operation.",
                                        "description": "",
                                        "value": {
                                            "_index": "books",
                                            "_id": "1",
                                            "found": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "get",
                "x-version-added": "1.0"
            },
            "head": {
                "description": "Returns information about whether a document exists in an index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/"
                },
                "operationId": "Exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Document ID."
                        },
                        "required": true
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specify whether to perform the operation in realtime or search mode.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to perform the operation in realtime or search mode."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "Refresh the shard containing the document before performing the operation.",
                        "schema": {
                            "type": "boolean",
                            "description": "Refresh the shard containing the document before performing the operation."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exists 200 response"
                    }
                },
                "x-operation-group": "exists",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Creates or updates a document in an index.",
                "operationId": "Index_Post_WithId",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Index_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Document ID."
                        },
                        "required": true
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1).",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)."
                        }
                    },
                    {
                        "name": "op_type",
                        "in": "query",
                        "description": "Explicit operation type. Defaults to `index` for requests with an explicit document ID, and to `create` for requests without an explicit document ID.",
                        "schema": {
                            "$ref": "#/components/schemas/OpType"
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
                        "schema": {
                            "$ref": "#/components/schemas/RefreshEnum"
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    },
                    {
                        "name": "if_seq_no",
                        "in": "query",
                        "description": "only perform the operation if the last operation that has changed the document has the specified sequence number.",
                        "schema": {
                            "type": "integer",
                            "description": "only perform the operation if the last operation that has changed the document has the specified sequence number.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "if_primary_term",
                        "in": "query",
                        "description": "only perform the operation if the last operation that has changed the document has the specified primary term.",
                        "schema": {
                            "type": "integer",
                            "description": "only perform the operation if the last operation that has changed the document has the specified primary term.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pipeline",
                        "in": "query",
                        "description": "The pipeline id to preprocess incoming documents with.",
                        "schema": {
                            "type": "string",
                            "description": "The pipeline id to preprocess incoming documents with."
                        }
                    },
                    {
                        "name": "require_alias",
                        "in": "query",
                        "description": "When true, requires destination to be an alias.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "When true, requires destination to be an alias."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index_Post_WithId 200 response"
                    }
                },
                "x-operation-group": "index",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Creates or updates a document in an index.",
                "operationId": "Index_Put_WithId",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Index_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Document ID."
                        },
                        "required": true
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1).",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)."
                        }
                    },
                    {
                        "name": "op_type",
                        "in": "query",
                        "description": "Explicit operation type. Defaults to `index` for requests with an explicit document ID, and to `create` for requests without an explicit document ID.",
                        "schema": {
                            "$ref": "#/components/schemas/OpType"
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
                        "schema": {
                            "$ref": "#/components/schemas/RefreshEnum"
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    },
                    {
                        "name": "if_seq_no",
                        "in": "query",
                        "description": "only perform the operation if the last operation that has changed the document has the specified sequence number.",
                        "schema": {
                            "type": "integer",
                            "description": "only perform the operation if the last operation that has changed the document has the specified sequence number.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "if_primary_term",
                        "in": "query",
                        "description": "only perform the operation if the last operation that has changed the document has the specified primary term.",
                        "schema": {
                            "type": "integer",
                            "description": "only perform the operation if the last operation that has changed the document has the specified primary term.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pipeline",
                        "in": "query",
                        "description": "The pipeline id to preprocess incoming documents with.",
                        "schema": {
                            "type": "string",
                            "description": "The pipeline id to preprocess incoming documents with."
                        }
                    },
                    {
                        "name": "require_alias",
                        "in": "query",
                        "description": "When true, requires destination to be an alias.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "When true, requires destination to be an alias."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Index_Put_WithId 200 response"
                    }
                },
                "x-operation-group": "index",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_explain/{id}": {
            "get": {
                "description": "Returns information about why a specific matches (or doesn't match) a query.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/explain/"
                },
                "operationId": "Explain_Get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Document ID."
                        },
                        "required": true
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcards and prefix queries in the query string query should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcards and prefix queries in the query string query should be analyzed."
                        }
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The default field for query string query.",
                        "schema": {
                            "type": "string",
                            "default": "_all",
                            "description": "The default field for query string query."
                        }
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Explain_Get 200 response"
                    }
                },
                "x-operation-group": "explain",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns information about why a specific matches (or doesn't match) a query.",
                "operationId": "Explain_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Explain_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Document ID."
                        },
                        "required": true
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcards and prefix queries in the query string query should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcards and prefix queries in the query string query should be analyzed."
                        }
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The default field for query string query.",
                        "schema": {
                            "type": "string",
                            "default": "_all",
                            "description": "The default field for query string query."
                        }
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Explain_Post 200 response"
                    }
                },
                "x-operation-group": "explain",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_field_caps": {
            "get": {
                "description": "Returns the information about the capabilities of fields among multiple indices.",
                "operationId": "FieldCaps_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of field names.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of field names."
                        },
                        "explode": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "include_unmapped",
                        "in": "query",
                        "description": "Indicates whether unmapped fields should be included in the response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether unmapped fields should be included in the response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FieldCaps_Get_WithIndex 200 response"
                    }
                },
                "x-operation-group": "field_caps",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns the information about the capabilities of fields among multiple indices.",
                "operationId": "FieldCaps_Post_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FieldCaps_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of field names.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of field names."
                        },
                        "explode": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "include_unmapped",
                        "in": "query",
                        "description": "Indicates whether unmapped fields should be included in the response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether unmapped fields should be included in the response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FieldCaps_Post_WithIndex 200 response"
                    }
                },
                "x-operation-group": "field_caps",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_flush": {
            "get": {
                "description": "Performs the flush operation on one or more indices.",
                "operationId": "IndicesFlush_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "force",
                        "in": "query",
                        "description": "Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)."
                        }
                    },
                    {
                        "name": "wait_if_ongoing",
                        "in": "query",
                        "description": "If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. If set to false the flush will be skipped iff if another flush operation is already running.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. If set to false the flush will be skipped iff if another flush operation is already running."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesFlush_Get_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.flush",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Performs the flush operation on one or more indices.",
                "operationId": "IndicesFlush_Post_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "force",
                        "in": "query",
                        "description": "Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)."
                        }
                    },
                    {
                        "name": "wait_if_ongoing",
                        "in": "query",
                        "description": "If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. If set to false the flush will be skipped iff if another flush operation is already running.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. If set to false the flush will be skipped iff if another flush operation is already running."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesFlush_Post_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.flush",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_forcemerge": {
            "post": {
                "description": "Performs the force merge operation on one or more indices.",
                "operationId": "IndicesForcemerge_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "flush",
                        "in": "query",
                        "description": "Specify whether the index should be flushed after performing the operation.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specify whether the index should be flushed after performing the operation."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "max_num_segments",
                        "in": "query",
                        "description": "The number of segments the index should be merged into (default: dynamic).",
                        "schema": {
                            "type": "integer",
                            "description": "The number of segments the index should be merged into (default: dynamic).",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "only_expunge_deletes",
                        "in": "query",
                        "description": "Specify whether the operation should only expunge deleted documents.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether the operation should only expunge deleted documents."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesForcemerge_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.forcemerge",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_mapping": {
            "get": {
                "description": "Returns mappings for one or more indices.",
                "operationId": "IndicesGetMapping_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node.",
                            "x-version-deprecated": "1.0",
                            "x-deprecation-message": "This parameter is a no-op and field mappings are always retrieved locally.",
                            "deprecated": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetMapping_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.get_mapping",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Updates the index mappings.",
                "operationId": "IndicesPutMapping_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesPutMapping_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "write_index_only",
                        "in": "query",
                        "description": "When true, applies mappings only to the write index of an alias or data stream.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "When true, applies mappings only to the write index of an alias or data stream."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesPutMapping_Post 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesPutMapping_PostResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.put_mapping",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Updates the index mappings.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/put-mapping/"
                },
                "operationId": "IndicesPutMapping_Put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesPutMapping_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "write_index_only",
                        "in": "query",
                        "description": "When true, applies mappings only to the write index of an alias or data stream.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "When true, applies mappings only to the write index of an alias or data stream."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesPutMapping_Put 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IndicesPutMapping_PutResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "indices.put_mapping",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_mapping/field/{fields}": {
            "get": {
                "description": "Returns mapping for one or more fields.",
                "operationId": "IndicesGetFieldMapping_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "fields",
                        "in": "path",
                        "description": "Comma-separated list of fields.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of fields.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "include_defaults",
                        "in": "query",
                        "description": "Whether the default mapping values should be returned as well.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether the default mapping values should be returned as well."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetFieldMapping_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.get_field_mapping",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_mget": {
            "get": {
                "description": "Allows to get multiple documents in one request.",
                "operationId": "Mget_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specify whether to perform the operation in realtime or search mode.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to perform the operation in realtime or search mode."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "Refresh the shard containing the document before performing the operation.",
                        "schema": {
                            "type": "boolean",
                            "description": "Refresh the shard containing the document before performing the operation."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mget_Get_WithIndex 200 response"
                    }
                },
                "x-operation-group": "mget",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to get multiple documents in one request.",
                "operationId": "Mget_Post_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Mget_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specify whether to perform the operation in realtime or search mode.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to perform the operation in realtime or search mode."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "Refresh the shard containing the document before performing the operation.",
                        "schema": {
                            "type": "boolean",
                            "description": "Refresh the shard containing the document before performing the operation."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mget_Post_WithIndex 200 response"
                    }
                },
                "x-operation-group": "mget",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_msearch": {
            "get": {
                "description": "Allows to execute several search operations in one request.",
                "operationId": "Msearch_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to use as default.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to use as default.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchTypeMulti"
                        }
                    },
                    {
                        "name": "max_concurrent_searches",
                        "in": "query",
                        "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                        "schema": {
                            "type": "integer",
                            "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "pre_filter_shard_size",
                        "in": "query",
                        "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                        "schema": {
                            "type": "integer",
                            "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_concurrent_shard_requests",
                        "in": "query",
                        "description": "The number of concurrent shard requests each sub search executes concurrently per node. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "description": "The number of concurrent shard requests each sub search executes concurrently per node. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Msearch_Get_WithIndex 200 response"
                    }
                },
                "x-operation-group": "msearch",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to execute several search operations in one request.",
                "operationId": "Msearch_Post_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Msearch_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to use as default.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to use as default.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchTypeMulti"
                        }
                    },
                    {
                        "name": "max_concurrent_searches",
                        "in": "query",
                        "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                        "schema": {
                            "type": "integer",
                            "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "pre_filter_shard_size",
                        "in": "query",
                        "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                        "schema": {
                            "type": "integer",
                            "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_concurrent_shard_requests",
                        "in": "query",
                        "description": "The number of concurrent shard requests each sub search executes concurrently per node. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "description": "The number of concurrent shard requests each sub search executes concurrently per node. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Msearch_Post_WithIndex 200 response"
                    }
                },
                "x-operation-group": "msearch",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_msearch/template": {
            "get": {
                "description": "Allows to execute several search template operations in one request.",
                "operationId": "MsearchTemplate_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to use as default.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to use as default.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchTypeMulti"
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "max_concurrent_searches",
                        "in": "query",
                        "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                        "schema": {
                            "type": "integer",
                            "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MsearchTemplate_Get_WithIndex 200 response"
                    }
                },
                "x-operation-group": "msearch_template",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to execute several search template operations in one request.",
                "operationId": "MsearchTemplate_Post_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MsearchTemplate_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to use as default.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to use as default.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchTypeMulti"
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "max_concurrent_searches",
                        "in": "query",
                        "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                        "schema": {
                            "type": "integer",
                            "description": "Controls the maximum number of concurrent searches the multi search api will execute.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MsearchTemplate_Post_WithIndex 200 response"
                    }
                },
                "x-operation-group": "msearch_template",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_mtermvectors": {
            "get": {
                "description": "Returns multiple termvectors in one request.",
                "operationId": "Mtermvectors_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The index in which the document resides.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The index in which the document resides."
                        },
                        "required": true
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "Comma-separated list of documents ids. You must define ids as parameter or set 'ids' or 'docs' in the request body.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of documents ids. You must define ids as parameter or set 'ids' or 'docs' in the request body."
                        },
                        "explode": true
                    },
                    {
                        "name": "term_statistics",
                        "in": "query",
                        "description": "Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "field_statistics",
                        "in": "query",
                        "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        },
                        "explode": true
                    },
                    {
                        "name": "offsets",
                        "in": "query",
                        "description": "Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "positions",
                        "in": "query",
                        "description": "Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "payloads",
                        "in": "query",
                        "description": "Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specifies if requests are real-time as opposed to near-real-time.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if requests are real-time as opposed to near-real-time."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mtermvectors_Get_WithIndex 200 response"
                    }
                },
                "x-operation-group": "mtermvectors",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns multiple termvectors in one request.",
                "operationId": "Mtermvectors_Post_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Mtermvectors_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The index in which the document resides.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The index in which the document resides."
                        },
                        "required": true
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "Comma-separated list of documents ids. You must define ids as parameter or set 'ids' or 'docs' in the request body.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of documents ids. You must define ids as parameter or set 'ids' or 'docs' in the request body."
                        },
                        "explode": true
                    },
                    {
                        "name": "term_statistics",
                        "in": "query",
                        "description": "Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "field_statistics",
                        "in": "query",
                        "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        },
                        "explode": true
                    },
                    {
                        "name": "offsets",
                        "in": "query",
                        "description": "Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "positions",
                        "in": "query",
                        "description": "Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "payloads",
                        "in": "query",
                        "description": "Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value. Applies to all returned documents unless otherwise specified in body 'params' or 'docs'."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specifies if requests are real-time as opposed to near-real-time.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if requests are real-time as opposed to near-real-time."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mtermvectors_Post_WithIndex 200 response"
                    }
                },
                "x-operation-group": "mtermvectors",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_open": {
            "post": {
                "description": "Opens an index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/open-index/"
                },
                "operationId": "IndicesOpen",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices to open.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices to open.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of active shards to wait for before the operation returns.",
                        "schema": {
                            "type": "string",
                            "description": "Sets the number of active shards to wait for before the operation returns."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesOpen 200 response"
                    }
                },
                "x-operation-group": "indices.open",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_rank_eval": {
            "get": {
                "description": "Allows to evaluate the quality of ranked search results over a set of typical search queries.",
                "operationId": "RankEval_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RankEval_Get_WithIndex 200 response"
                    }
                },
                "x-operation-group": "rank_eval",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to evaluate the quality of ranked search results over a set of typical search queries.",
                "operationId": "RankEval_Post_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RankEval_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RankEval_Post_WithIndex 200 response"
                    }
                },
                "x-operation-group": "rank_eval",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_recovery": {
            "get": {
                "description": "Returns information about ongoing index shard recoveries.",
                "operationId": "IndicesRecovery_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "detailed",
                        "in": "query",
                        "description": "Whether to display detailed information about shard recovery.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to display detailed information about shard recovery."
                        }
                    },
                    {
                        "name": "active_only",
                        "in": "query",
                        "description": "Display only those recoveries that are currently on-going.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Display only those recoveries that are currently on-going."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesRecovery_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.recovery",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_refresh": {
            "get": {
                "description": "Performs the refresh operation in one or more indices.",
                "operationId": "IndicesRefresh_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesRefresh_Get_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.refresh",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Performs the refresh operation in one or more indices.",
                "operationId": "IndicesRefresh_Post_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesRefresh_Post_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.refresh",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_search": {
            "get": {
                "description": "Returns results matching a query.",
                "operationId": "Search_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Specify whether to return detailed information about score computation as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return detailed information about score computation as part of a hit."
                        }
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "docvalue_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit."
                        },
                        "explode": true
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Starting offset.",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "description": "Starting offset.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Number of hits to return.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of hits to return.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma-separated list of <field>:<direction> pairs.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of <field>:<direction> pairs."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "terminate_after",
                        "in": "query",
                        "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                        "schema": {
                            "type": "integer",
                            "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "stats",
                        "in": "query",
                        "description": "Specific 'tag' of the request for logging and statistical purposes.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Specific 'tag' of the request for logging and statistical purposes."
                        },
                        "explode": true
                    },
                    {
                        "name": "suggest_field",
                        "in": "query",
                        "description": "Specify which field to use for suggestions.",
                        "schema": {
                            "type": "string",
                            "description": "Specify which field to use for suggestions."
                        }
                    },
                    {
                        "name": "suggest_mode",
                        "in": "query",
                        "description": "Specify suggest mode.",
                        "schema": {
                            "$ref": "#/components/schemas/SuggestMode"
                        }
                    },
                    {
                        "name": "suggest_size",
                        "in": "query",
                        "description": "How many suggestions to return in response.",
                        "schema": {
                            "type": "integer",
                            "description": "How many suggestions to return in response.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "suggest_text",
                        "in": "query",
                        "description": "The source text for which the suggestions should be returned.",
                        "schema": {
                            "type": "string",
                            "description": "The source text for which the suggestions should be returned."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "track_scores",
                        "in": "query",
                        "description": "Whether to calculate and return scores even if they are not used for sorting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to calculate and return scores even if they are not used for sorting."
                        }
                    },
                    {
                        "name": "track_total_hits",
                        "in": "query",
                        "description": "Indicate if the number of documents that match the query should be tracked.",
                        "schema": {
                            "type": "boolean",
                            "description": "Indicate if the number of documents that match the query should be tracked."
                        }
                    },
                    {
                        "name": "allow_partial_search_results",
                        "in": "query",
                        "description": "Indicate if an error should be returned if there is a partial search failure or timeout.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicate if an error should be returned if there is a partial search failure or timeout."
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Whether to return document version as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to return document version as part of a hit."
                        }
                    },
                    {
                        "name": "seq_no_primary_term",
                        "in": "query",
                        "description": "Specify whether to return sequence number and primary term of the last modification of each hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return sequence number and primary term of the last modification of each hit."
                        }
                    },
                    {
                        "name": "request_cache",
                        "in": "query",
                        "description": "Specify if request cache should be used for this request or not, defaults to index level setting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify if request cache should be used for this request or not, defaults to index level setting."
                        }
                    },
                    {
                        "name": "batched_reduce_size",
                        "in": "query",
                        "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                        "schema": {
                            "type": "integer",
                            "default": 512,
                            "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_concurrent_shard_requests",
                        "in": "query",
                        "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pre_filter_shard_size",
                        "in": "query",
                        "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                        "schema": {
                            "type": "integer",
                            "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search_Get_WithIndex 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search_Get_WithIndexResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "search",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns results matching a query.",
                "operationId": "Search_Post_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Search_BodyParams"
                            },
                            "examples": {
                                "Search_Post_WithIndex_example1": {
                                    "summary": "Examples for Post Search With Index Operation.",
                                    "description": "",
                                    "value": {
                                        "query": {
                                            "match_all": {}
                                        },
                                        "fields": [
                                            "*"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true,
                        "examples": {
                            "Search_Post_WithIndex_example1": {
                                "summary": "Examples for Post Search With Index Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Specify whether to return detailed information about score computation as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return detailed information about score computation as part of a hit."
                        }
                    },
                    {
                        "name": "stored_fields",
                        "in": "query",
                        "description": "Comma-separated list of stored fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of stored fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "docvalue_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return as the docvalue representation of a field for each hit."
                        },
                        "explode": true
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Starting offset.",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "description": "Starting offset.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        },
                        "examples": {
                            "Search_Post_WithIndex_example1": {
                                "summary": "Examples for Post Search With Index Operation.",
                                "description": "",
                                "value": "1d"
                            }
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Number of hits to return.",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "description": "Number of hits to return.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma-separated list of <field>:<direction> pairs.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of <field>:<direction> pairs."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "terminate_after",
                        "in": "query",
                        "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                        "schema": {
                            "type": "integer",
                            "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "stats",
                        "in": "query",
                        "description": "Specific 'tag' of the request for logging and statistical purposes.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Specific 'tag' of the request for logging and statistical purposes."
                        },
                        "explode": true
                    },
                    {
                        "name": "suggest_field",
                        "in": "query",
                        "description": "Specify which field to use for suggestions.",
                        "schema": {
                            "type": "string",
                            "description": "Specify which field to use for suggestions."
                        }
                    },
                    {
                        "name": "suggest_mode",
                        "in": "query",
                        "description": "Specify suggest mode.",
                        "schema": {
                            "$ref": "#/components/schemas/SuggestMode"
                        }
                    },
                    {
                        "name": "suggest_size",
                        "in": "query",
                        "description": "How many suggestions to return in response.",
                        "schema": {
                            "type": "integer",
                            "description": "How many suggestions to return in response.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "suggest_text",
                        "in": "query",
                        "description": "The source text for which the suggestions should be returned.",
                        "schema": {
                            "type": "string",
                            "description": "The source text for which the suggestions should be returned."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "track_scores",
                        "in": "query",
                        "description": "Whether to calculate and return scores even if they are not used for sorting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to calculate and return scores even if they are not used for sorting."
                        }
                    },
                    {
                        "name": "track_total_hits",
                        "in": "query",
                        "description": "Indicate if the number of documents that match the query should be tracked.",
                        "schema": {
                            "type": "boolean",
                            "description": "Indicate if the number of documents that match the query should be tracked."
                        }
                    },
                    {
                        "name": "allow_partial_search_results",
                        "in": "query",
                        "description": "Indicate if an error should be returned if there is a partial search failure or timeout.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicate if an error should be returned if there is a partial search failure or timeout."
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Whether to return document version as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to return document version as part of a hit."
                        }
                    },
                    {
                        "name": "seq_no_primary_term",
                        "in": "query",
                        "description": "Specify whether to return sequence number and primary term of the last modification of each hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return sequence number and primary term of the last modification of each hit."
                        }
                    },
                    {
                        "name": "request_cache",
                        "in": "query",
                        "description": "Specify if request cache should be used for this request or not, defaults to index level setting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify if request cache should be used for this request or not, defaults to index level setting."
                        }
                    },
                    {
                        "name": "batched_reduce_size",
                        "in": "query",
                        "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                        "schema": {
                            "type": "integer",
                            "default": 512,
                            "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_concurrent_shard_requests",
                        "in": "query",
                        "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pre_filter_shard_size",
                        "in": "query",
                        "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                        "schema": {
                            "type": "integer",
                            "description": "Threshold that enforces a pre-filter round-trip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter round-trip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search_Post_WithIndex 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search_Post_WithIndexResponseContent"
                                },
                                "examples": {
                                    "Search_Post_WithIndex_example1": {
                                        "summary": "Examples for Post Search With Index Operation.",
                                        "description": "",
                                        "value": {
                                            "timed_out": false,
                                            "_shards": {
                                                "total": 1,
                                                "successful": 1,
                                                "skipped": 0,
                                                "failed": 0
                                            },
                                            "hits": {
                                                "total": {
                                                    "value": 0,
                                                    "relation": "eq"
                                                },
                                                "hits": []
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "search",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_search/point_in_time": {
            "post": {
                "description": "Creates point in time context.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/search-plugins/point-in-time-api/#create-a-pit"
                },
                "operationId": "CreatePit",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "allow_partial_pit_creation",
                        "in": "query",
                        "description": "Allow if point in time can be created with partial failures.",
                        "schema": {
                            "type": "boolean",
                            "description": "Allow if point in time can be created with partial failures."
                        }
                    },
                    {
                        "name": "keep_alive",
                        "in": "query",
                        "description": "Specify the keep alive for point in time.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify the keep alive for point in time.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CreatePit 200 response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreatePitResponseContent"
                                }
                            }
                        }
                    }
                },
                "x-operation-group": "create_pit",
                "x-version-added": "2.4"
            }
        },
        "/{index}/_search/template": {
            "get": {
                "description": "Allows to use the Mustache language to pre-render a search definition.",
                "operationId": "SearchTemplate_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchTypeMulti"
                        }
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Specify whether to return detailed information about score computation as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return detailed information about score computation as part of a hit."
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Specify whether to profile the query execution.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to profile the query execution."
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SearchTemplate_Get_WithIndex 200 response"
                    }
                },
                "x-operation-group": "search_template",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows to use the Mustache language to pre-render a search definition.",
                "operationId": "SearchTemplate_Post_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchTemplate_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "ignore_throttled",
                        "in": "query",
                        "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchTypeMulti"
                        }
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Specify whether to return detailed information about score computation as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to return detailed information about score computation as part of a hit."
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Specify whether to profile the query execution.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to profile the query execution."
                        }
                    },
                    {
                        "name": "typed_keys",
                        "in": "query",
                        "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response."
                        }
                    },
                    {
                        "name": "rest_total_hits_as_int",
                        "in": "query",
                        "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response."
                        }
                    },
                    {
                        "name": "ccs_minimize_roundtrips",
                        "in": "query",
                        "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SearchTemplate_Post_WithIndex 200 response"
                    }
                },
                "x-operation-group": "search_template",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_search_shards": {
            "get": {
                "description": "Returns information about the indices and shards that a search request would be executed against.",
                "operationId": "SearchShards_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SearchShards_Get_WithIndex 200 response"
                    }
                },
                "x-operation-group": "search_shards",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns information about the indices and shards that a search request would be executed against.",
                "operationId": "SearchShards_Post_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SearchShards_Post_WithIndex 200 response"
                    }
                },
                "x-operation-group": "search_shards",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_segments": {
            "get": {
                "description": "Provides low-level information about segments in a Lucene index.",
                "operationId": "IndicesSegments_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "verbose",
                        "in": "query",
                        "description": "Includes detailed memory usage by Lucene.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Includes detailed memory usage by Lucene."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesSegments_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.segments",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_settings": {
            "get": {
                "description": "Returns settings for one or more indices.",
                "operationId": "IndicesGetSettings_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true,
                        "examples": {
                            "IndicesGetSettings_WithIndex_example1": {
                                "summary": "Examples for Get settings Index Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "include_defaults",
                        "in": "query",
                        "description": "Whether to return all default setting for each of the indices.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to return all default setting for each of the indices."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetSettings_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.get_settings",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Updates the index settings.",
                "operationId": "IndicesPutSettings_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesPutSettings_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "preserve_existing",
                        "in": "query",
                        "description": "Whether to update existing settings. If set to `true` existing settings on an index remain unchanged.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to update existing settings. If set to `true` existing settings on an index remain unchanged."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesPutSettings_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.put_settings",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_settings/{name}": {
            "get": {
                "description": "Returns settings for one or more indices.",
                "operationId": "IndicesGetSettings_WithIndexName",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true,
                        "examples": {
                            "IndicesGetSettings_WithIndexName_example1": {
                                "summary": "Examples for Get settings Index-setting Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Comma-separated list of settings.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of settings.",
                            "x-data-type": "array"
                        },
                        "required": true,
                        "examples": {
                            "IndicesGetSettings_WithIndexName_example1": {
                                "summary": "Examples for Get settings Index-setting Operation.",
                                "description": "",
                                "value": "index"
                            }
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "flat_settings",
                        "in": "query",
                        "description": "Return settings in flat format.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return settings in flat format."
                        }
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "Return local information, do not retrieve the state from cluster-manager node.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return local information, do not retrieve the state from cluster-manager node."
                        }
                    },
                    {
                        "name": "include_defaults",
                        "in": "query",
                        "description": "Whether to return all default setting for each of the indices.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to return all default setting for each of the indices."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetSettings_WithIndexName 200 response"
                    }
                },
                "x-operation-group": "indices.get_settings",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_shard_stores": {
            "get": {
                "description": "Provides store information for shard copies of indices.",
                "operationId": "IndicesShardStores_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Comma-separated list of statuses used to filter on shards to get store information for.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Status_Member"
                            },
                            "description": "Comma-separated list of statuses used to filter on shards to get store information for."
                        },
                        "explode": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesShardStores_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.shard_stores",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_shrink/{target}": {
            "post": {
                "description": "Allow to shrink an existing index into a new index with fewer primary shards.",
                "operationId": "IndicesShrink_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesShrink_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The name of the source index to shrink.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the source index to shrink."
                        },
                        "required": true
                    },
                    {
                        "name": "target",
                        "in": "path",
                        "description": "The name of the target index.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the target index."
                        },
                        "required": true
                    },
                    {
                        "name": "copy_settings",
                        "in": "query",
                        "description": "whether or not to copy settings from the source index.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "whether or not to copy settings from the source index."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Set the number of active shards to wait for on the shrunken index before the operation returns.",
                        "schema": {
                            "type": "string",
                            "description": "Set the number of active shards to wait for on the shrunken index before the operation returns."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesShrink_Post 200 response"
                    }
                },
                "x-operation-group": "indices.shrink",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Allow to shrink an existing index into a new index with fewer primary shards.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/shrink-index/"
                },
                "operationId": "IndicesShrink_Put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesShrink_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The name of the source index to shrink.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the source index to shrink."
                        },
                        "required": true
                    },
                    {
                        "name": "target",
                        "in": "path",
                        "description": "The name of the target index.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the target index."
                        },
                        "required": true
                    },
                    {
                        "name": "copy_settings",
                        "in": "query",
                        "description": "whether or not to copy settings from the source index.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "whether or not to copy settings from the source index."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Set the number of active shards to wait for on the shrunken index before the operation returns.",
                        "schema": {
                            "type": "string",
                            "description": "Set the number of active shards to wait for on the shrunken index before the operation returns."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesShrink_Put 200 response"
                    }
                },
                "x-operation-group": "indices.shrink",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_source/{id}": {
            "get": {
                "description": "Returns the source of a document.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/"
                },
                "operationId": "GetSource",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Document ID."
                        },
                        "required": true,
                        "examples": {
                            "GetSource_example1": {
                                "summary": "Examples for Get document source Operation.",
                                "description": "",
                                "value": "1"
                            }
                        }
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true,
                        "examples": {
                            "GetSource_example1": {
                                "summary": "Examples for Get document source Operation.",
                                "description": "",
                                "value": "books"
                            }
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specify whether to perform the operation in realtime or search mode.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to perform the operation in realtime or search mode."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "Refresh the shard containing the document before performing the operation.",
                        "schema": {
                            "type": "boolean",
                            "description": "Refresh the shard containing the document before performing the operation."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetSource 200 response"
                    }
                },
                "x-operation-group": "get_source",
                "x-version-added": "1.0"
            },
            "head": {
                "description": "Returns information about whether a document source exists in an index.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/"
                },
                "operationId": "ExistsSource",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Document ID."
                        },
                        "required": true
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specify whether to perform the operation in realtime or search mode.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether to perform the operation in realtime or search mode."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "Refresh the shard containing the document before performing the operation.",
                        "schema": {
                            "type": "boolean",
                            "description": "Refresh the shard containing the document before performing the operation."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ExistsSource 200 response"
                    }
                },
                "x-operation-group": "exists_source",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_split/{target}": {
            "post": {
                "description": "Allows you to split an existing index into a new index with more primary shards.",
                "operationId": "IndicesSplit_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesSplit_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The name of the source index to split.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the source index to split."
                        },
                        "required": true
                    },
                    {
                        "name": "target",
                        "in": "path",
                        "description": "The name of the target index.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the target index."
                        },
                        "required": true
                    },
                    {
                        "name": "copy_settings",
                        "in": "query",
                        "description": "whether or not to copy settings from the source index.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "whether or not to copy settings from the source index."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Set the number of active shards to wait for on the shrunken index before the operation returns.",
                        "schema": {
                            "type": "string",
                            "description": "Set the number of active shards to wait for on the shrunken index before the operation returns."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesSplit_Post 200 response"
                    }
                },
                "x-operation-group": "indices.split",
                "x-version-added": "1.0"
            },
            "put": {
                "description": "Allows you to split an existing index into a new index with more primary shards.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/index-apis/split/"
                },
                "operationId": "IndicesSplit_Put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesSplit_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The name of the source index to split.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the source index to split."
                        },
                        "required": true
                    },
                    {
                        "name": "target",
                        "in": "path",
                        "description": "The name of the target index.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The name of the target index."
                        },
                        "required": true
                    },
                    {
                        "name": "copy_settings",
                        "in": "query",
                        "description": "whether or not to copy settings from the source index.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "whether or not to copy settings from the source index."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "master_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to master node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to master node.",
                            "x-version-deprecated": "2.0.0",
                            "x-data-type": "time",
                            "x-deprecation-message": "To promote inclusive language, use 'cluster_manager_timeout' instead.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "cluster_manager_timeout",
                        "in": "query",
                        "description": "Operation timeout for connection to cluster-manager node.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout for connection to cluster-manager node.",
                            "x-version-added": "2.0.0",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Set the number of active shards to wait for on the shrunken index before the operation returns.",
                        "schema": {
                            "type": "string",
                            "description": "Set the number of active shards to wait for on the shrunken index before the operation returns."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesSplit_Put 200 response"
                    }
                },
                "x-operation-group": "indices.split",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_stats": {
            "get": {
                "description": "Provides statistics on operations happening in an index.",
                "operationId": "IndicesStats_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "completion_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fielddata_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "groups",
                        "in": "query",
                        "description": "Comma-separated list of search groups for `search` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of search groups for `search` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Return stats aggregated at cluster, index or shard level.",
                        "schema": {
                            "$ref": "#/components/schemas/IndiciesStatLevel"
                        }
                    },
                    {
                        "name": "include_segment_file_sizes",
                        "in": "query",
                        "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)."
                        }
                    },
                    {
                        "name": "include_unloaded_segments",
                        "in": "query",
                        "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "forbid_closed_indices",
                        "in": "query",
                        "description": "If set to false stats will also collected from closed indices if explicitly specified or if expand_wildcards expands to closed indices.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "If set to false stats will also collected from closed indices if explicitly specified or if expand_wildcards expands to closed indices."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesStats_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.stats",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_stats/{metric}": {
            "get": {
                "description": "Provides statistics on operations happening in an index.",
                "operationId": "IndicesStats_WithIndexMetric",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "metric",
                        "in": "path",
                        "description": "Limit the information returned the specific metrics.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Limit the information returned the specific metrics.",
                            "x-enum-options": [
                                "_all",
                                "store",
                                "indexing",
                                "get",
                                "search",
                                "merge",
                                "flush",
                                "refresh",
                                "query_cache",
                                "fielddata",
                                "docs",
                                "warmer",
                                "completion",
                                "segments",
                                "translog",
                                "suggest",
                                "request_cache",
                                "recovery"
                            ],
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "completion_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fielddata_fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards).",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)."
                        },
                        "explode": true
                    },
                    {
                        "name": "groups",
                        "in": "query",
                        "description": "Comma-separated list of search groups for `search` index metric.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of search groups for `search` index metric."
                        },
                        "explode": true
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Return stats aggregated at cluster, index or shard level.",
                        "schema": {
                            "$ref": "#/components/schemas/IndiciesStatLevel"
                        }
                    },
                    {
                        "name": "include_segment_file_sizes",
                        "in": "query",
                        "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested).",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)."
                        }
                    },
                    {
                        "name": "include_unloaded_segments",
                        "in": "query",
                        "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "forbid_closed_indices",
                        "in": "query",
                        "description": "If set to false stats will also collected from closed indices if explicitly specified or if expand_wildcards expands to closed indices.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "If set to false stats will also collected from closed indices if explicitly specified or if expand_wildcards expands to closed indices."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesStats_WithIndexMetric 200 response"
                    }
                },
                "x-operation-group": "indices.stats",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_termvectors": {
            "get": {
                "description": "Returns information and statistics about terms in the fields of a particular document.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest"
                },
                "operationId": "Termvectors_Get",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The index in which the document resides.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The index in which the document resides."
                        },
                        "required": true
                    },
                    {
                        "name": "term_statistics",
                        "in": "query",
                        "description": "Specifies if total term frequency and document frequency should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specifies if total term frequency and document frequency should be returned."
                        }
                    },
                    {
                        "name": "field_statistics",
                        "in": "query",
                        "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned."
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "offsets",
                        "in": "query",
                        "description": "Specifies if term offsets should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term offsets should be returned."
                        }
                    },
                    {
                        "name": "positions",
                        "in": "query",
                        "description": "Specifies if term positions should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term positions should be returned."
                        }
                    },
                    {
                        "name": "payloads",
                        "in": "query",
                        "description": "Specifies if term payloads should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term payloads should be returned."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specifies if request is real-time as opposed to near-real-time.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if request is real-time as opposed to near-real-time."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Termvectors_Get 200 response"
                    }
                },
                "x-operation-group": "termvectors",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns information and statistics about terms in the fields of a particular document.",
                "operationId": "Termvectors_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Termvectors_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The index in which the document resides.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The index in which the document resides."
                        },
                        "required": true
                    },
                    {
                        "name": "term_statistics",
                        "in": "query",
                        "description": "Specifies if total term frequency and document frequency should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specifies if total term frequency and document frequency should be returned."
                        }
                    },
                    {
                        "name": "field_statistics",
                        "in": "query",
                        "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned."
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "offsets",
                        "in": "query",
                        "description": "Specifies if term offsets should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term offsets should be returned."
                        }
                    },
                    {
                        "name": "positions",
                        "in": "query",
                        "description": "Specifies if term positions should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term positions should be returned."
                        }
                    },
                    {
                        "name": "payloads",
                        "in": "query",
                        "description": "Specifies if term payloads should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term payloads should be returned."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specifies if request is real-time as opposed to near-real-time.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if request is real-time as opposed to near-real-time."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Termvectors_Post 200 response"
                    }
                },
                "x-operation-group": "termvectors",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_termvectors/{id}": {
            "get": {
                "description": "Returns information and statistics about terms in the fields of a particular document.",
                "operationId": "Termvectors_Get_WithId",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The index in which the document resides.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The index in which the document resides."
                        },
                        "required": true
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID. When not specified a doc param should be supplied.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Document ID. When not specified a doc param should be supplied."
                        },
                        "required": true
                    },
                    {
                        "name": "term_statistics",
                        "in": "query",
                        "description": "Specifies if total term frequency and document frequency should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specifies if total term frequency and document frequency should be returned."
                        }
                    },
                    {
                        "name": "field_statistics",
                        "in": "query",
                        "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned."
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "offsets",
                        "in": "query",
                        "description": "Specifies if term offsets should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term offsets should be returned."
                        }
                    },
                    {
                        "name": "positions",
                        "in": "query",
                        "description": "Specifies if term positions should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term positions should be returned."
                        }
                    },
                    {
                        "name": "payloads",
                        "in": "query",
                        "description": "Specifies if term payloads should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term payloads should be returned."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specifies if request is real-time as opposed to near-real-time.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if request is real-time as opposed to near-real-time."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Termvectors_Get_WithId 200 response"
                    }
                },
                "x-operation-group": "termvectors",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Returns information and statistics about terms in the fields of a particular document.",
                "operationId": "Termvectors_Post_WithId",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Termvectors_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The index in which the document resides.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "The index in which the document resides."
                        },
                        "required": true
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID. When not specified a doc param should be supplied.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Document ID. When not specified a doc param should be supplied."
                        },
                        "required": true
                    },
                    {
                        "name": "term_statistics",
                        "in": "query",
                        "description": "Specifies if total term frequency and document frequency should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specifies if total term frequency and document frequency should be returned."
                        }
                    },
                    {
                        "name": "field_statistics",
                        "in": "query",
                        "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned."
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "offsets",
                        "in": "query",
                        "description": "Specifies if term offsets should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term offsets should be returned."
                        }
                    },
                    {
                        "name": "positions",
                        "in": "query",
                        "description": "Specifies if term positions should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term positions should be returned."
                        }
                    },
                    {
                        "name": "payloads",
                        "in": "query",
                        "description": "Specifies if term payloads should be returned.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if term payloads should be returned."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "realtime",
                        "in": "query",
                        "description": "Specifies if request is real-time as opposed to near-real-time.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies if request is real-time as opposed to near-real-time."
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Explicit version number for concurrency control.",
                        "schema": {
                            "type": "integer",
                            "description": "Explicit version number for concurrency control.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version_type",
                        "in": "query",
                        "description": "Specific version type.",
                        "schema": {
                            "$ref": "#/components/schemas/VersionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Termvectors_Post_WithId 200 response"
                    }
                },
                "x-operation-group": "termvectors",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_update/{id}": {
            "post": {
                "description": "Updates a document with a script or partial document.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/document-apis/update-document/"
                },
                "operationId": "Update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Update_BodyParams"
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document ID.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Document ID."
                        },
                        "required": true
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Index name.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Index name."
                        },
                        "required": true
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1).",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)."
                        }
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "lang",
                        "in": "query",
                        "description": "The script language.",
                        "schema": {
                            "type": "string",
                            "default": "painless",
                            "description": "The script language."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
                        "schema": {
                            "$ref": "#/components/schemas/RefreshEnum"
                        }
                    },
                    {
                        "name": "retry_on_conflict",
                        "in": "query",
                        "description": "Specify how many times should the operation be retried when a conflict occurs.",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "description": "Specify how many times should the operation be retried when a conflict occurs.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Routing value.",
                        "schema": {
                            "type": "string",
                            "description": "Routing value."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Operation timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Operation timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "if_seq_no",
                        "in": "query",
                        "description": "only perform the operation if the last operation that has changed the document has the specified sequence number.",
                        "schema": {
                            "type": "integer",
                            "description": "only perform the operation if the last operation that has changed the document has the specified sequence number.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "if_primary_term",
                        "in": "query",
                        "description": "only perform the operation if the last operation that has changed the document has the specified primary term.",
                        "schema": {
                            "type": "integer",
                            "description": "only perform the operation if the last operation that has changed the document has the specified primary term.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "require_alias",
                        "in": "query",
                        "description": "When true, requires destination to be an alias.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "When true, requires destination to be an alias."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update 200 response"
                    }
                },
                "x-operation-group": "update",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_update_by_query": {
            "post": {
                "description": "Performs an update on every document in the index without changing the source,\nfor example to pick up a mapping change.",
                "externalDocs": {
                    "description": "API Reference",
                    "url": "https://opensearch.org/docs/latest/api-reference/document-apis/update-by-query/"
                },
                "operationId": "UpdateByQuery",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateByQuery_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Starting offset.",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "description": "Starting offset.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "conflicts",
                        "in": "query",
                        "description": "What to do when the operation encounters version conflicts?.",
                        "schema": {
                            "$ref": "#/components/schemas/Conflicts"
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "pipeline",
                        "in": "query",
                        "description": "The pipeline id to preprocess incoming documents with.",
                        "schema": {
                            "type": "string",
                            "description": "The pipeline id to preprocess incoming documents with."
                        }
                    },
                    {
                        "name": "preference",
                        "in": "query",
                        "description": "Specify the node or shard the operation should be performed on.",
                        "schema": {
                            "type": "string",
                            "default": "random",
                            "description": "Specify the node or shard the operation should be performed on."
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "routing",
                        "in": "query",
                        "description": "Comma-separated list of specific routing values.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of specific routing values."
                        },
                        "explode": true
                    },
                    {
                        "name": "scroll",
                        "in": "query",
                        "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Specify how long a consistent view of the index should be maintained for scrolled search.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "search_type",
                        "in": "query",
                        "description": "Search operation type.",
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "search_timeout",
                        "in": "query",
                        "description": "Explicit timeout for each search request. Defaults to no timeout.",
                        "schema": {
                            "type": "string",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Explicit timeout for each search request. Defaults to no timeout.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Deprecated, please use `max_docs` instead.",
                        "schema": {
                            "type": "integer",
                            "description": "Deprecated, please use `max_docs` instead.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "max_docs",
                        "in": "query",
                        "description": "Maximum number of documents to process (default: all documents).",
                        "schema": {
                            "type": "integer",
                            "description": "Maximum number of documents to process (default: all documents).",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Comma-separated list of <field>:<direction> pairs.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Comma-separated list of <field>:<direction> pairs."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "description": "True or false to return the _source field or not, or a list of fields to return.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "True or false to return the _source field or not, or a list of fields to return."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_excludes",
                        "in": "query",
                        "description": "List of fields to exclude from the returned _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to exclude from the returned _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "_source_includes",
                        "in": "query",
                        "description": "List of fields to extract and return from the _source field.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of fields to extract and return from the _source field."
                        },
                        "explode": true
                    },
                    {
                        "name": "terminate_after",
                        "in": "query",
                        "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                        "schema": {
                            "type": "integer",
                            "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "stats",
                        "in": "query",
                        "description": "Specific 'tag' of the request for logging and statistical purposes.",
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Specific 'tag' of the request for logging and statistical purposes."
                        },
                        "explode": true
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Whether to return document version as part of a hit.",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to return document version as part of a hit."
                        }
                    },
                    {
                        "name": "request_cache",
                        "in": "query",
                        "description": "Specify if request cache should be used for this request or not, defaults to index level setting.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify if request cache should be used for this request or not, defaults to index level setting."
                        }
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "description": "Should the affected indexes be refreshed?.",
                        "schema": {
                            "type": "boolean",
                            "description": "Should the affected indexes be refreshed?."
                        }
                    },
                    {
                        "name": "timeout",
                        "in": "query",
                        "description": "Time each individual bulk request should wait for shards that are unavailable.",
                        "schema": {
                            "type": "string",
                            "default": "1m",
                            "pattern": "^([0-9]+)(?:d|h|m|s|ms|micros|nanos)$",
                            "description": "Time each individual bulk request should wait for shards that are unavailable.",
                            "x-data-type": "time"
                        }
                    },
                    {
                        "name": "wait_for_active_shards",
                        "in": "query",
                        "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1).",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "Sets the number of shard copies that must be active before proceeding with the operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)."
                        }
                    },
                    {
                        "name": "scroll_size",
                        "in": "query",
                        "description": "Size on the scroll request powering the operation.",
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "description": "Size on the scroll request powering the operation.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "wait_for_completion",
                        "in": "query",
                        "description": "Should this request wait until the operation has completed before returning.",
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "description": "Should this request wait until the operation has completed before returning."
                        }
                    },
                    {
                        "name": "requests_per_second",
                        "in": "query",
                        "description": "The throttle for this request in sub-requests per second. -1 means no throttle.",
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "description": "The throttle for this request in sub-requests per second. -1 means no throttle.",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "slices",
                        "in": "query",
                        "description": "The number of slices this task should be divided into. Defaults to 1, meaning the task isn't sliced into subtasks. Can be set to `auto`.",
                        "schema": {
                            "type": "string",
                            "default": "1",
                            "description": "The number of slices this task should be divided into. Defaults to 1, meaning the task isn't sliced into subtasks. Can be set to `auto`."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UpdateByQuery 200 response"
                    }
                },
                "x-operation-group": "update_by_query",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_upgrade": {
            "get": {
                "description": "The _upgrade API is no longer useful and will be removed.",
                "operationId": "IndicesGetUpgrade_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesGetUpgrade_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.get_upgrade",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "The _upgrade API is no longer useful and will be removed.",
                "operationId": "IndicesUpgrade_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "wait_for_completion",
                        "in": "query",
                        "description": "Should this request wait until the operation has completed before returning.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Should this request wait until the operation has completed before returning."
                        }
                    },
                    {
                        "name": "only_ancient_segments",
                        "in": "query",
                        "description": "If true, only ancient (an older Lucene major release) segments will be upgraded.",
                        "schema": {
                            "type": "boolean",
                            "description": "If true, only ancient (an older Lucene major release) segments will be upgraded."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesUpgrade_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.upgrade",
                "x-version-added": "1.0"
            }
        },
        "/{index}/_validate/query": {
            "get": {
                "description": "Allows a user to validate a potentially expensive query without executing it.",
                "operationId": "IndicesValidateQuery_Get_WithIndex",
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Return detailed information about the error.",
                        "schema": {
                            "type": "boolean",
                            "description": "Return detailed information about the error."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "rewrite",
                        "in": "query",
                        "description": "Provide a more detailed explanation showing the actual Lucene query that will be executed.",
                        "schema": {
                            "type": "boolean",
                            "description": "Provide a more detailed explanation showing the actual Lucene query that will be executed."
                        }
                    },
                    {
                        "name": "all_shards",
                        "in": "query",
                        "description": "Execute validation on all shards instead of one random shard per index.",
                        "schema": {
                            "type": "boolean",
                            "description": "Execute validation on all shards instead of one random shard per index."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesValidateQuery_Get_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.validate_query",
                "x-version-added": "1.0"
            },
            "post": {
                "description": "Allows a user to validate a potentially expensive query without executing it.",
                "operationId": "IndicesValidateQuery_Post_WithIndex",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndicesValidateQuery_BodyParams"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                        "schema": {
                            "type": "string",
                            "pattern": "^(?!_|template|query|field|point|clear|usage|stats|hot|reload|painless).+$",
                            "description": "Comma-separated list of indices; use `_all` or empty string to perform the operation on all indices.",
                            "x-data-type": "array"
                        },
                        "required": true
                    },
                    {
                        "name": "explain",
                        "in": "query",
                        "description": "Return detailed information about the error.",
                        "schema": {
                            "type": "boolean",
                            "description": "Return detailed information about the error."
                        }
                    },
                    {
                        "name": "ignore_unavailable",
                        "in": "query",
                        "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)."
                        }
                    },
                    {
                        "name": "allow_no_indices",
                        "in": "query",
                        "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).",
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)."
                        }
                    },
                    {
                        "name": "expand_wildcards",
                        "in": "query",
                        "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                        "schema": {
                            "$ref": "#/components/schemas/ExpandWildcards"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Query in the Lucene query string syntax.",
                        "schema": {
                            "type": "string",
                            "description": "Query in the Lucene query string syntax."
                        }
                    },
                    {
                        "name": "analyzer",
                        "in": "query",
                        "description": "The analyzer to use for the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The analyzer to use for the query string."
                        }
                    },
                    {
                        "name": "analyze_wildcard",
                        "in": "query",
                        "description": "Specify whether wildcard and prefix queries should be analyzed.",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Specify whether wildcard and prefix queries should be analyzed."
                        }
                    },
                    {
                        "name": "default_operator",
                        "in": "query",
                        "description": "The default operator for query string query (AND or OR).",
                        "schema": {
                            "$ref": "#/components/schemas/DefaultOperator"
                        }
                    },
                    {
                        "name": "df",
                        "in": "query",
                        "description": "The field to use as default where no field prefix is given in the query string.",
                        "schema": {
                            "type": "string",
                            "description": "The field to use as default where no field prefix is given in the query string."
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored.",
                        "schema": {
                            "type": "boolean",
                            "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored."
                        }
                    },
                    {
                        "name": "rewrite",
                        "in": "query",
                        "description": "Provide a more detailed explanation showing the actual Lucene query that will be executed.",
                        "schema": {
                            "type": "boolean",
                            "description": "Provide a more detailed explanation showing the actual Lucene query that will be executed."
                        }
                    },
                    {
                        "name": "all_shards",
                        "in": "query",
                        "description": "Execute validation on all shards instead of one random shard per index.",
                        "schema": {
                            "type": "boolean",
                            "description": "Execute validation on all shards instead of one random shard per index."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IndicesValidateQuery_Post_WithIndex 200 response"
                    }
                },
                "x-operation-group": "indices.validate_query",
                "x-version-added": "1.0"
            }
        }
    },
    "components": {
        "schemas": {
            "AccountDetails": {
                "type": "object",
                "properties": {
                    "user_name": {
                        "type": "string"
                    },
                    "is_reserved": {
                        "type": "boolean"
                    },
                    "is_hidden": {
                        "type": "boolean"
                    },
                    "is_internal_user": {
                        "type": "boolean"
                    },
                    "user_requested_tenant": {
                        "type": "string"
                    },
                    "backend_roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "custom_attribute_names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenants": {
                        "$ref": "#/components/schemas/UserTenants"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ActionGroupsMap": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/components/schemas/Action_Group"
                }
            },
            "ActionObjectStructure": {
                "type": "object",
                "properties": {
                    "add": {
                        "$ref": "#/components/schemas/UserDefinedStructure"
                    },
                    "remove": {
                        "$ref": "#/components/schemas/UserDefinedStructure"
                    },
                    "remove_index": {
                        "$ref": "#/components/schemas/UserDefinedStructure"
                    }
                }
            },
            "Action_Group": {
                "type": "object",
                "properties": {
                    "reserved": {
                        "type": "boolean"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "allowed_actions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "static": {
                        "type": "boolean"
                    }
                }
            },
            "AuditConfig": {
                "type": "object",
                "properties": {
                    "compliance": {
                        "$ref": "#/components/schemas/ComplianceConfig"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "audit": {
                        "$ref": "#/components/schemas/AuditLogsConfig"
                    }
                }
            },
            "AuditConfigWithReadOnly": {
                "type": "object",
                "properties": {
                    "_readonly": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "config": {
                        "$ref": "#/components/schemas/AuditConfig"
                    }
                }
            },
            "AuditLogsConfig": {
                "type": "object",
                "properties": {
                    "ignore_users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ignore_requests": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "disabled_rest_categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "disabled_transport_categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "log_request_body": {
                        "type": "boolean"
                    },
                    "resolve_indices": {
                        "type": "boolean"
                    },
                    "resolve_bulk_requests": {
                        "type": "boolean"
                    },
                    "exclude_sensitive_headers": {
                        "type": "boolean"
                    },
                    "enable_transport": {
                        "type": "boolean"
                    },
                    "enable_rest": {
                        "type": "boolean"
                    }
                }
            },
            "Bulk_BodyParams": {
                "type": "object",
                "description": "The operation definition and data (action-data pairs), separated by newlines",
                "x-serialize": "bulk"
            },
            "Bytes": {
                "type": "string",
                "description": "The unit in which to display byte values.",
                "enum": [
                    "b",
                    "k",
                    "kb",
                    "m",
                    "mb",
                    "g",
                    "gb",
                    "t",
                    "tb",
                    "p",
                    "pb"
                ]
            },
            "CatAllPitSegmentsResponseContent": {
                "type": "object",
                "properties": {
                    "content": {
                        "$ref": "#/components/schemas/CatPitSegment"
                    }
                }
            },
            "CatPitSegment": {
                "type": "object",
                "properties": {
                    "index": {
                        "type": "string"
                    },
                    "shard": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "prirep": {
                        "type": "boolean",
                        "description": "Set to true to return stats only for primary shards."
                    },
                    "ip": {
                        "type": "string"
                    },
                    "segment": {
                        "type": "string"
                    },
                    "generation": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "docs_count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "docs_deleted": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "size": {
                        "type": "string"
                    },
                    "size_memory": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "committed": {
                        "type": "boolean"
                    },
                    "searchable": {
                        "type": "boolean"
                    },
                    "version": {
                        "type": "string"
                    },
                    "compound": {
                        "type": "boolean"
                    }
                }
            },
            "CatPitSegmentsResponseContent": {
                "type": "object",
                "properties": {
                    "content": {
                        "$ref": "#/components/schemas/CatPitSegment"
                    }
                }
            },
            "CatPitSegments_BodyParams": {
                "type": "object",
                "properties": {
                    "pit_id": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "pit_id"
                ]
            },
            "CertificatesDetail": {
                "type": "object",
                "properties": {
                    "issuer_dn": {
                        "type": "string"
                    },
                    "subject_dn": {
                        "type": "string"
                    },
                    "san": {
                        "type": "string"
                    },
                    "not_before": {
                        "type": "string"
                    },
                    "not_after": {
                        "type": "string"
                    }
                }
            },
            "ChangePasswordRequestContent": {
                "type": "object",
                "properties": {
                    "current_password": {
                        "type": "string",
                        "description": "The current password"
                    },
                    "password": {
                        "type": "string",
                        "description": "The new password to set"
                    }
                },
                "required": [
                    "current_password",
                    "password"
                ]
            },
            "ChangePasswordResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "ClearScroll_BodyParams": {
                "type": "object",
                "description": "Comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter"
            },
            "ClusterAllocationExplain_BodyParams": {
                "type": "object",
                "description": "The index, shard, and primary flag to explain. Empty means 'explain the first unassigned shard'"
            },
            "ClusterGetSettingsResponseContent": {
                "type": "object",
                "properties": {
                    "persistent": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "transient": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "defaults": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    }
                }
            },
            "ClusterHealthLevel": {
                "type": "string",
                "description": "Specify the level of detail for returned information.",
                "enum": [
                    "cluster",
                    "indices",
                    "shards",
                    "awareness_attributes"
                ]
            },
            "ClusterPutComponentTemplate_BodyParams": {
                "type": "object",
                "description": "The template definition"
            },
            "ClusterPutSettingsResponseContent": {
                "type": "object",
                "properties": {
                    "acknowledged": {
                        "type": "boolean"
                    },
                    "persistent": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "transient": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    }
                }
            },
            "ClusterPutSettings_BodyParams": {
                "type": "object",
                "description": "The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).",
                "properties": {
                    "persistent": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "transient": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    }
                }
            },
            "ClusterRerouteMetric_Member": {
                "type": "string",
                "enum": [
                    "_all",
                    "blocks",
                    "metadata",
                    "nodes",
                    "routing_table",
                    "master_node",
                    "cluster_manager_node",
                    "version"
                ]
            },
            "ClusterReroute_BodyParams": {
                "type": "object",
                "description": "The definition of `commands` to perform (`move`, `cancel`, `allocate`)"
            },
            "ComplianceConfig": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "write_log_diffs": {
                        "type": "boolean"
                    },
                    "read_watched_fields": {},
                    "read_ignore_users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "write_watched_indices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "write_ignore_users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "read_metadata_only": {
                        "type": "boolean"
                    },
                    "write_metadata_only": {
                        "type": "boolean"
                    },
                    "external_config": {
                        "type": "boolean"
                    },
                    "internal_config": {
                        "type": "boolean"
                    }
                }
            },
            "Conflicts": {
                "type": "string",
                "description": "What to do when the operation encounters version conflicts?.",
                "enum": [
                    "abort",
                    "proceed"
                ]
            },
            "Count_BodyParams": {
                "type": "object",
                "description": "Query to restrict the results specified with the Query DSL (optional)"
            },
            "CreateActionGroupResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "CreatePitResponseContent": {
                "type": "object",
                "properties": {
                    "pit_id": {
                        "type": "string"
                    },
                    "_shards": {
                        "$ref": "#/components/schemas/ShardStatistics"
                    },
                    "creation_time": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "CreateRoleMappingResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "CreateRoleResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "CreateTenantParams": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    }
                }
            },
            "CreateTenantResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "CreateUserResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "Create_BodyParams": {
                "type": "object",
                "description": "The document"
            },
            "DataStream": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "timestamp_field": {
                        "$ref": "#/components/schemas/DataStreamTimestampField"
                    },
                    "indices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataStreamIndex"
                        }
                    },
                    "generation": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "status": {
                        "$ref": "#/components/schemas/DataStreamStatus"
                    },
                    "template": {
                        "type": "string"
                    }
                }
            },
            "DataStreamIndex": {
                "type": "object",
                "properties": {
                    "index_name": {
                        "type": "string"
                    },
                    "index_uuid": {
                        "type": "string"
                    }
                }
            },
            "DataStreamStatus": {
                "type": "string",
                "enum": [
                    "green",
                    "yellow",
                    "red"
                ]
            },
            "DataStreamTimestampField": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                }
            },
            "DefaultOperator": {
                "type": "string",
                "description": "The default operator for query string query (AND or OR).",
                "enum": [
                    "AND",
                    "OR"
                ]
            },
            "DeleteActionGroupResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "DeleteAllPitsResponseContent": {
                "type": "object",
                "properties": {
                    "pits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PitsDetailsDeleteAll"
                        }
                    }
                }
            },
            "DeleteByQuery_BodyParams": {
                "type": "object",
                "description": "The search definition using the Query DSL"
            },
            "DeleteDistinguishedNamesResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "DeletePitResponseContent": {
                "type": "object",
                "properties": {
                    "pits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeletedPit"
                        }
                    }
                }
            },
            "DeletePit_BodyParams": {
                "type": "object",
                "description": "The point-in-time ids to be deleted",
                "properties": {
                    "pit_id": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "pit_id"
                ]
            },
            "DeleteRoleMappingResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "DeleteRoleResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "DeleteTenantResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "DeleteUserResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "DeletedPit": {
                "type": "object",
                "properties": {
                    "successful": {
                        "type": "boolean"
                    },
                    "pit_id": {
                        "type": "string"
                    }
                }
            },
            "DistinguishedNames": {
                "type": "object",
                "properties": {
                    "nodes_dn": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "DistinguishedNamesMap": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/components/schemas/DistinguishedNames"
                }
            },
            "DynamicConfig": {
                "type": "object",
                "properties": {
                    "dynamic": {
                        "$ref": "#/components/schemas/DynamicOptions"
                    }
                }
            },
            "DynamicOptions": {
                "type": "object",
                "properties": {
                    "filteredAliasMode": {
                        "type": "string"
                    },
                    "disableRestAuth": {
                        "type": "boolean"
                    },
                    "disableIntertransportAuth": {
                        "type": "boolean"
                    },
                    "respectRequestIndicesOptions": {
                        "type": "boolean"
                    },
                    "kibana": {},
                    "http": {},
                    "authc": {},
                    "authz": {},
                    "authFailureListeners": {},
                    "doNotFailOnForbidden": {
                        "type": "boolean"
                    },
                    "multiRolespanEnabled": {
                        "type": "boolean"
                    },
                    "hostsResolverMode": {
                        "type": "string"
                    },
                    "doNotFailOnForbiddenEmpty": {
                        "type": "boolean"
                    }
                }
            },
            "ExpandWildcards": {
                "type": "string",
                "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
                "enum": [
                    "all",
                    "open",
                    "closed",
                    "hidden",
                    "none"
                ]
            },
            "Explain_BodyParams": {
                "type": "object",
                "description": "The query definition using the Query DSL"
            },
            "FieldCaps_BodyParams": {
                "type": "object",
                "description": "An index filter specified with the Query DSL"
            },
            "FlushCacheResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "GetAllPitsResponseContent": {
                "type": "object",
                "properties": {
                    "pits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PitDetail"
                        }
                    }
                }
            },
            "GetCertificatesResponseContent": {
                "type": "object",
                "properties": {
                    "http_certificates_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CertificatesDetail"
                        }
                    },
                    "transport_certificates_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CertificatesDetail"
                        }
                    }
                }
            },
            "GetResponseContent": {
                "type": "object",
                "properties": {
                    "_index": {
                        "type": "string"
                    },
                    "_type": {
                        "type": "string"
                    },
                    "_id": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "seq_no": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "primary_term": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "found": {
                        "type": "boolean"
                    },
                    "_routing": {
                        "type": "string"
                    },
                    "_source": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "_fields": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    }
                },
                "required": [
                    "_id",
                    "_index",
                    "found"
                ]
            },
            "GroupBy": {
                "type": "string",
                "description": "Group tasks by nodes or parent/child relationships.",
                "enum": [
                    "nodes",
                    "parents",
                    "none"
                ]
            },
            "Health": {
                "type": "string",
                "description": "Health status ('green', 'yellow', or 'red') to filter only indices matching the specified health status.",
                "enum": [
                    "green",
                    "yellow",
                    "red"
                ]
            },
            "Hits": {
                "type": "object",
                "properties": {
                    "_index": {
                        "type": "string"
                    },
                    "_type": {
                        "type": "string"
                    },
                    "_id": {
                        "type": "string"
                    },
                    "_score": {
                        "type": "number",
                        "format": "float"
                    },
                    "_source": {},
                    "fields": {}
                }
            },
            "HitsMetadata": {
                "type": "object",
                "properties": {
                    "total": {
                        "$ref": "#/components/schemas/Total"
                    },
                    "max_score": {
                        "type": "number",
                        "format": "double"
                    },
                    "hits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Hits"
                        }
                    }
                }
            },
            "IndexPermission": {
                "type": "object",
                "properties": {
                    "index_patterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dls": {
                        "type": "string"
                    },
                    "fls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "masked_fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allowed_actions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Index_BodyParams": {
                "type": "object",
                "description": "The document"
            },
            "IndicesAnalyze_BodyParams": {
                "type": "object",
                "description": "Define analyzer/tokenizer parameters and the text on which the analysis should be performed"
            },
            "IndicesClone_BodyParams": {
                "type": "object",
                "description": "The configuration for the target index (`settings` and `aliases`)"
            },
            "IndicesCreateDataStreamResponseContent": {
                "type": "object",
                "properties": {
                    "acknowledged": {
                        "type": "boolean"
                    }
                }
            },
            "IndicesCreateDataStream_BodyParams": {
                "type": "object",
                "description": "The data stream definition"
            },
            "IndicesCreateResponseContent": {
                "type": "object",
                "properties": {
                    "index": {
                        "type": "string"
                    },
                    "shards_acknowledged": {
                        "type": "boolean"
                    },
                    "acknowledged": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "acknowledged",
                    "index",
                    "shards_acknowledged"
                ]
            },
            "IndicesCreate_BodyParams": {
                "type": "object",
                "description": "The configuration for the index (`settings` and `mappings`)",
                "properties": {
                    "aliases": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "mapping": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "settings": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    }
                }
            },
            "IndicesDeleteDataStreamResponseContent": {
                "type": "object",
                "properties": {
                    "acknowledged": {
                        "type": "boolean"
                    }
                }
            },
            "IndicesDeleteResponseContent": {
                "type": "object",
                "properties": {
                    "acknowledged": {
                        "type": "boolean"
                    }
                }
            },
            "IndicesGetDataStreamResponseContent": {
                "type": "object",
                "properties": {
                    "data_streams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataStream"
                        }
                    }
                }
            },
            "IndicesGetDataStream_WithNameResponseContent": {
                "type": "object",
                "properties": {
                    "data_streams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataStream"
                        }
                    }
                }
            },
            "IndicesPutAlias_BodyParams": {
                "type": "object",
                "description": "The settings for the alias, such as `routing` or `filter`"
            },
            "IndicesPutIndexTemplate_BodyParams": {
                "type": "object",
                "description": "The template definition"
            },
            "IndicesPutMapping_BodyParams": {
                "type": "object",
                "description": "The mapping definition"
            },
            "IndicesPutMapping_PostResponseContent": {
                "type": "object",
                "properties": {
                    "acknowledged": {
                        "type": "boolean"
                    }
                }
            },
            "IndicesPutMapping_PutResponseContent": {
                "type": "object",
                "properties": {
                    "acknowledged": {
                        "type": "boolean"
                    }
                }
            },
            "IndicesPutSettings_BodyParams": {
                "type": "object",
                "description": "The index settings to be updated"
            },
            "IndicesPutTemplate_BodyParams": {
                "type": "object",
                "description": "The template definition"
            },
            "IndicesRollover_BodyParams": {
                "type": "object",
                "description": "The conditions that needs to be met for executing rollover"
            },
            "IndicesShrink_BodyParams": {
                "type": "object",
                "description": "The configuration for the target index (`settings` and `aliases`)"
            },
            "IndicesSimulateIndexTemplate_BodyParams": {
                "type": "object",
                "description": "New index template definition, which will be included in the simulation, as if it already exists in the system"
            },
            "IndicesSimulateTemplate_BodyParams": {
                "type": "object",
                "description": "New index template definition to be simulated, if no index template name is specified"
            },
            "IndicesSplit_BodyParams": {
                "type": "object",
                "description": "The configuration for the target index (`settings` and `aliases`)"
            },
            "IndicesUpdateAliasesResponseContent": {
                "type": "object",
                "properties": {
                    "acknowledged": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "acknowledged"
                ]
            },
            "IndicesUpdateAliases_BodyParams": {
                "type": "object",
                "description": "The definition of `actions` to perform",
                "properties": {
                    "actions": {
                        "$ref": "#/components/schemas/ActionObjectStructure"
                    }
                }
            },
            "IndicesValidateQuery_BodyParams": {
                "type": "object",
                "description": "The query definition specified with the Query DSL"
            },
            "IndiciesStatLevel": {
                "type": "string",
                "description": "Return stats aggregated at cluster, index or shard level.",
                "enum": [
                    "cluster",
                    "indices",
                    "shards"
                ]
            },
            "InfoResponseContent": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "cluster_name": {
                        "type": "string"
                    },
                    "cluster_uuid": {
                        "type": "string"
                    },
                    "version": {
                        "$ref": "#/components/schemas/InfoVersion"
                    },
                    "tagline": {
                        "type": "string"
                    }
                }
            },
            "InfoVersion": {
                "type": "object",
                "properties": {
                    "distribution": {
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "build_type": {
                        "type": "string"
                    },
                    "build_hash": {
                        "type": "string"
                    },
                    "build_date": {
                        "type": "string"
                    },
                    "build_snapshot": {
                        "type": "boolean"
                    },
                    "lucene_version": {
                        "type": "string"
                    },
                    "minimum_wire_compatibility_version": {
                        "type": "string"
                    },
                    "minimum_index_compatibility_version": {
                        "type": "string"
                    }
                }
            },
            "IngestPutPipeline_BodyParams": {
                "type": "object",
                "description": "The ingest definition"
            },
            "IngestSimulate_BodyParams": {
                "type": "object",
                "description": "The simulate definition"
            },
            "Mget_BodyParams": {
                "type": "object",
                "description": "Document identifiers; can be either `docs` (containing full document information) or `ids` (when index is provided in the URL."
            },
            "MsearchTemplate_BodyParams": {
                "type": "object",
                "description": "The request definitions (metadata-search request definition pairs), separated by newlines",
                "x-serialize": "bulk"
            },
            "Msearch_BodyParams": {
                "type": "object",
                "description": "The request definitions (metadata-search request definition pairs), separated by newlines",
                "x-serialize": "bulk"
            },
            "Mtermvectors_BodyParams": {
                "type": "object",
                "description": "Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation."
            },
            "NodesReloadSecureSettings_BodyParams": {
                "type": "object",
                "description": "An object containing the password for the opensearch keystore"
            },
            "NodesStatLevel": {
                "type": "string",
                "description": "Return indices stats aggregated at index, node or shard level.",
                "enum": [
                    "indices",
                    "node",
                    "shards"
                ]
            },
            "OpType": {
                "type": "string",
                "description": "Explicit operation type. Defaults to `index` for requests with an explicit document ID, and to `create` for requests without an explicit document ID.",
                "enum": [
                    "index",
                    "create"
                ]
            },
            "PatchActionGroupInputPayload": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchOperation"
                }
            },
            "PatchActionGroupResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "PatchActionGroupsInputPayload": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchOperation"
                }
            },
            "PatchActionGroupsResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "PatchAuditConfigurationInputPayload": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchOperation"
                }
            },
            "PatchConfigurationInputPayload": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchOperation"
                }
            },
            "PatchConfigurationResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "PatchDistinguishedNamesInputPayload": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchOperation"
                }
            },
            "PatchDistinguishedNamesResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "PatchOperation": {
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The operation to perform. Possible values: remove,add, replace, move, copy, test."
                    },
                    "path": {
                        "type": "string",
                        "description": "The path to the resource."
                    },
                    "value": {
                        "description": "The new values used for the update."
                    }
                },
                "required": [
                    "op",
                    "path"
                ]
            },
            "PatchRoleInputPayload": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchOperation"
                }
            },
            "PatchRoleMappingInputPayload": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchOperation"
                }
            },
            "PatchRoleMappingResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "PatchRoleMappingsInputPayload": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchOperation"
                }
            },
            "PatchRoleMappingsResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "PatchRoleResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "PatchRolesInputPayload": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchOperation"
                }
            },
            "PatchRolesResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "PatchTenantInputPayload": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchOperation"
                }
            },
            "PatchTenantResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "PatchTenantsInputPayload": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchOperation"
                }
            },
            "PatchTenantsResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "PatchUserInputPayload": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchOperation"
                }
            },
            "PatchUserResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "PatchUsersInputPayload": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PatchOperation"
                }
            },
            "PatchUsersResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "PitDetail": {
                "type": "object",
                "properties": {
                    "pit_id": {
                        "type": "string"
                    },
                    "creation_time": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "keep_alive": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "PitsDetailsDeleteAll": {
                "type": "object",
                "properties": {
                    "successful": {
                        "type": "boolean"
                    },
                    "pit_id": {
                        "type": "string"
                    }
                }
            },
            "PutScript_BodyParams": {
                "type": "object",
                "description": "The document"
            },
            "RankEval_BodyParams": {
                "type": "object",
                "description": "The ranking evaluation search definition, including search requests, document ratings and ranking metric definition."
            },
            "RefreshEnum": {
                "type": "string",
                "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
                "enum": [
                    "true",
                    "false",
                    "wait_for"
                ]
            },
            "Reindex_BodyParams": {
                "type": "object",
                "description": "The search definition using the Query DSL and the prototype for the index request."
            },
            "Relation": {
                "type": "string",
                "enum": [
                    "eq",
                    "gte"
                ]
            },
            "ReloadHttpCertificatesResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "ReloadTransportCertificatesResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "RemoteStoreRestoreInfo": {
                "type": "object",
                "properties": {
                    "snapshot": {
                        "type": "string"
                    },
                    "indices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "shards": {
                        "$ref": "#/components/schemas/RemoteStoreRestoreShardsInfo"
                    }
                }
            },
            "RemoteStoreRestoreResponseContent": {
                "type": "object",
                "properties": {
                    "accepted": {
                        "type": "boolean"
                    },
                    "remote_store": {
                        "$ref": "#/components/schemas/RemoteStoreRestoreInfo"
                    }
                }
            },
            "RemoteStoreRestoreShardsInfo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "failed": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "successful": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RemoteStoreRestore_BodyParams": {
                "type": "object",
                "description": "Comma-separated list of index IDs",
                "properties": {
                    "indices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "indices"
                ]
            },
            "RenderSearchTemplate_BodyParams": {
                "type": "object",
                "description": "The search definition template and its params"
            },
            "Role": {
                "type": "object",
                "properties": {
                    "reserved": {
                        "type": "boolean"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "cluster_permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "index_permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IndexPermission"
                        }
                    },
                    "tenant_permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TenantPermission"
                        }
                    },
                    "static": {
                        "type": "boolean"
                    }
                }
            },
            "RoleMapping": {
                "type": "object",
                "properties": {
                    "hosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "reserved": {
                        "type": "boolean"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "backend_roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "and_backend_roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "RoleMappings": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/components/schemas/RoleMapping"
                }
            },
            "RolesMap": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/components/schemas/Role"
                }
            },
            "SampleType": {
                "type": "string",
                "description": "The type to sample.",
                "enum": [
                    "cpu",
                    "wait",
                    "block"
                ]
            },
            "ScriptsPainlessExecute_BodyParams": {
                "type": "object",
                "description": "The script to execute"
            },
            "Scroll_BodyParams": {
                "type": "object",
                "description": "The scroll ID if not passed by URL or query parameter."
            },
            "SearchTemplate_BodyParams": {
                "type": "object",
                "description": "The search definition template and its params"
            },
            "SearchType": {
                "type": "string",
                "description": "Search operation type.",
                "enum": [
                    "query_then_fetch",
                    "dfs_query_then_fetch"
                ]
            },
            "SearchTypeMulti": {
                "type": "string",
                "description": "Search operation type.",
                "enum": [
                    "query_then_fetch",
                    "query_and_fetch",
                    "dfs_query_then_fetch",
                    "dfs_query_and_fetch"
                ]
            },
            "Search_BodyParams": {
                "type": "object",
                "description": "The search definition using the Query DSL",
                "properties": {
                    "docvalue_fields": {
                        "type": "string"
                    },
                    "explain": {
                        "type": "boolean"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "seq_no_primary_term": {
                        "type": "boolean"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "source": {
                        "type": "string"
                    },
                    "stats": {
                        "type": "string"
                    },
                    "terminate_after": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "timeout": {
                        "$ref": "#/components/schemas/Time"
                    },
                    "version": {
                        "type": "boolean"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "min_score": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "indices_boost": {
                        "type": "array",
                        "items": {}
                    },
                    "query": {
                        "$ref": "#/components/schemas/UserDefinedObjectStructure"
                    }
                }
            },
            "Search_GetResponseContent": {
                "type": "object",
                "properties": {
                    "_scroll_id": {
                        "type": "string"
                    },
                    "took": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "timed_out": {
                        "type": "boolean"
                    },
                    "_shards": {
                        "$ref": "#/components/schemas/ShardStatistics"
                    },
                    "hits": {
                        "$ref": "#/components/schemas/HitsMetadata"
                    }
                }
            },
            "Search_Get_WithIndexResponseContent": {
                "type": "object",
                "properties": {
                    "_scroll_id": {
                        "type": "string"
                    },
                    "took": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "timed_out": {
                        "type": "boolean"
                    },
                    "_shards": {
                        "$ref": "#/components/schemas/ShardStatistics"
                    },
                    "hits": {
                        "$ref": "#/components/schemas/HitsMetadata"
                    }
                }
            },
            "Search_PostResponseContent": {
                "type": "object",
                "properties": {
                    "_scroll_id": {
                        "type": "string"
                    },
                    "took": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "timed_out": {
                        "type": "boolean"
                    },
                    "_shards": {
                        "$ref": "#/components/schemas/ShardStatistics"
                    },
                    "hits": {
                        "$ref": "#/components/schemas/HitsMetadata"
                    }
                }
            },
            "Search_Post_WithIndexResponseContent": {
                "type": "object",
                "properties": {
                    "_scroll_id": {
                        "type": "string"
                    },
                    "took": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "timed_out": {
                        "type": "boolean"
                    },
                    "_shards": {
                        "$ref": "#/components/schemas/ShardStatistics"
                    },
                    "hits": {
                        "$ref": "#/components/schemas/HitsMetadata"
                    }
                }
            },
            "SecurityHealthResponseContent": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "mode": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                }
            },
            "ShardStatistics": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "successful": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "skipped": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "failed": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "SnapshotClone_BodyParams": {
                "type": "object",
                "description": "The snapshot clone definition"
            },
            "SnapshotCreateRepository_BodyParams": {
                "type": "object",
                "description": "The repository definition"
            },
            "SnapshotCreate_BodyParams": {
                "type": "object",
                "description": "The snapshot definition"
            },
            "SnapshotRestore_BodyParams": {
                "type": "object",
                "description": "Details of what to restore"
            },
            "Status_Member": {
                "type": "string",
                "enum": [
                    "green",
                    "yellow",
                    "red",
                    "all"
                ]
            },
            "SuggestMode": {
                "type": "string",
                "description": "Specify suggest mode.",
                "enum": [
                    "missing",
                    "popular",
                    "always"
                ]
            },
            "Tenant": {
                "type": "object",
                "properties": {
                    "reserved": {
                        "type": "boolean"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "static": {
                        "type": "boolean"
                    }
                }
            },
            "TenantPermission": {
                "type": "object",
                "properties": {
                    "tenant_patterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allowed_actions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "TenantsMap": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/components/schemas/Tenant"
                }
            },
            "Termvectors_BodyParams": {
                "type": "object",
                "description": "Define parameters and or supply a document to get termvectors for. See documentation."
            },
            "Time": {
                "type": "string",
                "description": "The unit in which to display time values.",
                "enum": [
                    "d",
                    "h",
                    "m",
                    "s",
                    "ms",
                    "micros",
                    "nanos"
                ]
            },
            "Total": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "relation": {
                        "$ref": "#/components/schemas/Relation"
                    }
                }
            },
            "UpdateAuditConfigurationResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "UpdateByQuery_BodyParams": {
                "type": "object",
                "description": "The search definition using the Query DSL"
            },
            "UpdateConfigurationResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "UpdateDistinguishedNamesResponseContent": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Security Operation Status"
                    },
                    "message": {
                        "type": "string",
                        "description": "Security Operation Message"
                    }
                }
            },
            "Update_BodyParams": {
                "type": "object",
                "description": "The request definition requires either `script` or partial `doc`"
            },
            "User": {
                "type": "object",
                "properties": {
                    "hash": {
                        "type": "string"
                    },
                    "reserved": {
                        "type": "boolean"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "backend_roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/UserAttributes"
                    },
                    "description": {
                        "type": "string"
                    },
                    "opendistro_security_roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "static": {
                        "type": "boolean"
                    }
                }
            },
            "UserAttributes": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                }
            },
            "UserDefinedObjectStructure": {
                "type": "object",
                "properties": {
                    "bool": {},
                    "boosting": {},
                    "combined_fields": {},
                    "constant_score": {},
                    "dis_max": {},
                    "distance_feature": {},
                    "exists": {},
                    "function_score": {},
                    "fuzzy": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "geo_bounding_box": {},
                    "geo_distance": {},
                    "geo_polygon": {},
                    "geo_shape": {},
                    "has_child": {},
                    "has_parent": {},
                    "ids": {},
                    "intervals": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "knn": {},
                    "match": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "match_all": {},
                    "match_bool_prefix": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "match_none": {},
                    "match_phrase": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "match_phrase_prefix": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "more_like_this": {},
                    "multi_match": {},
                    "nested": {},
                    "parent_id": {},
                    "percolate": {},
                    "pinned": {},
                    "prefix": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "query_string": {},
                    "range": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "rank_feature": {},
                    "regexp": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "script": {},
                    "script_score": {},
                    "shape": {},
                    "simple_query_string": {},
                    "span_containing": {},
                    "field_masking_span": {},
                    "span_first": {},
                    "span_multi": {},
                    "span_near": {},
                    "span_not": {},
                    "span_or": {},
                    "span_term": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "span_within": {},
                    "term": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "terms": {},
                    "terms_set": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "wildcard": {
                        "$ref": "#/components/schemas/UserDefinedValueMap"
                    },
                    "wrapper": {}
                }
            },
            "UserDefinedStructure": {
                "type": "object",
                "properties": {
                    "alias": {
                        "type": "string"
                    },
                    "aliases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filter": {},
                    "index": {
                        "type": "string"
                    },
                    "indices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "index_routing": {
                        "type": "string"
                    },
                    "is_hidden": {
                        "type": "boolean"
                    },
                    "is_write_index": {
                        "type": "boolean"
                    },
                    "must_exist": {
                        "type": "string"
                    },
                    "routing": {
                        "type": "string"
                    },
                    "search_routing": {
                        "type": "string"
                    }
                }
            },
            "UserDefinedValueMap": {
                "type": "object",
                "additionalProperties": {}
            },
            "UserTenants": {
                "type": "object",
                "properties": {
                    "global_tenant": {
                        "type": "boolean"
                    },
                    "admin_tenant": {
                        "type": "boolean"
                    },
                    "admin": {
                        "type": "boolean"
                    }
                }
            },
            "UsersMap": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/components/schemas/User"
                }
            },
            "VersionType": {
                "type": "string",
                "description": "Specific version type.",
                "enum": [
                    "internal",
                    "external",
                    "external_gte",
                    "force"
                ]
            },
            "WaitForEvents": {
                "type": "string",
                "description": "Wait until all currently queued events with the given priority are processed.",
                "enum": [
                    "immediate",
                    "urgent",
                    "high",
                    "normal",
                    "low",
                    "languid"
                ]
            },
            "WaitForStatus": {
                "type": "string",
                "description": "Wait until cluster is in a specific state.",
                "enum": [
                    "green",
                    "yellow",
                    "red"
                ]
            }
        },
        "securitySchemes": {
            "smithy.api.httpBasicAuth": {
                "type": "http",
                "description": "HTTP Basic authentication",
                "scheme": "Basic"
            }
        }
    },
    "security": [
        {
            "smithy.api.httpBasicAuth": []
        }
    ]
}
