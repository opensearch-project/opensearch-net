@using System.Linq
@using ApiGenerator.Domain.Code.HighLevel.Requests
@using ApiGenerator.Generator
@inherits global::ApiGenerator.CodeTemplatePage<DescriptorPartialImplementation>
@{
	var type = Model.CsharpNames.GenericOrNonGenericDescriptorName;
	var concreteInterface = Model.CsharpNames.GenericOrNonGenericInterfaceName;
	var baseInterface = Model.CsharpNames.GenericOrNonGenericInterfacePreference;
	var apiLookup = $"ApiUrlsLookups.{Model.CsharpNames.Namespace}{Model.CsharpNames.MethodName}";
}
///<summary>Descriptor for @Model.CsharpNames.MethodName@(Raw(string.IsNullOrEmpty(Model.OfficialDocumentationLink) ? "" : $" <para>{Model.OfficialDocumentationLink}</para>"))</summary>
public partial class @Raw(type) @Raw(string.Format(" : RequestDescriptorBase<{0},{1}, {2}>, {2}", type,Model.CsharpNames.ParametersName, concreteInterface))
{ 
	internal override ApiUrls ApiUrls => @apiLookup;
@foreach (var c in Model.Constructors)
{
<text>	@(Raw(CodeGenerator.Constructor(c)))
</text>
}
	// values part of the url path
@foreach (var part in Model.Parts)
{
<text>	@(Raw(part.HighLevelTypeName)) @(Raw(baseInterface)).@(part.InterfaceName) => Self.RouteValues.Get@(Raw($"<{part.HighLevelTypeName}>"))("@(part.Name)");
</text>
}
@foreach (var c in Model.GetFluentRouteSetters())
{
<text>
	@(Raw(c.XmlDoc))
	@(Raw(c.Code))
</text>
}
	// Request parameters
@foreach (var param in Model.Params)
{
	var original = param.QueryStringKey;
	//skip parameters already part of the path portion of the url
	if (Model.Parts.Any(p=>p.Name == original))
	{
		continue;
	}
	//we prefer this parameter to be explictly implemented on the request body
	if (param.RenderPartial && Model.HasBody)
	{
		continue;
	}
	var tSuffix = param.TypeHighLevel is "bool" or "bool?" ? " = true" : "";
	var typed = !string.IsNullOrEmpty(Model.CsharpNames.GenericsDeclaredOnDescriptor);
	var g = typed ? Model.CsharpNames.GenericsDeclaredOnDescriptor.Replace("<", "").Replace(">", "") : "T";
	var desc = param.DescriptionHighLevel.ToList();
	
	await IncludeAsync("HighLevel.Descriptors.XmlDocs", desc);
	if(!string.IsNullOrWhiteSpace(param.Obsolete))
	{
		<text>
	[Obsolete("Scheduled to be removed in 8.0, @param.Obsolete")]
		</text>
	}
<text>
	public @Raw(type) @(param.ClsName)(@param.DescriptorArgumentType @param.ClsArgumentName@tSuffix) => Qs("@original", @(param.ClsArgumentName));
</text>
	if (param.IsFieldsParam)
	{
<text>
	///<summary>@param.Description</summary>
	public @Raw(type) @param.ClsName@(Raw(typed ? "" : "<T>"))(params @Raw($"Expression<Func<{g}, object>>[]") fields) @Raw(typed ? "" : $"where {g} : class") => Qs("@original", fields?@Raw(".Select(e=>(Field)e)"));
</text>
	}
	else if (param.IsFieldParam)
	{
<text>
	///<summary>@param.Description</summary>
	public @Raw(type) @param.ClsName@(Raw(typed ? "" : "<T>"))(@Raw($"Expression<Func<{g}, object>>") field) @Raw(typed ? "" : $"where {g} : class") => Qs("@original", (Field)field);
</text>
	}
}
@if (Model.CsharpNames.DescriptorNotFoundInCodebase)
{<text>
	[Obsolete("Unmapped, blacklist this API in CodeConfiguration.cs or implement @Model.CsharpNames.DescriptorName and @Model.CsharpNames.RequestName in a file called @(Model.CsharpNames.RequestName).cs in OSC's codebase", true)]
	public bool IsUnmapped => true;
	public bool UseIsUnmapped => IsUnmapped;
 </text>
}	
}

