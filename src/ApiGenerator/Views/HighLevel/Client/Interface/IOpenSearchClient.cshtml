@using ApiGenerator
@using ApiGenerator.Domain
@using ApiGenerator.Domain.Code
@inherits ApiGenerator.CodeTemplatePage<RestApiSpec>
@{ await IncludeAsync("GeneratorNotice", Model); }
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using OpenSearch.Client;
@{ await IncludeAsync("HighLevel.Client.Usings", Model);}

namespace OpenSearch.Client
{
	///<summary>
	///OpenSearch high level client
	///</summary>
	public partial interface IOpenSearchClient 
	{
		@foreach(var (ns, endpoints) in Model.EndpointsPerNamespaceHighLevel)
		{
		if (ns != CsharpNames.RootNamespace)
		{
<text>		///<summary>@ns.SplitPascalCase() APIs</summary>
			@CsharpNames.HighLevelClientNamespacePrefix@(ns)@CsharpNames.ClientNamespaceSuffix @ns { get; }
</text>
			continue;
		}
			foreach(var e in endpoints)
			{
				await IncludeAsync("HighLevel.Client.Interface.MethodInterface", e.HighLevelModel);
			}
		}
	}
}
