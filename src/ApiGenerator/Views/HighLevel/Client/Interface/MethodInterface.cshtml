@using ApiGenerator
@using ApiGenerator.Domain.Code.HighLevel.Methods
@using HighLevelModel = ApiGenerator.Domain.Code.HighLevel.Methods.HighLevelModel
@inherits CodeTemplatePage<HighLevelModel>
@{
    const string xmlDocsPath = "HighLevel.Client.MethodXmlDocs";
    const string fluentPath = "HighLevel.Client.FluentSyntax.FluentMethodHeader";
    const string initializerPath = "HighLevel.Client.InitializerSyntax.InitializerMethodHeader";
}

@{ await IncludeAsync(xmlDocsPath, Model.Fluent); }
@{ await IncludeAsync(fluentPath, new FluentSyntaxView(Model.Fluent, async: false)); };
@{ await IncludeAsync(xmlDocsPath, Model.Fluent); }
@{ await IncludeAsync(fluentPath, new FluentSyntaxView(Model.Fluent, async: true)); };

@if (Model.FluentBound != null)
{
<text>
    @{ await IncludeAsync(xmlDocsPath, Model.FluentBound); }
    @{ await IncludeAsync(fluentPath, new FluentSyntaxView(Model.FluentBound, async: false)); };
    @{ await IncludeAsync(xmlDocsPath, Model.FluentBound); }
    @{ await IncludeAsync(fluentPath, new FluentSyntaxView(Model.FluentBound, async: true)); };
</text>
}
@{ await IncludeAsync(xmlDocsPath, Model.Initializer); }
@{ await IncludeAsync(initializerPath, new InitializerSyntaxView(Model.Initializer, async: false)); };
@{ await IncludeAsync(xmlDocsPath, Model.Initializer); }
@{ await IncludeAsync(initializerPath, new InitializerSyntaxView(Model.Initializer, async: true)); };

