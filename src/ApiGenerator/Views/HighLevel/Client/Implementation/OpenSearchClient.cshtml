@using System.Linq
@using ApiGenerator.Domain
@using ApiGenerator 
@using ApiGenerator.Domain.Code
@inherits CodeTemplatePage<RestApiSpec>
@{ await IncludeAsync("GeneratorNotice", Model); }
// ReSharper disable RedundantUsingDirective
using System;
using System.Threading;
using System.Threading.Tasks;
using OpenSearch.Client;
@{ await IncludeAsync("HighLevel.Client.Usings", Model);}

@{
	var namespaces = Model.EndpointsPerNamespaceHighLevel.Keys.Where(k => k != CsharpNames.RootNamespace).ToList();
<text>
// ReSharper disable RedundantTypeArgumentsOfMethod
namespace OpenSearch.Client;

///<summary>
///OpenSearch high level client
///</summary>
public partial class OpenSearchClient : IOpenSearchClient
{
</text>
foreach (var ns in namespaces)
{
<text>	///<summary>@(ns.SplitPascalCase()) APIs</summary>
		public @CsharpNames.HighLevelClientNamespacePrefix@(ns)@CsharpNames.ClientNamespaceSuffix @ns { get; private set; }
</text>
}
<text>
	partial void SetupNamespacesGenerated()
	{
</text>
foreach (var ns in namespaces)
{
<text>	@ns = new @(CsharpNames.HighLevelClientNamespacePrefix)@(ns)@(CsharpNames.ClientNamespaceSuffix)(this);
</text>
}
<text>
	}
</text>
	
foreach (var (_, endpoints) in Model.EndpointsPerNamespaceHighLevel.Where(kv => kv.Key == CsharpNames.RootNamespace))
{
	foreach (var e in endpoints)
	{
		await IncludeAsync("HighLevel.Client.Implementation.MethodImplementation", e.HighLevelModel);
	}
}
<text>
}
</text>
}
