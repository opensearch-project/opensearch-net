@using System.Linq
@using ApiGenerator.Domain
@using ApiGenerator
@using ApiGenerator.Domain.Code
@inherits CodeTemplatePage<RestApiSpec>
@{ await IncludeLegacyGeneratorNotice(); }
// ReSharper disable RedundantUsingDirective
using System;
using System.Threading;
using System.Threading.Tasks;
using OpenSearch.Client;
@{ await IncludeAsync("HighLevel/Client/Usings.cshtml", Model);}

@{
	var namespaces = Model.EndpointsPerNamespaceHighLevel.Keys.ToHashSet();
	namespaces.Remove(CsharpNames.RootNamespace);
	namespaces.Add("Http");

<text>
// ReSharper disable RedundantTypeArgumentsOfMethod
namespace OpenSearch.Client
{
    /// <summary>
    /// OpenSearch high level client
    /// </summary>
    public partial class OpenSearchClient : IOpenSearchClient
    {
</text>
    foreach (var ns in namespaces)
    {
<text>      /// <summary>@(ns.SplitPascalCase()) APIs</summary>
            public @CsharpNames.HighLevelClientNamespacePrefix@(ns)@CsharpNames.ClientNamespaceSuffix @ns { get; private set; }
</text>
    }
<text>
        partial void SetupGeneratedNamespaces()
        {
</text>
    foreach (var ns in namespaces)
    {
<text>      @(ns) = new @(CsharpNames.HighLevelClientNamespacePrefix)@(ns)@(CsharpNames.ClientNamespaceSuffix)(this);
</text>
    }
<text>
        }
</text>

	if(Model.EndpointsPerNamespaceHighLevel.TryGetValue(CsharpNames.RootNamespace, out var endpoints))
	{
		foreach(var m in endpoints.Select(e => e.HighLevelModel))
		{
			await IncludeAsync("HighLevel/Client/Implementation/MethodImplementation.cshtml", m);
		}
	}
    <text>
    }
    }
    </text>
}
