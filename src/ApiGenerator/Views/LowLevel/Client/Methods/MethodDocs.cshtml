@using ApiGenerator
@using ApiGenerator.Domain.Code.LowLevel
@using ApiGenerator.Domain.Specification
@using SemanticVersioning
@using Version = SemanticVersioning.Version
@inherits ApiGenerator.CodeTemplatePage<LowLevelClientMethod>
/// <summary>@Model.HttpMethod on @Model.Path@(Raw(Model.OfficialDocumentationLink.IsNullOrEmpty() ? "" : " <para>" + Model.OfficialDocumentationLink + "</para>"))</summary>
@foreach (var part in Model.Parts)
{
<text>      /// @Raw("<param name=\""+part.NameAsArgument+"\">")@part.Description@Raw("</param>")
</text>
}
        /// @Raw(@"<param name=""requestParameters"">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>")
        @if (Model.Stability != Stability.Stable)
        {
            string warningMessage = "";
            switch (Model.Stability)
            {
                case Stability.Experimental:
                    warningMessage = "this functionality is Experimental and may be changed or removed completely in a future release. OpenSearch will take a best effort approach to fix any issues, but experimental features are not subject to the support SLA of official GA features.";
                    break;
                case Stability.Beta:
                    warningMessage = "this functionality is in Beta and is subject to change. The design and code is less mature than official GA features and is being provided as-is with no warranties. Beta features are not subject to the support SLA of official GA features.";
                    break;
            }

            warningMessage += " This functionality is subject to potential breaking changes within a minor version, meaning that your referencing code may break when this library is upgraded.";

<text>      /// @Raw("<remarks>Note: " + Model.Stability + " within the OpenSearch server, " + warningMessage + "</remarks>")

</text>}
		@if (Model.VersionAdded is {} versionAdded && versionAdded > new Version("1.0.0"))
		{
<text>      /// @Raw("<remarks>Supported by OpenSearch servers of version " + versionAdded + " or greater.</remarks>")
</text>}
        @if (Model.Deprecation is {} deprecation)
        {
<text>      [Obsolete("Deprecated in version @deprecation.Version: @Raw(deprecation.Description)")]
</text>}
