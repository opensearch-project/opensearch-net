@using System.Linq
@using ApiGenerator.Domain
@using ApiGenerator
@inherits CodeTemplatePage<RestApiSpec>
@{ await IncludeLegacyGeneratorNotice(); }
@functions {
    private static bool IsFlag(EnumDescription e) =>
	    e.IsFlag || e.Name.EndsWith("Metric") || e.Name.EndsWith("Feature");

    private static string GetEnumMember(string enumName, (string Value, string Alias) option)
    {
        var (value, alias) = option;
        
        if (enumName == "Size" && value == string.Empty) return "Raw";
        
        return value switch
        {
            "0" => "Zero",
            "1" => "One",
            "2" => "Two",
            "3" => "Three",
            "4" => "Four",
            "5" => "Five",
            "6" => "Six",
            "7" => "Seven",
            "8" => "Eight",
            "9" => "Nine",
            "asc" => "Ascending",
            "desc" => "Descending",
            "b" when enumName == "ByteUnit" => "B",
            _ when !alias.IsNullOrEmpty() => alias.ToPascalCase(),
            _ => value.ToPascalCase()
        };
    }
}
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;
using System.Text;
using System.Reflection;
using System.Runtime.Serialization;

namespace OpenSearch.Net
{
@foreach (var e in Model.EnumsInTheSpec)
{
    var isFlag = IsFlag(e);
    <text>
	@(isFlag ? "[Flags, StringEnum]" : "[StringEnum]")
	public enum @e.Name
	{
	@foreach (var (o, i) in e.Options.OrderBy(o => o.Value == "_all" ? 1 : 0).Select((o, i) => (o, i)))
	{
		<text>@(i > 0 ? "," : null)
		[EnumMember(Value = "@(o.Value)")]
		@(GetEnumMember(e.Name, o))@(isFlag ? Raw($" = 1 << {i}") : null)</text>
	}
    }</text>
}

    public static partial class KnownEnums
    {
		static partial void RegisterEnumStringResolvers()
        {
        @foreach (var e in Model.EnumsInTheSpec)
        {
<text>          AddEnumStringResolver<@(e.Name)>(GetStringValue);
</text>
        }
        }

	@foreach (var e in Model.EnumsInTheSpec)
    {
	    if (IsFlag(e))
	    {
		    <text>
		    public static string GetStringValue(this @(e.Name) enumValue)
		    {
		    </text>
		    if (e.Options.Any(o => o.Value == "_all"))
		    {
			    <text>if ((enumValue & @(e.Name).All) != 0) return "_all";
			    </text>
		    }
		    <text>var list = new @(Raw("List<string>()"));
		    </text>
		    foreach (var o in e.Options.Where(o => o.Value != "_all"))
		    {
			    <text>if ((enumValue & @(e.Name).@(GetEnumMember(e.Name, o))) != 0) list.Add("@(o.Value)");
			    </text>
		    }
		    <text>return string.Join(",", list);
			}</text>
	    }
        else
        {
	        <text>
		    public static string GetStringValue(this @(e.Name) enumValue) =>
				enumValue switch {
				@foreach (var o in e.Options)
				{
					<text>@(e.Name).@(GetEnumMember(e.Name, o)) => "@(o.Value)",
					</text>
				}
					_ => throw new ArgumentException($"'{enumValue.ToString()}' is not a valid value for enum '@(e.Name)'")
				};
	        </text>
        }
	}
	}
}
