@using System.Linq
@using ApiGenerator.Domain
@using ApiGenerator
@inherits CodeTemplatePage<RestApiSpec>
@{ await IncludeLegacyGeneratorNotice(); }
@functions {
    private static bool IsFlag(EnumDescription e) =>
	    e.IsFlag || e.Name.EndsWith("Metric") || e.Name.EndsWith("Feature");

    private static string GetEnumValue(string enumName, string value) =>
	    enumName == "Size" && value == string.Empty
		    ? "Raw"
		    : value.ToPascalCase(true);
}
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;
using System.Text;
using System.Reflection;
using System.Runtime.Serialization;

namespace OpenSearch.Net
{
@foreach (var e in Model.EnumsInTheSpec)
{
    var isFlag = IsFlag(e);
    <text>
	@(isFlag ? "[Flags, StringEnum]" : "[StringEnum]")
	public enum @e.Name
	{
	@foreach (var (o, i) in e.Options.OrderBy(o => o == "_all" ? 1 : 0).Select((o, i) => (o, i)))
	{
		<text>@(i > 0 ? "," : null)
		[EnumMember(Value = "@(o)")]
		@(GetEnumValue(e.Name, o))@(isFlag ? Raw($" = 1 << {i}") : null)</text>
	}
    }</text>
}

    public static partial class KnownEnums
    {
		static partial void RegisterEnumStringResolvers()
        {
        @foreach (var e in Model.EnumsInTheSpec)
        {
<text>          AddEnumStringResolver<@(e.Name)>(GetStringValue);
</text>
        }
        }

	@foreach (var e in Model.EnumsInTheSpec)
    {
	    if (IsFlag(e))
	    {
		    <text>
		    public static string GetStringValue(this @(e.Name) enumValue)
		    {
		    </text>
		    if (e.Options.Any(o => o == "_all"))
		    {
			    <text>if ((enumValue & @(e.Name).All) != 0) return "_all";
			    </text>
		    }
		    <text>var list = new @(Raw("List<string>()"));
		    </text>
		    foreach (var o in e.Options.Where(o => o != "_all"))
		    {
			    <text>if ((enumValue & @(e.Name).@(GetEnumValue(e.Name, o))) != 0) list.Add("@(o)");
			    </text>
		    }
		    <text>return string.Join(",", list);
			}</text>
	    }
        else
        {
	        <text>
		    public static string GetStringValue(this @(e.Name) enumValue) =>
				enumValue switch {
				@foreach (var o in e.Options)
				{
					<text>@(e.Name).@(GetEnumValue(e.Name, o)) => "@(o)",
					</text>
				}
					_ => throw new ArgumentException($"'{enumValue.ToString()}' is not a valid value for enum '@(e.Name)'")
				};
	        </text>
        }
	}
	}
}
